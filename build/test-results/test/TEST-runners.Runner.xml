<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="runners.Runner" tests="10" skipped="0" failures="3" errors="0" timestamp="2025-06-20T17:08:38" hostname="Jennys-MacBook-Pro.local" time="3.39">
  <properties/>
  <testcase name="[1:11] Actualizar personaje (exitoso)" classname="runners.Runner" time="0.804">
    <failure message="org.opentest4j.AssertionFailedError: status code was: 404, expected: 200, response time in milliseconds: 287, url: http://bp-se-test-cabcd9b246a5.herokuapp.com/testuser/api/characters/111, response: &#10;{&quot;error&quot;:&quot;Character not found&quot;}&#10;classpath:features/marvel_characters_api/actualizarPersonaje.feature:23" type="org.opentest4j.AssertionFailedError">org.opentest4j.AssertionFailedError: status code was: 404, expected: 200, response time in milliseconds: 287, url: http://bp-se-test-cabcd9b246a5.herokuapp.com/testuser/api/characters/111, response: 
{&quot;error&quot;:&quot;Character not found&quot;}
classpath:features/marvel_characters_api/actualizarPersonaje.feature:23
	at app//org.junit.jupiter.api.AssertionUtils.fail(AssertionUtils.java:38)
	at app//org.junit.jupiter.api.Assertions.fail(Assertions.java:135)
	at app//com.intuit.karate.junit5.FeatureNode.lambda$next$1(FeatureNode.java:86)
	at app//org.junit.jupiter.engine.descriptor.DynamicTestTestDescriptor.lambda$execute$0(DynamicTestTestDescriptor.java:53)
	at app//org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131)
	at app//org.junit.jupiter.api.extension.InvocationInterceptor.interceptDynamicTest(InvocationInterceptor.java:167)
	at app//org.junit.jupiter.api.extension.InvocationInterceptor.interceptDynamicTest(InvocationInterceptor.java:184)
	at app//org.junit.jupiter.engine.descriptor.DynamicTestTestDescriptor.lambda$execute$1(DynamicTestTestDescriptor.java:61)
	at app//org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptorCall.lambda$ofVoid$0(InvocationInterceptorChain.java:78)
	at app//org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106)
	at app//org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:64)
	at app//org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:45)
	at app//org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:37)
	at app//org.junit.jupiter.engine.descriptor.DynamicTestTestDescriptor.execute(DynamicTestTestDescriptor.java:60)
	at app//org.junit.jupiter.engine.descriptor.DynamicTestTestDescriptor.execute(DynamicTestTestDescriptor.java:32)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:151)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at app//org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at app//org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask$DefaultDynamicTestExecutor.execute(NodeTestTask.java:226)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask$DefaultDynamicTestExecutor.execute(NodeTestTask.java:204)
	at java.base@17.0.14/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183)
	at java.base@17.0.14/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base@17.0.14/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base@17.0.14/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base@17.0.14/java.util.Iterator.forEachRemaining(Iterator.java:133)
	at java.base@17.0.14/java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1845)
	at java.base@17.0.14/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base@17.0.14/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base@17.0.14/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150)
	at java.base@17.0.14/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173)
	at java.base@17.0.14/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base@17.0.14/java.util.stream.ReferencePipeline.forEachOrdered(ReferencePipeline.java:601)
	at app//org.junit.jupiter.engine.descriptor.DynamicContainerTestDescriptor.execute(DynamicContainerTestDescriptor.java:67)
	at app//org.junit.jupiter.engine.descriptor.DynamicContainerTestDescriptor.execute(DynamicContainerTestDescriptor.java:33)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:151)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at app//org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at app//org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask$DefaultDynamicTestExecutor.execute(NodeTestTask.java:226)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask$DefaultDynamicTestExecutor.execute(NodeTestTask.java:204)
	at java.base@17.0.14/java.util.Optional.ifPresent(Optional.java:178)
	at app//org.junit.jupiter.engine.descriptor.TestFactoryTestDescriptor.lambda$invokeTestMethod$1(TestFactoryTestDescriptor.java:108)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.jupiter.engine.descriptor.TestFactoryTestDescriptor.invokeTestMethod(TestFactoryTestDescriptor.java:95)
	at app//org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:138)
	at app//org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:68)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:151)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at app//org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base@17.0.14/java.util.ArrayList.forEach(ArrayList.java:1511)
	at app//org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at app//org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base@17.0.14/java.util.ArrayList.forEach(ArrayList.java:1511)
	at app//org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at app//org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at app//org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at app//org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at app//org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at app//org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:107)
	at app//org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)
	at app//org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)
	at app//org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)
	at app//org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)
	at app//org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at app//org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at app//org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor$CollectAllTestClassesExecutor.processAllTestClasses(JUnitPlatformTestClassProcessor.java:119)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor$CollectAllTestClassesExecutor.access$000(JUnitPlatformTestClassProcessor.java:94)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor.stop(JUnitPlatformTestClassProcessor.java:89)
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:62)
	at java.base@17.0.14/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base@17.0.14/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base@17.0.14/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base@17.0.14/java.lang.reflect.Method.invoke(Method.java:569)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:36)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:33)
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:94)
	at jdk.proxy1/jdk.proxy1.$Proxy2.stop(Unknown Source)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker$3.run(TestWorker.java:193)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.executeAndMaintainThreadName(TestWorker.java:129)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:100)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:60)
	at org.gradle.process.internal.worker.child.ActionExecutionWorker.execute(ActionExecutionWorker.java:56)
	at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:113)
	at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:65)
	at app//worker.org.gradle.process.internal.worker.GradleWorkerMain.run(GradleWorkerMain.java:69)
	at app//worker.org.gradle.process.internal.worker.GradleWorkerMain.main(GradleWorkerMain.java:74)
</failure>
  </testcase>
  <testcase name="[2:26] Actualizar personaje (no existe)" classname="runners.Runner" time="0.429"/>
  <testcase name="[1:10] Obtener personaje por ID (exitoso)" classname="runners.Runner" time="0.183"/>
  <testcase name="[2:17] Obtener personaje por ID (no existe)" classname="runners.Runner" time="0.261"/>
  <testcase name="[1:10] T-API-BTPMCDP-999-CA01 - Consultar todos los personajes (200 OK)" classname="runners.Runner" time="0.619"/>
  <testcase name="[1:11] Crear personaje (exitoso)" classname="runners.Runner" time="0.203">
    <failure message="org.opentest4j.AssertionFailedError: status code was: 400, expected: 201, response time in milliseconds: 197, url: http://bp-se-test-cabcd9b246a5.herokuapp.com/testuser/api/characters, response: &#10;{&quot;error&quot;:&quot;Character name already exists&quot;}&#10;classpath:features/marvel_characters_api/crearPersonaje.feature:22" type="org.opentest4j.AssertionFailedError">org.opentest4j.AssertionFailedError: status code was: 400, expected: 201, response time in milliseconds: 197, url: http://bp-se-test-cabcd9b246a5.herokuapp.com/testuser/api/characters, response: 
{&quot;error&quot;:&quot;Character name already exists&quot;}
classpath:features/marvel_characters_api/crearPersonaje.feature:22
	at app//org.junit.jupiter.api.AssertionUtils.fail(AssertionUtils.java:38)
	at app//org.junit.jupiter.api.Assertions.fail(Assertions.java:135)
	at app//com.intuit.karate.junit5.FeatureNode.lambda$next$1(FeatureNode.java:86)
	at app//org.junit.jupiter.engine.descriptor.DynamicTestTestDescriptor.lambda$execute$0(DynamicTestTestDescriptor.java:53)
	at app//org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131)
	at app//org.junit.jupiter.api.extension.InvocationInterceptor.interceptDynamicTest(InvocationInterceptor.java:167)
	at app//org.junit.jupiter.api.extension.InvocationInterceptor.interceptDynamicTest(InvocationInterceptor.java:184)
	at app//org.junit.jupiter.engine.descriptor.DynamicTestTestDescriptor.lambda$execute$1(DynamicTestTestDescriptor.java:61)
	at app//org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptorCall.lambda$ofVoid$0(InvocationInterceptorChain.java:78)
	at app//org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106)
	at app//org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:64)
	at app//org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:45)
	at app//org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:37)
	at app//org.junit.jupiter.engine.descriptor.DynamicTestTestDescriptor.execute(DynamicTestTestDescriptor.java:60)
	at app//org.junit.jupiter.engine.descriptor.DynamicTestTestDescriptor.execute(DynamicTestTestDescriptor.java:32)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:151)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at app//org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at app//org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask$DefaultDynamicTestExecutor.execute(NodeTestTask.java:226)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask$DefaultDynamicTestExecutor.execute(NodeTestTask.java:204)
	at java.base@17.0.14/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183)
	at java.base@17.0.14/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base@17.0.14/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base@17.0.14/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base@17.0.14/java.util.Iterator.forEachRemaining(Iterator.java:133)
	at java.base@17.0.14/java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1845)
	at java.base@17.0.14/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base@17.0.14/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base@17.0.14/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150)
	at java.base@17.0.14/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173)
	at java.base@17.0.14/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base@17.0.14/java.util.stream.ReferencePipeline.forEachOrdered(ReferencePipeline.java:601)
	at app//org.junit.jupiter.engine.descriptor.DynamicContainerTestDescriptor.execute(DynamicContainerTestDescriptor.java:67)
	at app//org.junit.jupiter.engine.descriptor.DynamicContainerTestDescriptor.execute(DynamicContainerTestDescriptor.java:33)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:151)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at app//org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at app//org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask$DefaultDynamicTestExecutor.execute(NodeTestTask.java:226)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask$DefaultDynamicTestExecutor.execute(NodeTestTask.java:204)
	at java.base@17.0.14/java.util.Optional.ifPresent(Optional.java:178)
	at app//org.junit.jupiter.engine.descriptor.TestFactoryTestDescriptor.lambda$invokeTestMethod$1(TestFactoryTestDescriptor.java:108)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.jupiter.engine.descriptor.TestFactoryTestDescriptor.invokeTestMethod(TestFactoryTestDescriptor.java:95)
	at app//org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:138)
	at app//org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:68)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:151)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at app//org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base@17.0.14/java.util.ArrayList.forEach(ArrayList.java:1511)
	at app//org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at app//org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base@17.0.14/java.util.ArrayList.forEach(ArrayList.java:1511)
	at app//org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at app//org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at app//org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at app//org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at app//org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at app//org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:107)
	at app//org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)
	at app//org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)
	at app//org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)
	at app//org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)
	at app//org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at app//org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at app//org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor$CollectAllTestClassesExecutor.processAllTestClasses(JUnitPlatformTestClassProcessor.java:119)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor$CollectAllTestClassesExecutor.access$000(JUnitPlatformTestClassProcessor.java:94)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor.stop(JUnitPlatformTestClassProcessor.java:89)
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:62)
	at java.base@17.0.14/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base@17.0.14/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base@17.0.14/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base@17.0.14/java.lang.reflect.Method.invoke(Method.java:569)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:36)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:33)
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:94)
	at jdk.proxy1/jdk.proxy1.$Proxy2.stop(Unknown Source)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker$3.run(TestWorker.java:193)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.executeAndMaintainThreadName(TestWorker.java:129)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:100)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:60)
	at org.gradle.process.internal.worker.child.ActionExecutionWorker.execute(ActionExecutionWorker.java:56)
	at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:113)
	at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:65)
	at app//worker.org.gradle.process.internal.worker.GradleWorkerMain.run(GradleWorkerMain.java:69)
	at app//worker.org.gradle.process.internal.worker.GradleWorkerMain.main(GradleWorkerMain.java:74)
</failure>
  </testcase>
  <testcase name="[2:26] Crear personaje (nombre duplicado)" classname="runners.Runner" time="0.186"/>
  <testcase name="[3:41] Crear personaje (faltan campos requeridos)" classname="runners.Runner" time="0.231"/>
  <testcase name="[1:10] Eliminar personaje (exitoso)" classname="runners.Runner" time="0.193">
    <failure message="org.opentest4j.AssertionFailedError: status code was: 404, expected: 204, response time in milliseconds: 188, url: http://bp-se-test-cabcd9b246a5.herokuapp.com/testuser/api/characters/1, response: &#10;{&quot;error&quot;:&quot;Character not found&quot;}&#10;classpath:features/marvel_characters_api/eliminarPersonaje.feature:13" type="org.opentest4j.AssertionFailedError">org.opentest4j.AssertionFailedError: status code was: 404, expected: 204, response time in milliseconds: 188, url: http://bp-se-test-cabcd9b246a5.herokuapp.com/testuser/api/characters/1, response: 
{&quot;error&quot;:&quot;Character not found&quot;}
classpath:features/marvel_characters_api/eliminarPersonaje.feature:13
	at app//org.junit.jupiter.api.AssertionUtils.fail(AssertionUtils.java:38)
	at app//org.junit.jupiter.api.Assertions.fail(Assertions.java:135)
	at app//com.intuit.karate.junit5.FeatureNode.lambda$next$1(FeatureNode.java:86)
	at app//org.junit.jupiter.engine.descriptor.DynamicTestTestDescriptor.lambda$execute$0(DynamicTestTestDescriptor.java:53)
	at app//org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131)
	at app//org.junit.jupiter.api.extension.InvocationInterceptor.interceptDynamicTest(InvocationInterceptor.java:167)
	at app//org.junit.jupiter.api.extension.InvocationInterceptor.interceptDynamicTest(InvocationInterceptor.java:184)
	at app//org.junit.jupiter.engine.descriptor.DynamicTestTestDescriptor.lambda$execute$1(DynamicTestTestDescriptor.java:61)
	at app//org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptorCall.lambda$ofVoid$0(InvocationInterceptorChain.java:78)
	at app//org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106)
	at app//org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:64)
	at app//org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:45)
	at app//org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:37)
	at app//org.junit.jupiter.engine.descriptor.DynamicTestTestDescriptor.execute(DynamicTestTestDescriptor.java:60)
	at app//org.junit.jupiter.engine.descriptor.DynamicTestTestDescriptor.execute(DynamicTestTestDescriptor.java:32)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:151)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at app//org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at app//org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask$DefaultDynamicTestExecutor.execute(NodeTestTask.java:226)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask$DefaultDynamicTestExecutor.execute(NodeTestTask.java:204)
	at java.base@17.0.14/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183)
	at java.base@17.0.14/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base@17.0.14/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base@17.0.14/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base@17.0.14/java.util.Iterator.forEachRemaining(Iterator.java:133)
	at java.base@17.0.14/java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1845)
	at java.base@17.0.14/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base@17.0.14/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base@17.0.14/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150)
	at java.base@17.0.14/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173)
	at java.base@17.0.14/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base@17.0.14/java.util.stream.ReferencePipeline.forEachOrdered(ReferencePipeline.java:601)
	at app//org.junit.jupiter.engine.descriptor.DynamicContainerTestDescriptor.execute(DynamicContainerTestDescriptor.java:67)
	at app//org.junit.jupiter.engine.descriptor.DynamicContainerTestDescriptor.execute(DynamicContainerTestDescriptor.java:33)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:151)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at app//org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at app//org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask$DefaultDynamicTestExecutor.execute(NodeTestTask.java:226)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask$DefaultDynamicTestExecutor.execute(NodeTestTask.java:204)
	at java.base@17.0.14/java.util.Optional.ifPresent(Optional.java:178)
	at app//org.junit.jupiter.engine.descriptor.TestFactoryTestDescriptor.lambda$invokeTestMethod$1(TestFactoryTestDescriptor.java:108)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.jupiter.engine.descriptor.TestFactoryTestDescriptor.invokeTestMethod(TestFactoryTestDescriptor.java:95)
	at app//org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:138)
	at app//org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:68)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:151)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at app//org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base@17.0.14/java.util.ArrayList.forEach(ArrayList.java:1511)
	at app//org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at app//org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base@17.0.14/java.util.ArrayList.forEach(ArrayList.java:1511)
	at app//org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at app//org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at app//org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at app//org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at app//org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at app//org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:107)
	at app//org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)
	at app//org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)
	at app//org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)
	at app//org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)
	at app//org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at app//org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at app//org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor$CollectAllTestClassesExecutor.processAllTestClasses(JUnitPlatformTestClassProcessor.java:119)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor$CollectAllTestClassesExecutor.access$000(JUnitPlatformTestClassProcessor.java:94)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor.stop(JUnitPlatformTestClassProcessor.java:89)
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:62)
	at java.base@17.0.14/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base@17.0.14/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base@17.0.14/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base@17.0.14/java.lang.reflect.Method.invoke(Method.java:569)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:36)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:33)
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:94)
	at jdk.proxy1/jdk.proxy1.$Proxy2.stop(Unknown Source)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker$3.run(TestWorker.java:193)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.executeAndMaintainThreadName(TestWorker.java:129)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:100)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:60)
	at org.gradle.process.internal.worker.child.ActionExecutionWorker.execute(ActionExecutionWorker.java:56)
	at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:113)
	at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:65)
	at app//worker.org.gradle.process.internal.worker.GradleWorkerMain.run(GradleWorkerMain.java:69)
	at app//worker.org.gradle.process.internal.worker.GradleWorkerMain.main(GradleWorkerMain.java:74)
</failure>
  </testcase>
  <testcase name="[2:16] Eliminar personaje (no existe)" classname="runners.Runner" time="0.276"/>
  <system-out><![CDATA[12:08:38.373 [Test worker] DEBUG com.intuit.karate.Suite -- [config] classpath:karate-config.js
12:08:38.801 [Test worker] DEBUG com.jayway.jsonpath.internal.path.CompiledPath -- Evaluating path: $
12:08:38.810 [Test worker] DEBUG io.netty.util.internal.logging.InternalLoggerFactory -- Using SLF4J as the default logging framework
12:08:38.811 [Test worker] DEBUG io.netty.util.internal.PlatformDependent0 -- -Dio.netty.noUnsafe: false
12:08:38.811 [Test worker] DEBUG io.netty.util.internal.PlatformDependent0 -- Java version: 17
12:08:38.812 [Test worker] DEBUG io.netty.util.internal.PlatformDependent0 -- sun.misc.Unsafe.theUnsafe: available
12:08:38.812 [Test worker] DEBUG io.netty.util.internal.PlatformDependent0 -- sun.misc.Unsafe.copyMemory: available
12:08:38.812 [Test worker] DEBUG io.netty.util.internal.PlatformDependent0 -- sun.misc.Unsafe.storeFence: available
12:08:38.812 [Test worker] DEBUG io.netty.util.internal.PlatformDependent0 -- java.nio.Buffer.address: available
12:08:38.812 [Test worker] DEBUG io.netty.util.internal.PlatformDependent0 -- direct buffer constructor: unavailable: Reflective setAccessible(true) disabled
12:08:38.812 [Test worker] DEBUG io.netty.util.internal.PlatformDependent0 -- java.nio.Bits.unaligned: available, true
12:08:38.813 [Test worker] DEBUG io.netty.util.internal.PlatformDependent0 -- jdk.internal.misc.Unsafe.allocateUninitializedArray(int): unavailable: class io.netty.util.internal.PlatformDependent0$7 cannot access class jdk.internal.misc.Unsafe (in module java.base) because module java.base does not export jdk.internal.misc to unnamed module @18cd30f2
12:08:38.813 [Test worker] DEBUG io.netty.util.internal.PlatformDependent0 -- java.nio.DirectByteBuffer.<init>(long, {int,long}): unavailable
12:08:38.813 [Test worker] DEBUG io.netty.util.internal.PlatformDependent -- sun.misc.Unsafe: available
12:08:38.816 [Test worker] DEBUG io.netty.util.internal.PlatformDependent -- maxDirectMemory: 536870912 bytes (maybe)
12:08:38.816 [Test worker] DEBUG io.netty.util.internal.PlatformDependent -- -Dio.netty.tmpdir: /var/folders/4m/w3r3lyzs43s4_g8d4mbrtz4c0000gn/T (java.io.tmpdir)
12:08:38.816 [Test worker] DEBUG io.netty.util.internal.PlatformDependent -- -Dio.netty.bitMode: 64 (sun.arch.data.model)
12:08:38.817 [Test worker] DEBUG io.netty.util.internal.PlatformDependent -- Platform: MacOS
12:08:38.817 [Test worker] DEBUG io.netty.util.internal.PlatformDependent -- -Dio.netty.maxDirectMemory: -1 bytes
12:08:38.817 [Test worker] DEBUG io.netty.util.internal.PlatformDependent -- -Dio.netty.uninitializedArrayAllocationThreshold: -1
12:08:38.817 [Test worker] DEBUG io.netty.util.internal.CleanerJava9 -- java.nio.ByteBuffer.cleaner(): available
12:08:38.817 [Test worker] DEBUG io.netty.util.internal.PlatformDependent -- -Dio.netty.noPreferDirect: false
12:08:38.887 [Test worker] DEBUG org.apache.http.client.protocol.RequestAddCookies -- CookieSpec selected: karate
12:08:38.889 [Test worker] DEBUG org.apache.http.client.protocol.RequestAuthCache -- Auth cache not set in the context
12:08:38.890 [Test worker] DEBUG com.intuit.karate -- request:
1 > PUT http://bp-se-test-cabcd9b246a5.herokuapp.com/testuser/api/characters/111
1 > Content-Type: application/json; charset=UTF-8
1 > Content-Length: 107
1 > Host: bp-se-test-cabcd9b246a5.herokuapp.com
1 > Connection: Keep-Alive
1 > User-Agent: Apache-HttpClient/4.5.14 (Java/17.0.14)
1 > Accept-Encoding: gzip,deflate
{"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]}

12:08:38.890 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection request: [route: {}->http://bp-se-test-cabcd9b246a5.herokuapp.com:80][total available: 0; route allocated: 0 of 5; total allocated: 0 of 10]
12:08:38.893 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection leased: [id: 0][route: {}->http://bp-se-test-cabcd9b246a5.herokuapp.com:80][total available: 0; route allocated: 1 of 5; total allocated: 1 of 10]
12:08:38.893 [Test worker] DEBUG org.apache.http.impl.execchain.MainClientExec -- Opening connection {}->http://bp-se-test-cabcd9b246a5.herokuapp.com:80
12:08:38.998 [Test worker] DEBUG org.apache.http.impl.conn.DefaultHttpClientConnectionOperator -- Connecting to bp-se-test-cabcd9b246a5.herokuapp.com/52.5.82.174:80
12:08:39.084 [Test worker] DEBUG org.apache.http.impl.conn.DefaultHttpClientConnectionOperator -- Connection established 192.168.100.112:58279<->52.5.82.174:80
12:08:39.084 [Test worker] DEBUG org.apache.http.impl.conn.DefaultManagedHttpClientConnection -- http-outgoing-0: set socket timeout to 30000
12:08:39.084 [Test worker] DEBUG org.apache.http.impl.execchain.MainClientExec -- Executing request PUT /testuser/api/characters/111 HTTP/1.1
12:08:39.084 [Test worker] DEBUG org.apache.http.impl.execchain.MainClientExec -- Target auth state: UNCHALLENGED
12:08:39.084 [Test worker] DEBUG org.apache.http.impl.execchain.MainClientExec -- Proxy auth state: UNCHALLENGED
12:08:39.085 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-0 >> PUT /testuser/api/characters/111 HTTP/1.1
12:08:39.085 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-0 >> Content-Type: application/json; charset=UTF-8
12:08:39.085 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-0 >> Content-Length: 107
12:08:39.085 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-0 >> Host: bp-se-test-cabcd9b246a5.herokuapp.com
12:08:39.085 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-0 >> Connection: Keep-Alive
12:08:39.085 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-0 >> User-Agent: Apache-HttpClient/4.5.14 (Java/17.0.14)
12:08:39.085 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-0 >> Accept-Encoding: gzip,deflate
12:08:39.085 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 >> "PUT /testuser/api/characters/111 HTTP/1.1[\r][\n]"
12:08:39.085 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 >> "Content-Type: application/json; charset=UTF-8[\r][\n]"
12:08:39.085 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 >> "Content-Length: 107[\r][\n]"
12:08:39.086 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 >> "Host: bp-se-test-cabcd9b246a5.herokuapp.com[\r][\n]"
12:08:39.086 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 >> "Connection: Keep-Alive[\r][\n]"
12:08:39.086 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 >> "User-Agent: Apache-HttpClient/4.5.14 (Java/17.0.14)[\r][\n]"
12:08:39.086 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 >> "Accept-Encoding: gzip,deflate[\r][\n]"
12:08:39.086 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 >> "[\r][\n]"
12:08:39.086 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 >> "{"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]}"
12:08:39.173 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "HTTP/1.1 404 [\r][\n]"
12:08:39.173 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "Server: Cowboy[\r][\n]"
12:08:39.173 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "Report-To: {"group":"heroku-nel","max_age":3600,"endpoints":[{"url":"https://nel.heroku.com/reports?ts=1750439319&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=kjR6pMbc%2FY3MoqBchWHOjzRxVRXPyD5Dln%2BbWuU%2Fskg%3D"}]}[\r][\n]"
12:08:39.173 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "Reporting-Endpoints: heroku-nel=https://nel.heroku.com/reports?ts=1750439319&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=kjR6pMbc%2FY3MoqBchWHOjzRxVRXPyD5Dln%2BbWuU%2Fskg%3D[\r][\n]"
12:08:39.173 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "Nel: {"report_to":"heroku-nel","max_age":3600,"success_fraction":0.005,"failure_fraction":0.05,"response_headers":["Via"]}[\r][\n]"
12:08:39.173 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "Connection: keep-alive[\r][\n]"
12:08:39.173 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "Content-Type: application/json[\r][\n]"
12:08:39.173 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "Transfer-Encoding: chunked[\r][\n]"
12:08:39.173 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "Date: Fri, 20 Jun 2025 17:08:39 GMT[\r][\n]"
12:08:39.173 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "Via: 1.1 vegur[\r][\n]"
12:08:39.173 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "[\r][\n]"
12:08:39.173 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "1f[\r][\n]"
12:08:39.173 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "{"error":"Character not found"}[\r][\n]"
12:08:39.174 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-0 << HTTP/1.1 404 
12:08:39.174 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-0 << Server: Cowboy
12:08:39.174 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-0 << Report-To: {"group":"heroku-nel","max_age":3600,"endpoints":[{"url":"https://nel.heroku.com/reports?ts=1750439319&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=kjR6pMbc%2FY3MoqBchWHOjzRxVRXPyD5Dln%2BbWuU%2Fskg%3D"}]}
12:08:39.174 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-0 << Reporting-Endpoints: heroku-nel=https://nel.heroku.com/reports?ts=1750439319&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=kjR6pMbc%2FY3MoqBchWHOjzRxVRXPyD5Dln%2BbWuU%2Fskg%3D
12:08:39.174 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-0 << Nel: {"report_to":"heroku-nel","max_age":3600,"success_fraction":0.005,"failure_fraction":0.05,"response_headers":["Via"]}
12:08:39.174 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-0 << Connection: keep-alive
12:08:39.174 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-0 << Content-Type: application/json
12:08:39.174 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-0 << Transfer-Encoding: chunked
12:08:39.174 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-0 << Date: Fri, 20 Jun 2025 17:08:39 GMT
12:08:39.174 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-0 << Via: 1.1 vegur
12:08:39.176 [Test worker] DEBUG org.apache.http.impl.execchain.MainClientExec -- Connection can be kept alive indefinitely
12:08:39.176 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "0[\r][\n]"
12:08:39.176 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-0 << "[\r][\n]"
12:08:39.176 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection [id: 0][route: {}->http://bp-se-test-cabcd9b246a5.herokuapp.com:80] can be kept alive indefinitely
12:08:39.177 [Test worker] DEBUG org.apache.http.impl.conn.DefaultManagedHttpClientConnection -- http-outgoing-0: set socket timeout to 0
12:08:39.177 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection released: [id: 0][route: {}->http://bp-se-test-cabcd9b246a5.herokuapp.com:80][total available: 1; route allocated: 1 of 5; total allocated: 1 of 10]
12:08:39.177 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection manager is shutting down
12:08:39.177 [Test worker] DEBUG org.apache.http.impl.conn.DefaultManagedHttpClientConnection -- http-outgoing-0: Close connection
12:08:39.178 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection manager shut down
12:08:39.178 [Test worker] DEBUG com.intuit.karate -- response time in milliseconds: 287
1 < 404
1 < Server: Cowboy
1 < Report-To: {"group":"heroku-nel","max_age":3600,"endpoints":[{"url":"https://nel.heroku.com/reports?ts=1750439319&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=kjR6pMbc%2FY3MoqBchWHOjzRxVRXPyD5Dln%2BbWuU%2Fskg%3D"}]}
1 < Reporting-Endpoints: heroku-nel=https://nel.heroku.com/reports?ts=1750439319&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=kjR6pMbc%2FY3MoqBchWHOjzRxVRXPyD5Dln%2BbWuU%2Fskg%3D
1 < Nel: {"report_to":"heroku-nel","max_age":3600,"success_fraction":0.005,"failure_fraction":0.05,"response_headers":["Via"]}
1 < Connection: keep-alive
1 < Content-Type: application/json
1 < Transfer-Encoding: chunked
1 < Date: Fri, 20 Jun 2025 17:08:39 GMT
1 < Via: 1.1 vegur
{"error":"Character not found"}

12:08:39.183 [Test worker] ERROR com.intuit.karate -- classpath:features/marvel_characters_api/actualizarPersonaje.feature:23
Then status 200
status code was: 404, expected: 200, response time in milliseconds: 287, url: http://bp-se-test-cabcd9b246a5.herokuapp.com/testuser/api/characters/111, response: 
{"error":"Character not found"}
classpath:features/marvel_characters_api/actualizarPersonaje.feature:23
12:08:39.199 [Test worker] DEBUG com.jayway.jsonpath.internal.path.CompiledPath -- Evaluating path: $
12:08:39.199 [Test worker] DEBUG org.apache.http.client.protocol.RequestAddCookies -- CookieSpec selected: karate
12:08:39.199 [Test worker] DEBUG org.apache.http.client.protocol.RequestAuthCache -- Auth cache not set in the context
12:08:39.200 [Test worker] DEBUG com.intuit.karate -- request:
1 > PUT http://bp-se-test-cabcd9b246a5.herokuapp.com/testuser/api/characters/999
1 > Content-Type: application/json; charset=UTF-8
1 > Content-Length: 107
1 > Host: bp-se-test-cabcd9b246a5.herokuapp.com
1 > Connection: Keep-Alive
1 > User-Agent: Apache-HttpClient/4.5.14 (Java/17.0.14)
1 > Accept-Encoding: gzip,deflate
{"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]}

12:08:39.200 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection request: [route: {}->http://bp-se-test-cabcd9b246a5.herokuapp.com:80][total available: 0; route allocated: 0 of 5; total allocated: 0 of 10]
12:08:39.200 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection leased: [id: 1][route: {}->http://bp-se-test-cabcd9b246a5.herokuapp.com:80][total available: 0; route allocated: 1 of 5; total allocated: 1 of 10]
12:08:39.200 [Test worker] DEBUG org.apache.http.impl.execchain.MainClientExec -- Opening connection {}->http://bp-se-test-cabcd9b246a5.herokuapp.com:80
12:08:39.200 [Test worker] DEBUG org.apache.http.impl.conn.DefaultHttpClientConnectionOperator -- Connecting to bp-se-test-cabcd9b246a5.herokuapp.com/52.5.82.174:80
12:08:39.287 [Test worker] DEBUG org.apache.http.impl.conn.DefaultHttpClientConnectionOperator -- Connection established 192.168.100.112:58280<->52.5.82.174:80
12:08:39.287 [Test worker] DEBUG org.apache.http.impl.conn.DefaultManagedHttpClientConnection -- http-outgoing-1: set socket timeout to 30000
12:08:39.287 [Test worker] DEBUG org.apache.http.impl.execchain.MainClientExec -- Executing request PUT /testuser/api/characters/999 HTTP/1.1
12:08:39.287 [Test worker] DEBUG org.apache.http.impl.execchain.MainClientExec -- Target auth state: UNCHALLENGED
12:08:39.287 [Test worker] DEBUG org.apache.http.impl.execchain.MainClientExec -- Proxy auth state: UNCHALLENGED
12:08:39.287 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-1 >> PUT /testuser/api/characters/999 HTTP/1.1
12:08:39.287 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-1 >> Content-Type: application/json; charset=UTF-8
12:08:39.287 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-1 >> Content-Length: 107
12:08:39.287 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-1 >> Host: bp-se-test-cabcd9b246a5.herokuapp.com
12:08:39.287 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-1 >> Connection: Keep-Alive
12:08:39.287 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-1 >> User-Agent: Apache-HttpClient/4.5.14 (Java/17.0.14)
12:08:39.287 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-1 >> Accept-Encoding: gzip,deflate
12:08:39.288 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-1 >> "PUT /testuser/api/characters/999 HTTP/1.1[\r][\n]"
12:08:39.288 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-1 >> "Content-Type: application/json; charset=UTF-8[\r][\n]"
12:08:39.288 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-1 >> "Content-Length: 107[\r][\n]"
12:08:39.288 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-1 >> "Host: bp-se-test-cabcd9b246a5.herokuapp.com[\r][\n]"
12:08:39.288 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-1 >> "Connection: Keep-Alive[\r][\n]"
12:08:39.288 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-1 >> "User-Agent: Apache-HttpClient/4.5.14 (Java/17.0.14)[\r][\n]"
12:08:39.288 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-1 >> "Accept-Encoding: gzip,deflate[\r][\n]"
12:08:39.288 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-1 >> "[\r][\n]"
12:08:39.288 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-1 >> "{"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]}"
12:08:39.377 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-1 << "HTTP/1.1 404 [\r][\n]"
12:08:39.378 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-1 << "Server: Cowboy[\r][\n]"
12:08:39.378 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-1 << "Report-To: {"group":"heroku-nel","max_age":3600,"endpoints":[{"url":"https://nel.heroku.com/reports?ts=1750439319&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=kjR6pMbc%2FY3MoqBchWHOjzRxVRXPyD5Dln%2BbWuU%2Fskg%3D"}]}[\r][\n]"
12:08:39.379 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-1 << "Reporting-Endpoints: heroku-nel=https://nel.heroku.com/reports?ts=1750439319&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=kjR6pMbc%2FY3MoqBchWHOjzRxVRXPyD5Dln%2BbWuU%2Fskg%3D[\r][\n]"
12:08:39.379 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-1 << "Nel: {"report_to":"heroku-nel","max_age":3600,"success_fraction":0.005,"failure_fraction":0.05,"response_headers":["Via"]}[\r][\n]"
12:08:39.379 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-1 << "Connection: keep-alive[\r][\n]"
12:08:39.379 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-1 << "Content-Type: application/json[\r][\n]"
12:08:39.379 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-1 << "Transfer-Encoding: chunked[\r][\n]"
12:08:39.379 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-1 << "Date: Fri, 20 Jun 2025 17:08:39 GMT[\r][\n]"
12:08:39.379 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-1 << "Via: 1.1 vegur[\r][\n]"
12:08:39.379 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-1 << "[\r][\n]"
12:08:39.379 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-1 << "1f[\r][\n]"
12:08:39.379 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-1 << "{"error":"Character not found"}[\r][\n]"
12:08:39.379 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-1 << "0[\r][\n]"
12:08:39.379 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-1 << "[\r][\n]"
12:08:39.379 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-1 << HTTP/1.1 404 
12:08:39.379 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-1 << Server: Cowboy
12:08:39.380 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-1 << Report-To: {"group":"heroku-nel","max_age":3600,"endpoints":[{"url":"https://nel.heroku.com/reports?ts=1750439319&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=kjR6pMbc%2FY3MoqBchWHOjzRxVRXPyD5Dln%2BbWuU%2Fskg%3D"}]}
12:08:39.380 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-1 << Reporting-Endpoints: heroku-nel=https://nel.heroku.com/reports?ts=1750439319&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=kjR6pMbc%2FY3MoqBchWHOjzRxVRXPyD5Dln%2BbWuU%2Fskg%3D
12:08:39.380 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-1 << Nel: {"report_to":"heroku-nel","max_age":3600,"success_fraction":0.005,"failure_fraction":0.05,"response_headers":["Via"]}
12:08:39.380 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-1 << Connection: keep-alive
12:08:39.380 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-1 << Content-Type: application/json
12:08:39.380 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-1 << Transfer-Encoding: chunked
12:08:39.380 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-1 << Date: Fri, 20 Jun 2025 17:08:39 GMT
12:08:39.380 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-1 << Via: 1.1 vegur
12:08:39.380 [Test worker] DEBUG org.apache.http.impl.execchain.MainClientExec -- Connection can be kept alive indefinitely
12:08:39.380 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection [id: 1][route: {}->http://bp-se-test-cabcd9b246a5.herokuapp.com:80] can be kept alive indefinitely
12:08:39.381 [Test worker] DEBUG org.apache.http.impl.conn.DefaultManagedHttpClientConnection -- http-outgoing-1: set socket timeout to 0
12:08:39.381 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection released: [id: 1][route: {}->http://bp-se-test-cabcd9b246a5.herokuapp.com:80][total available: 1; route allocated: 1 of 5; total allocated: 1 of 10]
12:08:39.381 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection manager is shutting down
12:08:39.381 [Test worker] DEBUG org.apache.http.impl.conn.DefaultManagedHttpClientConnection -- http-outgoing-1: Close connection
12:08:39.381 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection manager shut down
12:08:39.381 [Test worker] DEBUG com.intuit.karate -- response time in milliseconds: 181
1 < 404
1 < Server: Cowboy
1 < Report-To: {"group":"heroku-nel","max_age":3600,"endpoints":[{"url":"https://nel.heroku.com/reports?ts=1750439319&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=kjR6pMbc%2FY3MoqBchWHOjzRxVRXPyD5Dln%2BbWuU%2Fskg%3D"}]}
1 < Reporting-Endpoints: heroku-nel=https://nel.heroku.com/reports?ts=1750439319&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=kjR6pMbc%2FY3MoqBchWHOjzRxVRXPyD5Dln%2BbWuU%2Fskg%3D
1 < Nel: {"report_to":"heroku-nel","max_age":3600,"success_fraction":0.005,"failure_fraction":0.05,"response_headers":["Via"]}
1 < Connection: keep-alive
1 < Content-Type: application/json
1 < Transfer-Encoding: chunked
1 < Date: Fri, 20 Jun 2025 17:08:39 GMT
1 < Via: 1.1 vegur
{"error":"Character not found"}

12:08:39.391 [Test worker] DEBUG com.jayway.jsonpath.internal.path.CompiledPath -- Evaluating path: $['error']
12:08:39.414 [Test worker] DEBUG org.thymeleaf.TemplateEngine -- [THYMELEAF] INITIALIZING TEMPLATE ENGINE
12:08:39.467 [Test worker] DEBUG org.thymeleaf.TemplateEngine.CONFIG -- Initializing Thymeleaf Template engine configuration...
[THYMELEAF] TEMPLATE ENGINE CONFIGURATION:
[THYMELEAF] * Thymeleaf version: 3.1.2.RELEASE (built 2023-07-30T19:25:50+0000)
[THYMELEAF] * Cache Manager implementation: org.thymeleaf.cache.StandardCacheManager
[THYMELEAF] * Template resolvers:
[THYMELEAF]     * [1] com.intuit.karate.template.ResourceHtmlTemplateResolver
[THYMELEAF] * Message resolvers:
[THYMELEAF]     * org.thymeleaf.messageresolver.StandardMessageResolver
[THYMELEAF] * Link builders:
[THYMELEAF]     * org.thymeleaf.linkbuilder.StandardLinkBuilder
[THYMELEAF] * Dialect [1 of 2]: Standard (com.intuit.karate.template.KarateStandardDialect)
[THYMELEAF]     * Prefix: "th"
[THYMELEAF]     * Processors for Template Mode: HTML
[THYMELEAF]         * Element Tag Processors by [matching element and attribute name] [precedence]:
[THYMELEAF]             * [* {th:include,data-th-include}] [100]: org.thymeleaf.standard.processor.StandardIncludeTagProcessor
[THYMELEAF]             * [* {th:insert,data-th-insert}] [100]: org.thymeleaf.standard.processor.StandardInsertTagProcessor
[THYMELEAF]             * [* {th:replace,data-th-replace}] [100]: org.thymeleaf.standard.processor.StandardReplaceTagProcessor
[THYMELEAF]             * [* {th:each,data-th-each}] [200]: com.intuit.karate.template.KarateEachTagProcessor
[THYMELEAF]             * [* {th:switch,data-th-switch}] [250]: org.thymeleaf.standard.processor.StandardSwitchTagProcessor
[THYMELEAF]             * [* {th:case,data-th-case}] [275]: org.thymeleaf.standard.processor.StandardCaseTagProcessor
[THYMELEAF]             * [* {th:if,data-th-if}] [300]: org.thymeleaf.standard.processor.StandardIfTagProcessor
[THYMELEAF]             * [* {th:unless,data-th-unless}] [400]: org.thymeleaf.standard.processor.StandardUnlessTagProcessor
[THYMELEAF]             * [* {th:object,data-th-object}] [500]: org.thymeleaf.standard.processor.StandardObjectTagProcessor
[THYMELEAF]             * [* {th:with,data-th-with}] [600]: com.intuit.karate.template.KarateWithTagProcessor
[THYMELEAF]             * [* {th:attr,data-th-attr}] [700]: com.intuit.karate.template.KarateAttributeTagProcessor.KarateAttrTagProcessor
[THYMELEAF]             * [* {th:attrappend,data-th-attrappend}] [900]: com.intuit.karate.template.KarateAttributeTagProcessor.KarateAttrappendTagProcessor
[THYMELEAF]             * [* {th:attrprepend,data-th-attrprepend}] [900]: com.intuit.karate.template.KarateAttributeTagProcessor.KarateAttrprependTagProcessor
[THYMELEAF]             * [* {th:alt-title,data-th-alt-title}] [990]: org.thymeleaf.standard.processor.StandardAltTitleTagProcessor
[THYMELEAF]             * [* {th:lang-xmllang,data-th-lang-xmllang}] [990]: org.thymeleaf.standard.processor.StandardLangXmlLangTagProcessor
[THYMELEAF]             * [* {th:action,data-th-action}] [1000]: org.thymeleaf.standard.processor.StandardActionTagProcessor
[THYMELEAF]             * [* {th:default,data-th-default}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:scoped,data-th-scoped}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:open,data-th-open}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:async,data-th-async}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:reversed,data-th-reversed}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:required,data-th-required}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:readonly,data-th-readonly}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:pubdate,data-th-pubdate}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:declare,data-th-declare}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:defer,data-th-defer}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:novalidate,data-th-novalidate}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:loop,data-th-loop}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:formnovalidate,data-th-formnovalidate}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:hidden,data-th-hidden}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:nowrap,data-th-nowrap}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:seamless,data-th-seamless}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:checked,data-th-checked}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:autoplay,data-th-autoplay}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:ismap,data-th-ismap}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:autofocus,data-th-autofocus}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:multiple,data-th-multiple}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:controls,data-th-controls}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:selected,data-th-selected}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:disabled,data-th-disabled}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:onreset,data-th-onreset}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onsuspend,data-th-onsuspend}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onresize,data-th-onresize}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onkeydown,data-th-onkeydown}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onselect,data-th-onselect}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ononline,data-th-ononline}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onmessage,data-th-onmessage}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onhashchange,data-th-onhashchange}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ondragover,data-th-ondragover}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onmouseout,data-th-onmouseout}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onended,data-th-onended}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onemptied,data-th-onemptied}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onfocus,data-th-onfocus}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onbeforeunload,data-th-onbeforeunload}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onformchange,data-th-onformchange}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ondurationchange,data-th-ondurationchange}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ondrop,data-th-ondrop}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onmousemove,data-th-onmousemove}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onchange,data-th-onchange}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onscroll,data-th-onscroll}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onloadeddata,data-th-onloadeddata}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ondblclick,data-th-ondblclick}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onundo,data-th-onundo}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ondragend,data-th-ondragend}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onerror,data-th-onerror}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onseeking,data-th-onseeking}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:oninvalid,data-th-oninvalid}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onmousewheel,data-th-onmousewheel}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:oninput,data-th-oninput}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onpause,data-th-onpause}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:oncanplay,data-th-oncanplay}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onstorage,data-th-onstorage}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onblur,data-th-onblur}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onplay,data-th-onplay}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onloadstart,data-th-onloadstart}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onload,data-th-onload}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ondrag,data-th-ondrag}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onwaiting,data-th-onwaiting}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onloadedmetadata,data-th-onloadedmetadata}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onplaying,data-th-onplaying}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onreadystatechange,data-th-onreadystatechange}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ondragstart,data-th-ondragstart}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onkeypress,data-th-onkeypress}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ondragleave,data-th-ondragleave}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onstalled,data-th-onstalled}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onafterprint,data-th-onafterprint}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onmousedown,data-th-onmousedown}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onredo,data-th-onredo}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:oncontextmenu,data-th-oncontextmenu}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onabort,data-th-onabort}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ondragenter,data-th-ondragenter}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onpopstate,data-th-onpopstate}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onunload,data-th-onunload}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onkeyup,data-th-onkeyup}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ontimeupdate,data-th-ontimeupdate}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onmouseup,data-th-onmouseup}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onshow,data-th-onshow}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onvolumechange,data-th-onvolumechange}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onoffline,data-th-onoffline}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onsubmit,data-th-onsubmit}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onforminput,data-th-onforminput}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onseeked,data-th-onseeked}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:oncanplaythrough,data-th-oncanplaythrough}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onprogress,data-th-onprogress}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onclick,data-th-onclick}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onratechange,data-th-onratechange}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onmouseover,data-th-onmouseover}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onbeforeprint,data-th-onbeforeprint}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:href,data-th-href}] [1000]: org.thymeleaf.standard.processor.StandardHrefTagProcessor
[THYMELEAF]             * [* {th:inline,data-th-inline}] [1000]: org.thymeleaf.standard.processor.StandardInlineHTMLTagProcessor
[THYMELEAF]             * [* {th:method,data-th-method}] [1000]: org.thymeleaf.standard.processor.StandardMethodTagProcessor
[THYMELEAF]             * [* {th:type,data-th-type}] [1000]: org.thymeleaf.standard.processor.StandardNonRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:name,data-th-name}] [1000]: org.thymeleaf.standard.processor.StandardNonRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:frame,data-th-frame}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:size,data-th-size}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:poster,data-th-poster}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:hreflang,data-th-hreflang}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:abbr,data-th-abbr}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:axis,data-th-axis}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:bgcolor,data-th-bgcolor}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:step,data-th-step}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:draggable,data-th-draggable}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:high,data-th-high}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:manifest,data-th-manifest}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:rules,data-th-rules}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:lang,data-th-lang}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:frameborder,data-th-frameborder}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:accesskey,data-th-accesskey}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:rel,data-th-rel}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:challenge,data-th-challenge}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:max,data-th-max}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:list,data-th-list}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:style,data-th-style}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:scope,data-th-scope}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:enctype,data-th-enctype}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:rowspan,data-th-rowspan}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:sizes,data-th-sizes}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:classid,data-th-classid}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:scrolling,data-th-scrolling}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:cellpadding,data-th-cellpadding}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:spellcheck,data-th-spellcheck}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:marginwidth,data-th-marginwidth}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:media,data-th-media}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:hspace,data-th-hspace}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:id,data-th-id}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:http-equiv,data-th-http-equiv}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:form,data-th-form}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:srclang,data-th-srclang}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:datetime,data-th-datetime}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:class,data-th-class}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:valuetype,data-th-valuetype}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:vspace,data-th-vspace}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:accept,data-th-accept}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:formenctype,data-th-formenctype}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:min,data-th-min}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:standby,data-th-standby}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:border,data-th-border}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:charset,data-th-charset}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:longdesc,data-th-longdesc}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:title,data-th-title}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:compact,data-th-compact}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:alt,data-th-alt}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:codetype,data-th-codetype}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:cite,data-th-cite}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:rows,data-th-rows}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:marginheight,data-th-marginheight}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:optimum,data-th-optimum}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:content,data-th-content}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:preload,data-th-preload}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:contextmenu,data-th-contextmenu}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:archive,data-th-archive}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:sandbox,data-th-sandbox}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:kind,data-th-kind}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:formmethod,data-th-formmethod}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:label,data-th-label}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:pattern,data-th-pattern}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:icon,data-th-icon}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:target,data-th-target}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:start,data-th-start}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:codebase,data-th-codebase}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:wrap,data-th-wrap}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:background,data-th-background}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:span,data-th-span}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:rev,data-th-rev}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:dropzone,data-th-dropzone}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:audio,data-th-audio}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:cols,data-th-cols}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:width,data-th-width}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:scheme,data-th-scheme}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:dir,data-th-dir}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:align,data-th-align}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:data,data-th-data}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:for,data-th-for}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:summary,data-th-summary}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:placeholder,data-th-placeholder}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:radiogroup,data-th-radiogroup}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:autocomplete,data-th-autocomplete}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:formtarget,data-th-formtarget}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:colspan,data-th-colspan}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:usemap,data-th-usemap}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:low,data-th-low}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:height,data-th-height}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:headers,data-th-headers}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:contenteditable,data-th-contenteditable}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:cellspacing,data-th-cellspacing}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:accept-charset,data-th-accept-charset}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:tabindex,data-th-tabindex}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:keytype,data-th-keytype}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:formaction,data-th-formaction}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:maxlength,data-th-maxlength}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:src,data-th-src}] [1000]: org.thymeleaf.standard.processor.StandardSrcTagProcessor
[THYMELEAF]             * [* {th:value,data-th-value}] [1000]: org.thymeleaf.standard.processor.StandardValueTagProcessor
[THYMELEAF]             * [* {th:xmlbase,data-th-xmlbase}] [1000]: org.thymeleaf.standard.processor.StandardXmlBaseTagProcessor
[THYMELEAF]             * [* {th:xmllang,data-th-xmllang}] [1000]: org.thymeleaf.standard.processor.StandardXmlLangTagProcessor
[THYMELEAF]             * [* {xmlns:th}] [1000]: org.thymeleaf.standard.processor.StandardXmlNsTagProcessor
[THYMELEAF]             * [* {th:xmlspace,data-th-xmlspace}] [1000]: org.thymeleaf.standard.processor.StandardXmlSpaceTagProcessor
[THYMELEAF]             * [* {th:classappend,data-th-classappend}] [1100]: org.thymeleaf.standard.processor.StandardClassappendTagProcessor
[THYMELEAF]             * [* {th:styleappend,data-th-styleappend}] [1100]: org.thymeleaf.standard.processor.StandardStyleappendTagProcessor
[THYMELEAF]             * [* {th:text,data-th-text}] [1300]: org.thymeleaf.standard.processor.StandardTextTagProcessor
[THYMELEAF]             * [* {th:utext,data-th-utext}] [1400]: org.thymeleaf.standard.processor.StandardUtextTagProcessor
[THYMELEAF]             * [* {th:fragment,data-th-fragment}] [1500]: org.thymeleaf.standard.processor.StandardFragmentTagProcessor
[THYMELEAF]             * [* {th:assert,data-th-assert}] [1550]: org.thymeleaf.standard.processor.StandardAssertTagProcessor
[THYMELEAF]             * [* {th:remove,data-th-remove}] [1600]: org.thymeleaf.standard.processor.StandardRemoveTagProcessor
[THYMELEAF]             * [* {th:ref,data-th-ref}] [10000]: org.thymeleaf.standard.processor.StandardRefAttributeTagProcessor
[THYMELEAF]             * [{th:block,th-block} *] [100000]: org.thymeleaf.standard.processor.StandardBlockTagProcessor
[THYMELEAF]             * [* th:*] [2147483647]: org.thymeleaf.standard.processor.StandardDefaultAttributesTagProcessor
[THYMELEAF]         * Text Processors by [precedence]:
[THYMELEAF]             * [1000]: org.thymeleaf.standard.processor.StandardInliningTextProcessor
[THYMELEAF]         * DOCTYPE Processors by [precedence]:
[THYMELEAF]             * [1000]: org.thymeleaf.standard.processor.StandardTranslationDocTypeProcessor
[THYMELEAF]         * CDATA Section Processors by [precedence]:
[THYMELEAF]             * [1000]: org.thymeleaf.standard.processor.StandardInliningCDATASectionProcessor
[THYMELEAF]         * Comment Processors by [precedence]:
[THYMELEAF]             * [1000]: org.thymeleaf.standard.processor.StandardInliningCommentProcessor
[THYMELEAF]             * [1100]: org.thymeleaf.standard.processor.StandardConditionalCommentProcessor
[THYMELEAF]     * Processors for Template Mode: XML
[THYMELEAF]         * Element Tag Processors by [matching element and attribute name] [precedence]:
[THYMELEAF]             * [* {th:include}] [100]: org.thymeleaf.standard.processor.StandardIncludeTagProcessor
[THYMELEAF]             * [* {th:insert}] [100]: org.thymeleaf.standard.processor.StandardInsertTagProcessor
[THYMELEAF]             * [* {th:replace}] [100]: org.thymeleaf.standard.processor.StandardReplaceTagProcessor
[THYMELEAF]             * [* {th:each}] [200]: com.intuit.karate.template.KarateEachTagProcessor
[THYMELEAF]             * [* {th:switch}] [250]: org.thymeleaf.standard.processor.StandardSwitchTagProcessor
[THYMELEAF]             * [* {th:case}] [275]: org.thymeleaf.standard.processor.StandardCaseTagProcessor
[THYMELEAF]             * [* {th:if}] [300]: org.thymeleaf.standard.processor.StandardIfTagProcessor
[THYMELEAF]             * [* {th:unless}] [400]: org.thymeleaf.standard.processor.StandardUnlessTagProcessor
[THYMELEAF]             * [* {th:object}] [500]: org.thymeleaf.standard.processor.StandardObjectTagProcessor
[THYMELEAF]             * [* {th:with}] [600]: com.intuit.karate.template.KarateWithTagProcessor
[THYMELEAF]             * [* {th:attr}] [700]: com.intuit.karate.template.KarateAttributeTagProcessor.KarateAttrTagProcessor
[THYMELEAF]             * [* {th:attrappend}] [900]: com.intuit.karate.template.KarateAttributeTagProcessor.KarateAttrappendTagProcessor
[THYMELEAF]             * [* {th:attrprepend}] [900]: com.intuit.karate.template.KarateAttributeTagProcessor.KarateAttrprependTagProcessor
[THYMELEAF]             * [* {th:inline}] [1000]: org.thymeleaf.standard.processor.StandardInlineXMLTagProcessor
[THYMELEAF]             * [* {xmlns:th}] [1000]: org.thymeleaf.standard.processor.StandardXmlNsTagProcessor
[THYMELEAF]             * [* {th:text}] [1300]: org.thymeleaf.standard.processor.StandardTextTagProcessor
[THYMELEAF]             * [* {th:utext}] [1400]: org.thymeleaf.standard.processor.StandardUtextTagProcessor
[THYMELEAF]             * [* {th:fragment}] [1500]: org.thymeleaf.standard.processor.StandardFragmentTagProcessor
[THYMELEAF]             * [* {th:assert}] [1550]: org.thymeleaf.standard.processor.StandardAssertTagProcessor
[THYMELEAF]             * [* {th:remove}] [1600]: org.thymeleaf.standard.processor.StandardRemoveTagProcessor
[THYMELEAF]             * [* {th:ref}] [10000]: org.thymeleaf.standard.processor.StandardRefAttributeTagProcessor
[THYMELEAF]             * [{th:block} *] [100000]: org.thymeleaf.standard.processor.StandardBlockTagProcessor
[THYMELEAF]             * [* th:*] [2147483647]: org.thymeleaf.standard.processor.StandardDefaultAttributesTagProcessor
[THYMELEAF]         * Text Processors by [precedence]:
[THYMELEAF]             * [1000]: org.thymeleaf.standard.processor.StandardInliningTextProcessor
[THYMELEAF]         * CDATA Section Processors by [precedence]:
[THYMELEAF]             * [1000]: org.thymeleaf.standard.processor.StandardInliningCDATASectionProcessor
[THYMELEAF]         * Comment Processors by [precedence]:
[THYMELEAF]             * [1000]: org.thymeleaf.standard.processor.StandardInliningCommentProcessor
[THYMELEAF]     * Processors for Template Mode: TEXT
[THYMELEAF]         * Element Tag Processors by [matching element and attribute name] [precedence]:
[THYMELEAF]             * [* {th:insert}] [100]: org.thymeleaf.standard.processor.StandardInsertTagProcessor
[THYMELEAF]             * [* {th:replace}] [100]: org.thymeleaf.standard.processor.StandardReplaceTagProcessor
[THYMELEAF]             * [* {th:each}] [200]: com.intuit.karate.template.KarateEachTagProcessor
[THYMELEAF]             * [* {th:switch}] [250]: org.thymeleaf.standard.processor.StandardSwitchTagProcessor
[THYMELEAF]             * [* {th:case}] [275]: org.thymeleaf.standard.processor.StandardCaseTagProcessor
[THYMELEAF]             * [* {th:if}] [300]: org.thymeleaf.standard.processor.StandardIfTagProcessor
[THYMELEAF]             * [* {th:unless}] [400]: org.thymeleaf.standard.processor.StandardUnlessTagProcessor
[THYMELEAF]             * [* {th:object}] [500]: org.thymeleaf.standard.processor.StandardObjectTagProcessor
[THYMELEAF]             * [* {th:with}] [600]: com.intuit.karate.template.KarateWithTagProcessor
[THYMELEAF]             * [* {th:inline}] [1000]: org.thymeleaf.standard.processor.StandardInlineTextualTagProcessor
[THYMELEAF]             * [* {th:text}] [1300]: org.thymeleaf.standard.processor.StandardTextTagProcessor
[THYMELEAF]             * [* {th:utext}] [1400]: org.thymeleaf.standard.processor.StandardUtextTagProcessor
[THYMELEAF]             * [* {th:assert}] [1550]: org.thymeleaf.standard.processor.StandardAssertTagProcessor
[THYMELEAF]             * [* {th:remove}] [1600]: org.thymeleaf.standard.processor.StandardRemoveTagProcessor
[THYMELEAF]             * [* 100000] [org.thymeleaf.standard.processor.StandardBlockTagProcessor]: {}
[THYMELEAF]             * [{th:block} *] [100000]: org.thymeleaf.standard.processor.StandardBlockTagProcessor
[THYMELEAF]         * Text Processors by [precedence]:
[THYMELEAF]             * [1000]: org.thymeleaf.standard.processor.StandardInliningTextProcessor
[THYMELEAF]     * Processors for Template Mode: JAVASCRIPT
[THYMELEAF]         * Element Tag Processors by [matching element and attribute name] [precedence]:
[THYMELEAF]             * [* {th:insert}] [100]: org.thymeleaf.standard.processor.StandardInsertTagProcessor
[THYMELEAF]             * [* {th:replace}] [100]: org.thymeleaf.standard.processor.StandardReplaceTagProcessor
[THYMELEAF]             * [* {th:each}] [200]: com.intuit.karate.template.KarateEachTagProcessor
[THYMELEAF]             * [* {th:switch}] [250]: org.thymeleaf.standard.processor.StandardSwitchTagProcessor
[THYMELEAF]             * [* {th:case}] [275]: org.thymeleaf.standard.processor.StandardCaseTagProcessor
[THYMELEAF]             * [* {th:if}] [300]: org.thymeleaf.standard.processor.StandardIfTagProcessor
[THYMELEAF]             * [* {th:unless}] [400]: org.thymeleaf.standard.processor.StandardUnlessTagProcessor
[THYMELEAF]             * [* {th:object}] [500]: org.thymeleaf.standard.processor.StandardObjectTagProcessor
[THYMELEAF]             * [* {th:with}] [600]: com.intuit.karate.template.KarateWithTagProcessor
[THYMELEAF]             * [* {th:inline}] [1000]: org.thymeleaf.standard.processor.StandardInlineTextualTagProcessor
[THYMELEAF]             * [* {th:text}] [1300]: org.thymeleaf.standard.processor.StandardTextTagProcessor
[THYMELEAF]             * [* {th:utext}] [1400]: org.thymeleaf.standard.processor.StandardUtextTagProcessor
[THYMELEAF]             * [* {th:assert}] [1550]: org.thymeleaf.standard.processor.StandardAssertTagProcessor
[THYMELEAF]             * [* {th:remove}] [1600]: org.thymeleaf.standard.processor.StandardRemoveTagProcessor
[THYMELEAF]             * [* 100000] [org.thymeleaf.standard.processor.StandardBlockTagProcessor]: {}
[THYMELEAF]             * [{th:block} *] [100000]: org.thymeleaf.standard.processor.StandardBlockTagProcessor
[THYMELEAF]         * Text Processors by [precedence]:
[THYMELEAF]             * [1000]: org.thymeleaf.standard.processor.StandardInliningTextProcessor
[THYMELEAF]     * Processors for Template Mode: CSS
[THYMELEAF]         * Element Tag Processors by [matching element and attribute name] [precedence]:
[THYMELEAF]             * [* {th:insert}] [100]: org.thymeleaf.standard.processor.StandardInsertTagProcessor
[THYMELEAF]             * [* {th:replace}] [100]: org.thymeleaf.standard.processor.StandardReplaceTagProcessor
[THYMELEAF]             * [* {th:each}] [200]: com.intuit.karate.template.KarateEachTagProcessor
[THYMELEAF]             * [* {th:switch}] [250]: org.thymeleaf.standard.processor.StandardSwitchTagProcessor
[THYMELEAF]             * [* {th:case}] [275]: org.thymeleaf.standard.processor.StandardCaseTagProcessor
[THYMELEAF]             * [* {th:if}] [300]: org.thymeleaf.standard.processor.StandardIfTagProcessor
[THYMELEAF]             * [* {th:unless}] [400]: org.thymeleaf.standard.processor.StandardUnlessTagProcessor
[THYMELEAF]             * [* {th:object}] [500]: org.thymeleaf.standard.processor.StandardObjectTagProcessor
[THYMELEAF]             * [* {th:with}] [600]: com.intuit.karate.template.KarateWithTagProcessor
[THYMELEAF]             * [* {th:inline}] [1000]: org.thymeleaf.standard.processor.StandardInlineTextualTagProcessor
[THYMELEAF]             * [* {th:text}] [1300]: org.thymeleaf.standard.processor.StandardTextTagProcessor
[THYMELEAF]             * [* {th:utext}] [1400]: org.thymeleaf.standard.processor.StandardUtextTagProcessor
[THYMELEAF]             * [* {th:assert}] [1550]: org.thymeleaf.standard.processor.StandardAssertTagProcessor
[THYMELEAF]             * [* {th:remove}] [1600]: org.thymeleaf.standard.processor.StandardRemoveTagProcessor
[THYMELEAF]             * [* 100000] [org.thymeleaf.standard.processor.StandardBlockTagProcessor]: {}
[THYMELEAF]             * [{th:block} *] [100000]: org.thymeleaf.standard.processor.StandardBlockTagProcessor
[THYMELEAF]         * Text Processors by [precedence]:
[THYMELEAF]             * [1000]: org.thymeleaf.standard.processor.StandardInliningTextProcessor
[THYMELEAF]     * Expression Objects:
[THYMELEAF]         * #ctx
[THYMELEAF]         * #root
[THYMELEAF]         * #vars
[THYMELEAF]         * #object
[THYMELEAF]         * #locale
[THYMELEAF]         * #conversions
[THYMELEAF]         * #uris
[THYMELEAF]         * #temporals
[THYMELEAF]         * #calendars
[THYMELEAF]         * #dates
[THYMELEAF]         * #bools
[THYMELEAF]         * #numbers
[THYMELEAF]         * #objects
[THYMELEAF]         * #strings
[THYMELEAF]         * #arrays
[THYMELEAF]         * #lists
[THYMELEAF]         * #sets
[THYMELEAF]         * #maps
[THYMELEAF]         * #aggregates
[THYMELEAF]         * #messages
[THYMELEAF]         * #ids
[THYMELEAF]         * #execInfo
[THYMELEAF]         * #request
[THYMELEAF]         * #response
[THYMELEAF]         * #session
[THYMELEAF]         * #servletContext
[THYMELEAF]     * Execution Attributes:
[THYMELEAF]         * "StandardExpressionParser": com.intuit.karate.template.KarateStandardDialect@7f2c57fe
[THYMELEAF]         * "StandardJavaScriptSerializer": org.thymeleaf.standard.serializer.StandardJavaScriptSerializer@3f5dfe69
[THYMELEAF]         * "StandardCSSSerializer": org.thymeleaf.standard.serializer.StandardCSSSerializer@571a663c
[THYMELEAF]         * "StandardVariableExpressionEvaluator": com.intuit.karate.template.KarateStandardDialect@7f2c57fe
[THYMELEAF]         * "StandardConversionService": org.thymeleaf.standard.expression.StandardConversionService@3a788fe0
[THYMELEAF] * Dialect [2 of 2]: karate (com.intuit.karate.template.KarateScriptDialect)
[THYMELEAF]     * Prefix: "ka"
[THYMELEAF]     * Processors for Template Mode: HTML
[THYMELEAF]         * Element Tag Processors by [matching element and attribute name] [precedence]:
[THYMELEAF]             * [* {src}] [1000]: com.intuit.karate.template.KaScriptAttrProcessor
[THYMELEAF]         * Element Model Processors by [matching element and attribute name] [precedence]:
[THYMELEAF]             * [{script} {ka:scope,data-ka-scope}] [1000]: com.intuit.karate.template.KaScriptElemProcessor
[THYMELEAF]             * [* {ka:set,data-ka-set}] [1000]: com.intuit.karate.template.KaSetElemProcessor
[THYMELEAF] TEMPLATE ENGINE CONFIGURED OK
12:08:39.469 [Test worker] DEBUG org.thymeleaf.TemplateEngine -- [THYMELEAF] TEMPLATE ENGINE INITIALIZED
---------------------------------------------------------
feature: classpath:features/marvel_characters_api/actualizarPersonaje.feature
scenarios:  2 | passed:  1 | failed:  1 | time: 0.5936
---------------------------------------------------------

12:08:39.623 [Test worker] DEBUG org.apache.http.client.protocol.RequestAddCookies -- CookieSpec selected: karate
12:08:39.623 [Test worker] DEBUG org.apache.http.client.protocol.RequestAuthCache -- Auth cache not set in the context
12:08:39.623 [Test worker] DEBUG com.intuit.karate -- request:
1 > GET http://bp-se-test-cabcd9b246a5.herokuapp.com/testuser/api/characters/118
1 > Host: bp-se-test-cabcd9b246a5.herokuapp.com
1 > Connection: Keep-Alive
1 > User-Agent: Apache-HttpClient/4.5.14 (Java/17.0.14)
1 > Accept-Encoding: gzip,deflate


12:08:39.623 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection request: [route: {}->http://bp-se-test-cabcd9b246a5.herokuapp.com:80][total available: 0; route allocated: 0 of 5; total allocated: 0 of 10]
12:08:39.623 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection leased: [id: 2][route: {}->http://bp-se-test-cabcd9b246a5.herokuapp.com:80][total available: 0; route allocated: 1 of 5; total allocated: 1 of 10]
12:08:39.623 [Test worker] DEBUG org.apache.http.impl.execchain.MainClientExec -- Opening connection {}->http://bp-se-test-cabcd9b246a5.herokuapp.com:80
12:08:39.623 [Test worker] DEBUG org.apache.http.impl.conn.DefaultHttpClientConnectionOperator -- Connecting to bp-se-test-cabcd9b246a5.herokuapp.com/52.5.82.174:80
12:08:39.709 [Test worker] DEBUG org.apache.http.impl.conn.DefaultHttpClientConnectionOperator -- Connection established 192.168.100.112:58281<->52.5.82.174:80
12:08:39.709 [Test worker] DEBUG org.apache.http.impl.conn.DefaultManagedHttpClientConnection -- http-outgoing-2: set socket timeout to 30000
12:08:39.709 [Test worker] DEBUG org.apache.http.impl.execchain.MainClientExec -- Executing request GET /testuser/api/characters/118 HTTP/1.1
12:08:39.709 [Test worker] DEBUG org.apache.http.impl.execchain.MainClientExec -- Target auth state: UNCHALLENGED
12:08:39.709 [Test worker] DEBUG org.apache.http.impl.execchain.MainClientExec -- Proxy auth state: UNCHALLENGED
12:08:39.709 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-2 >> GET /testuser/api/characters/118 HTTP/1.1
12:08:39.709 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-2 >> Host: bp-se-test-cabcd9b246a5.herokuapp.com
12:08:39.709 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-2 >> Connection: Keep-Alive
12:08:39.709 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-2 >> User-Agent: Apache-HttpClient/4.5.14 (Java/17.0.14)
12:08:39.709 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-2 >> Accept-Encoding: gzip,deflate
12:08:39.709 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-2 >> "GET /testuser/api/characters/118 HTTP/1.1[\r][\n]"
12:08:39.709 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-2 >> "Host: bp-se-test-cabcd9b246a5.herokuapp.com[\r][\n]"
12:08:39.709 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-2 >> "Connection: Keep-Alive[\r][\n]"
12:08:39.709 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-2 >> "User-Agent: Apache-HttpClient/4.5.14 (Java/17.0.14)[\r][\n]"
12:08:39.709 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-2 >> "Accept-Encoding: gzip,deflate[\r][\n]"
12:08:39.709 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-2 >> "[\r][\n]"
12:08:39.799 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-2 << "HTTP/1.1 200 [\r][\n]"
12:08:39.799 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-2 << "Server: Cowboy[\r][\n]"
12:08:39.799 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-2 << "Report-To: {"group":"heroku-nel","max_age":3600,"endpoints":[{"url":"https://nel.heroku.com/reports?ts=1750439319&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=kjR6pMbc%2FY3MoqBchWHOjzRxVRXPyD5Dln%2BbWuU%2Fskg%3D"}]}[\r][\n]"
12:08:39.799 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-2 << "Reporting-Endpoints: heroku-nel=https://nel.heroku.com/reports?ts=1750439319&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=kjR6pMbc%2FY3MoqBchWHOjzRxVRXPyD5Dln%2BbWuU%2Fskg%3D[\r][\n]"
12:08:39.799 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-2 << "Nel: {"report_to":"heroku-nel","max_age":3600,"success_fraction":0.005,"failure_fraction":0.05,"response_headers":["Via"]}[\r][\n]"
12:08:39.799 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-2 << "Connection: keep-alive[\r][\n]"
12:08:39.799 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-2 << "Content-Type: application/json[\r][\n]"
12:08:39.799 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-2 << "Transfer-Encoding: chunked[\r][\n]"
12:08:39.799 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-2 << "Date: Fri, 20 Jun 2025 17:08:39 GMT[\r][\n]"
12:08:39.799 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-2 << "Via: 1.1 vegur[\r][\n]"
12:08:39.799 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-2 << "[\r][\n]"
12:08:39.799 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-2 << "74[\r][\n]"
12:08:39.799 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-2 << "{"id":118,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]}[\r][\n]"
12:08:39.799 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-2 << "0[\r][\n]"
12:08:39.799 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-2 << "[\r][\n]"
12:08:39.800 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-2 << HTTP/1.1 200 
12:08:39.800 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-2 << Server: Cowboy
12:08:39.800 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-2 << Report-To: {"group":"heroku-nel","max_age":3600,"endpoints":[{"url":"https://nel.heroku.com/reports?ts=1750439319&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=kjR6pMbc%2FY3MoqBchWHOjzRxVRXPyD5Dln%2BbWuU%2Fskg%3D"}]}
12:08:39.800 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-2 << Reporting-Endpoints: heroku-nel=https://nel.heroku.com/reports?ts=1750439319&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=kjR6pMbc%2FY3MoqBchWHOjzRxVRXPyD5Dln%2BbWuU%2Fskg%3D
12:08:39.800 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-2 << Nel: {"report_to":"heroku-nel","max_age":3600,"success_fraction":0.005,"failure_fraction":0.05,"response_headers":["Via"]}
12:08:39.800 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-2 << Connection: keep-alive
12:08:39.800 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-2 << Content-Type: application/json
12:08:39.800 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-2 << Transfer-Encoding: chunked
12:08:39.800 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-2 << Date: Fri, 20 Jun 2025 17:08:39 GMT
12:08:39.800 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-2 << Via: 1.1 vegur
12:08:39.800 [Test worker] DEBUG org.apache.http.impl.execchain.MainClientExec -- Connection can be kept alive indefinitely
12:08:39.800 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection [id: 2][route: {}->http://bp-se-test-cabcd9b246a5.herokuapp.com:80] can be kept alive indefinitely
12:08:39.800 [Test worker] DEBUG org.apache.http.impl.conn.DefaultManagedHttpClientConnection -- http-outgoing-2: set socket timeout to 0
12:08:39.800 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection released: [id: 2][route: {}->http://bp-se-test-cabcd9b246a5.herokuapp.com:80][total available: 1; route allocated: 1 of 5; total allocated: 1 of 10]
12:08:39.800 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection manager is shutting down
12:08:39.800 [Test worker] DEBUG org.apache.http.impl.conn.DefaultManagedHttpClientConnection -- http-outgoing-2: Close connection
12:08:39.800 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection manager shut down
12:08:39.800 [Test worker] DEBUG com.intuit.karate -- response time in milliseconds: 177
1 < 200
1 < Server: Cowboy
1 < Report-To: {"group":"heroku-nel","max_age":3600,"endpoints":[{"url":"https://nel.heroku.com/reports?ts=1750439319&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=kjR6pMbc%2FY3MoqBchWHOjzRxVRXPyD5Dln%2BbWuU%2Fskg%3D"}]}
1 < Reporting-Endpoints: heroku-nel=https://nel.heroku.com/reports?ts=1750439319&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=kjR6pMbc%2FY3MoqBchWHOjzRxVRXPyD5Dln%2BbWuU%2Fskg%3D
1 < Nel: {"report_to":"heroku-nel","max_age":3600,"success_fraction":0.005,"failure_fraction":0.05,"response_headers":["Via"]}
1 < Connection: keep-alive
1 < Content-Type: application/json
1 < Transfer-Encoding: chunked
1 < Date: Fri, 20 Jun 2025 17:08:39 GMT
1 < Via: 1.1 vegur
{"id":118,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]}

12:08:39.801 [Test worker] DEBUG com.jayway.jsonpath.internal.path.CompiledPath -- Evaluating path: $['name']
12:08:39.807 [Test worker] DEBUG org.apache.http.client.protocol.RequestAddCookies -- CookieSpec selected: karate
12:08:39.807 [Test worker] DEBUG org.apache.http.client.protocol.RequestAuthCache -- Auth cache not set in the context
12:08:39.807 [Test worker] DEBUG com.intuit.karate -- request:
1 > GET http://bp-se-test-cabcd9b246a5.herokuapp.com/testuser/api/characters/999
1 > Host: bp-se-test-cabcd9b246a5.herokuapp.com
1 > Connection: Keep-Alive
1 > User-Agent: Apache-HttpClient/4.5.14 (Java/17.0.14)
1 > Accept-Encoding: gzip,deflate


12:08:39.807 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection request: [route: {}->http://bp-se-test-cabcd9b246a5.herokuapp.com:80][total available: 0; route allocated: 0 of 5; total allocated: 0 of 10]
12:08:39.807 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection leased: [id: 3][route: {}->http://bp-se-test-cabcd9b246a5.herokuapp.com:80][total available: 0; route allocated: 1 of 5; total allocated: 1 of 10]
12:08:39.807 [Test worker] DEBUG org.apache.http.impl.execchain.MainClientExec -- Opening connection {}->http://bp-se-test-cabcd9b246a5.herokuapp.com:80
12:08:39.807 [Test worker] DEBUG org.apache.http.impl.conn.DefaultHttpClientConnectionOperator -- Connecting to bp-se-test-cabcd9b246a5.herokuapp.com/52.5.82.174:80
12:08:39.897 [Test worker] DEBUG org.apache.http.impl.conn.DefaultHttpClientConnectionOperator -- Connection established 192.168.100.112:58282<->52.5.82.174:80
12:08:39.897 [Test worker] DEBUG org.apache.http.impl.conn.DefaultManagedHttpClientConnection -- http-outgoing-3: set socket timeout to 30000
12:08:39.897 [Test worker] DEBUG org.apache.http.impl.execchain.MainClientExec -- Executing request GET /testuser/api/characters/999 HTTP/1.1
12:08:39.897 [Test worker] DEBUG org.apache.http.impl.execchain.MainClientExec -- Target auth state: UNCHALLENGED
12:08:39.897 [Test worker] DEBUG org.apache.http.impl.execchain.MainClientExec -- Proxy auth state: UNCHALLENGED
12:08:39.897 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-3 >> GET /testuser/api/characters/999 HTTP/1.1
12:08:39.897 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-3 >> Host: bp-se-test-cabcd9b246a5.herokuapp.com
12:08:39.897 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-3 >> Connection: Keep-Alive
12:08:39.897 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-3 >> User-Agent: Apache-HttpClient/4.5.14 (Java/17.0.14)
12:08:39.897 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-3 >> Accept-Encoding: gzip,deflate
12:08:39.898 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-3 >> "GET /testuser/api/characters/999 HTTP/1.1[\r][\n]"
12:08:39.898 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-3 >> "Host: bp-se-test-cabcd9b246a5.herokuapp.com[\r][\n]"
12:08:39.898 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-3 >> "Connection: Keep-Alive[\r][\n]"
12:08:39.898 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-3 >> "User-Agent: Apache-HttpClient/4.5.14 (Java/17.0.14)[\r][\n]"
12:08:39.898 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-3 >> "Accept-Encoding: gzip,deflate[\r][\n]"
12:08:39.898 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-3 >> "[\r][\n]"
12:08:39.989 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-3 << "HTTP/1.1 404 [\r][\n]"
12:08:39.989 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-3 << "Server: Cowboy[\r][\n]"
12:08:39.989 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-3 << "Report-To: {"group":"heroku-nel","max_age":3600,"endpoints":[{"url":"https://nel.heroku.com/reports?ts=1750439320&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=YrmB5yVBFdMfgJMsB%2Fe1n75IIN4dHcXUl31IY0ogeSo%3D"}]}[\r][\n]"
12:08:39.989 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-3 << "Reporting-Endpoints: heroku-nel=https://nel.heroku.com/reports?ts=1750439320&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=YrmB5yVBFdMfgJMsB%2Fe1n75IIN4dHcXUl31IY0ogeSo%3D[\r][\n]"
12:08:39.989 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-3 << "Nel: {"report_to":"heroku-nel","max_age":3600,"success_fraction":0.005,"failure_fraction":0.05,"response_headers":["Via"]}[\r][\n]"
12:08:39.989 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-3 << "Connection: keep-alive[\r][\n]"
12:08:39.989 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-3 << "Content-Type: application/json[\r][\n]"
12:08:39.989 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-3 << "Transfer-Encoding: chunked[\r][\n]"
12:08:39.989 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-3 << "Date: Fri, 20 Jun 2025 17:08:40 GMT[\r][\n]"
12:08:40.001 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-3 << "Via: 1.1 vegur[\r][\n]"
12:08:40.001 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-3 << "[\r][\n]"
12:08:40.001 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-3 << "1f[\r][\n]"
12:08:40.001 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-3 << "{"error":"Character not found"}[\r][\n]"
12:08:40.001 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-3 << "0[\r][\n]"
12:08:40.001 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-3 << "[\r][\n]"
12:08:40.001 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-3 << HTTP/1.1 404 
12:08:40.001 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-3 << Server: Cowboy
12:08:40.001 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-3 << Report-To: {"group":"heroku-nel","max_age":3600,"endpoints":[{"url":"https://nel.heroku.com/reports?ts=1750439320&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=YrmB5yVBFdMfgJMsB%2Fe1n75IIN4dHcXUl31IY0ogeSo%3D"}]}
12:08:40.001 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-3 << Reporting-Endpoints: heroku-nel=https://nel.heroku.com/reports?ts=1750439320&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=YrmB5yVBFdMfgJMsB%2Fe1n75IIN4dHcXUl31IY0ogeSo%3D
12:08:40.001 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-3 << Nel: {"report_to":"heroku-nel","max_age":3600,"success_fraction":0.005,"failure_fraction":0.05,"response_headers":["Via"]}
12:08:40.001 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-3 << Connection: keep-alive
12:08:40.001 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-3 << Content-Type: application/json
12:08:40.001 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-3 << Transfer-Encoding: chunked
12:08:40.001 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-3 << Date: Fri, 20 Jun 2025 17:08:40 GMT
12:08:40.001 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-3 << Via: 1.1 vegur
12:08:40.001 [Test worker] DEBUG org.apache.http.impl.execchain.MainClientExec -- Connection can be kept alive indefinitely
12:08:40.001 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection [id: 3][route: {}->http://bp-se-test-cabcd9b246a5.herokuapp.com:80] can be kept alive indefinitely
12:08:40.001 [Test worker] DEBUG org.apache.http.impl.conn.DefaultManagedHttpClientConnection -- http-outgoing-3: set socket timeout to 0
12:08:40.001 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection released: [id: 3][route: {}->http://bp-se-test-cabcd9b246a5.herokuapp.com:80][total available: 1; route allocated: 1 of 5; total allocated: 1 of 10]
12:08:40.001 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection manager is shutting down
12:08:40.001 [Test worker] DEBUG org.apache.http.impl.conn.DefaultManagedHttpClientConnection -- http-outgoing-3: Close connection
12:08:40.002 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection manager shut down
12:08:40.002 [Test worker] DEBUG com.intuit.karate -- response time in milliseconds: 194
1 < 404
1 < Server: Cowboy
1 < Report-To: {"group":"heroku-nel","max_age":3600,"endpoints":[{"url":"https://nel.heroku.com/reports?ts=1750439320&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=YrmB5yVBFdMfgJMsB%2Fe1n75IIN4dHcXUl31IY0ogeSo%3D"}]}
1 < Reporting-Endpoints: heroku-nel=https://nel.heroku.com/reports?ts=1750439320&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=YrmB5yVBFdMfgJMsB%2Fe1n75IIN4dHcXUl31IY0ogeSo%3D
1 < Nel: {"report_to":"heroku-nel","max_age":3600,"success_fraction":0.005,"failure_fraction":0.05,"response_headers":["Via"]}
1 < Connection: keep-alive
1 < Content-Type: application/json
1 < Transfer-Encoding: chunked
1 < Date: Fri, 20 Jun 2025 17:08:40 GMT
1 < Via: 1.1 vegur
{"error":"Character not found"}

12:08:40.003 [Test worker] DEBUG com.jayway.jsonpath.internal.path.CompiledPath -- Evaluating path: $['error']
12:08:40.007 [Test worker] DEBUG org.thymeleaf.TemplateEngine -- [THYMELEAF] INITIALIZING TEMPLATE ENGINE
12:08:40.020 [Test worker] DEBUG org.thymeleaf.TemplateEngine.CONFIG -- Initializing Thymeleaf Template engine configuration...
[THYMELEAF] TEMPLATE ENGINE CONFIGURATION:
[THYMELEAF] * Thymeleaf version: 3.1.2.RELEASE (built 2023-07-30T19:25:50+0000)
[THYMELEAF] * Cache Manager implementation: org.thymeleaf.cache.StandardCacheManager
[THYMELEAF] * Template resolvers:
[THYMELEAF]     * [1] com.intuit.karate.template.ResourceHtmlTemplateResolver
[THYMELEAF] * Message resolvers:
[THYMELEAF]     * org.thymeleaf.messageresolver.StandardMessageResolver
[THYMELEAF] * Link builders:
[THYMELEAF]     * org.thymeleaf.linkbuilder.StandardLinkBuilder
[THYMELEAF] * Dialect [1 of 2]: Standard (com.intuit.karate.template.KarateStandardDialect)
[THYMELEAF]     * Prefix: "th"
[THYMELEAF]     * Processors for Template Mode: HTML
[THYMELEAF]         * Element Tag Processors by [matching element and attribute name] [precedence]:
[THYMELEAF]             * [* {th:include,data-th-include}] [100]: org.thymeleaf.standard.processor.StandardIncludeTagProcessor
[THYMELEAF]             * [* {th:insert,data-th-insert}] [100]: org.thymeleaf.standard.processor.StandardInsertTagProcessor
[THYMELEAF]             * [* {th:replace,data-th-replace}] [100]: org.thymeleaf.standard.processor.StandardReplaceTagProcessor
[THYMELEAF]             * [* {th:each,data-th-each}] [200]: com.intuit.karate.template.KarateEachTagProcessor
[THYMELEAF]             * [* {th:switch,data-th-switch}] [250]: org.thymeleaf.standard.processor.StandardSwitchTagProcessor
[THYMELEAF]             * [* {th:case,data-th-case}] [275]: org.thymeleaf.standard.processor.StandardCaseTagProcessor
[THYMELEAF]             * [* {th:if,data-th-if}] [300]: org.thymeleaf.standard.processor.StandardIfTagProcessor
[THYMELEAF]             * [* {th:unless,data-th-unless}] [400]: org.thymeleaf.standard.processor.StandardUnlessTagProcessor
[THYMELEAF]             * [* {th:object,data-th-object}] [500]: org.thymeleaf.standard.processor.StandardObjectTagProcessor
[THYMELEAF]             * [* {th:with,data-th-with}] [600]: com.intuit.karate.template.KarateWithTagProcessor
[THYMELEAF]             * [* {th:attr,data-th-attr}] [700]: com.intuit.karate.template.KarateAttributeTagProcessor.KarateAttrTagProcessor
[THYMELEAF]             * [* {th:attrappend,data-th-attrappend}] [900]: com.intuit.karate.template.KarateAttributeTagProcessor.KarateAttrappendTagProcessor
[THYMELEAF]             * [* {th:attrprepend,data-th-attrprepend}] [900]: com.intuit.karate.template.KarateAttributeTagProcessor.KarateAttrprependTagProcessor
[THYMELEAF]             * [* {th:alt-title,data-th-alt-title}] [990]: org.thymeleaf.standard.processor.StandardAltTitleTagProcessor
[THYMELEAF]             * [* {th:lang-xmllang,data-th-lang-xmllang}] [990]: org.thymeleaf.standard.processor.StandardLangXmlLangTagProcessor
[THYMELEAF]             * [* {th:action,data-th-action}] [1000]: org.thymeleaf.standard.processor.StandardActionTagProcessor
[THYMELEAF]             * [* {th:required,data-th-required}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:default,data-th-default}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:async,data-th-async}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:seamless,data-th-seamless}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:scoped,data-th-scoped}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:selected,data-th-selected}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:pubdate,data-th-pubdate}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:checked,data-th-checked}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:open,data-th-open}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:autofocus,data-th-autofocus}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:nowrap,data-th-nowrap}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:autoplay,data-th-autoplay}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:novalidate,data-th-novalidate}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:ismap,data-th-ismap}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:formnovalidate,data-th-formnovalidate}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:readonly,data-th-readonly}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:declare,data-th-declare}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:hidden,data-th-hidden}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:controls,data-th-controls}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:defer,data-th-defer}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:reversed,data-th-reversed}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:loop,data-th-loop}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:multiple,data-th-multiple}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:disabled,data-th-disabled}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:onresize,data-th-onresize}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onafterprint,data-th-onafterprint}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onscroll,data-th-onscroll}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onpause,data-th-onpause}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onloadstart,data-th-onloadstart}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ondblclick,data-th-ondblclick}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onmouseup,data-th-onmouseup}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:oncanplay,data-th-oncanplay}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onabort,data-th-onabort}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onratechange,data-th-onratechange}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onmouseout,data-th-onmouseout}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onclick,data-th-onclick}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onreadystatechange,data-th-onreadystatechange}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onkeyup,data-th-onkeyup}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onforminput,data-th-onforminput}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ondrag,data-th-ondrag}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onselect,data-th-onselect}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onstorage,data-th-onstorage}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onloadedmetadata,data-th-onloadedmetadata}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onblur,data-th-onblur}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onoffline,data-th-onoffline}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onsuspend,data-th-onsuspend}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onload,data-th-onload}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:oncontextmenu,data-th-oncontextmenu}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onundo,data-th-onundo}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onended,data-th-onended}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onpopstate,data-th-onpopstate}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onemptied,data-th-onemptied}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onsubmit,data-th-onsubmit}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onwaiting,data-th-onwaiting}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onplaying,data-th-onplaying}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onformchange,data-th-onformchange}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onhashchange,data-th-onhashchange}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onerror,data-th-onerror}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ondrop,data-th-ondrop}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onvolumechange,data-th-onvolumechange}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ononline,data-th-ononline}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ondragend,data-th-ondragend}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ondragover,data-th-ondragover}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onstalled,data-th-onstalled}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onmousewheel,data-th-onmousewheel}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onmessage,data-th-onmessage}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ondragstart,data-th-ondragstart}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ontimeupdate,data-th-ontimeupdate}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:oncanplaythrough,data-th-oncanplaythrough}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ondragenter,data-th-ondragenter}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:oninvalid,data-th-oninvalid}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:oninput,data-th-oninput}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onmouseover,data-th-onmouseover}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onkeypress,data-th-onkeypress}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onfocus,data-th-onfocus}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ondragleave,data-th-ondragleave}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ondurationchange,data-th-ondurationchange}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onplay,data-th-onplay}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onloadeddata,data-th-onloadeddata}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onunload,data-th-onunload}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onseeking,data-th-onseeking}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onseeked,data-th-onseeked}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onmousedown,data-th-onmousedown}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onprogress,data-th-onprogress}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onreset,data-th-onreset}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onredo,data-th-onredo}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onbeforeunload,data-th-onbeforeunload}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onshow,data-th-onshow}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onkeydown,data-th-onkeydown}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onmousemove,data-th-onmousemove}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onbeforeprint,data-th-onbeforeprint}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onchange,data-th-onchange}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:href,data-th-href}] [1000]: org.thymeleaf.standard.processor.StandardHrefTagProcessor
[THYMELEAF]             * [* {th:inline,data-th-inline}] [1000]: org.thymeleaf.standard.processor.StandardInlineHTMLTagProcessor
[THYMELEAF]             * [* {th:method,data-th-method}] [1000]: org.thymeleaf.standard.processor.StandardMethodTagProcessor
[THYMELEAF]             * [* {th:name,data-th-name}] [1000]: org.thymeleaf.standard.processor.StandardNonRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:type,data-th-type}] [1000]: org.thymeleaf.standard.processor.StandardNonRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:rel,data-th-rel}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:summary,data-th-summary}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:radiogroup,data-th-radiogroup}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:srclang,data-th-srclang}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:rev,data-th-rev}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:http-equiv,data-th-http-equiv}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:align,data-th-align}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:charset,data-th-charset}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:contextmenu,data-th-contextmenu}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:formtarget,data-th-formtarget}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:autocomplete,data-th-autocomplete}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:kind,data-th-kind}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:span,data-th-span}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:rows,data-th-rows}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:codetype,data-th-codetype}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:hspace,data-th-hspace}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:icon,data-th-icon}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:standby,data-th-standby}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:high,data-th-high}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:archive,data-th-archive}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:challenge,data-th-challenge}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:usemap,data-th-usemap}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:id,data-th-id}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:vspace,data-th-vspace}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:width,data-th-width}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:keytype,data-th-keytype}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:dropzone,data-th-dropzone}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:title,data-th-title}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:form,data-th-form}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:dir,data-th-dir}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:sandbox,data-th-sandbox}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:codebase,data-th-codebase}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:abbr,data-th-abbr}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:axis,data-th-axis}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:marginheight,data-th-marginheight}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:marginwidth,data-th-marginwidth}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:cite,data-th-cite}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:formmethod,data-th-formmethod}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:size,data-th-size}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:scope,data-th-scope}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:audio,data-th-audio}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:height,data-th-height}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:scheme,data-th-scheme}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:contenteditable,data-th-contenteditable}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:poster,data-th-poster}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:max,data-th-max}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:media,data-th-media}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:formaction,data-th-formaction}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:placeholder,data-th-placeholder}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:style,data-th-style}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:maxlength,data-th-maxlength}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:formenctype,data-th-formenctype}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:datetime,data-th-datetime}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:target,data-th-target}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:manifest,data-th-manifest}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:scrolling,data-th-scrolling}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:class,data-th-class}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:cellspacing,data-th-cellspacing}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:alt,data-th-alt}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:border,data-th-border}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:for,data-th-for}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:low,data-th-low}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:start,data-th-start}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:enctype,data-th-enctype}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:content,data-th-content}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:cellpadding,data-th-cellpadding}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:spellcheck,data-th-spellcheck}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:tabindex,data-th-tabindex}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:rules,data-th-rules}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:pattern,data-th-pattern}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:valuetype,data-th-valuetype}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:list,data-th-list}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:accesskey,data-th-accesskey}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:classid,data-th-classid}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:label,data-th-label}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:preload,data-th-preload}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:optimum,data-th-optimum}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:accept,data-th-accept}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:sizes,data-th-sizes}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:longdesc,data-th-longdesc}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:min,data-th-min}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:rowspan,data-th-rowspan}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:background,data-th-background}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:data,data-th-data}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:compact,data-th-compact}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:hreflang,data-th-hreflang}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:headers,data-th-headers}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:bgcolor,data-th-bgcolor}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:cols,data-th-cols}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:colspan,data-th-colspan}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:frameborder,data-th-frameborder}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:accept-charset,data-th-accept-charset}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:step,data-th-step}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:draggable,data-th-draggable}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:wrap,data-th-wrap}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:frame,data-th-frame}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:lang,data-th-lang}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:src,data-th-src}] [1000]: org.thymeleaf.standard.processor.StandardSrcTagProcessor
[THYMELEAF]             * [* {th:value,data-th-value}] [1000]: org.thymeleaf.standard.processor.StandardValueTagProcessor
[THYMELEAF]             * [* {th:xmlbase,data-th-xmlbase}] [1000]: org.thymeleaf.standard.processor.StandardXmlBaseTagProcessor
[THYMELEAF]             * [* {th:xmllang,data-th-xmllang}] [1000]: org.thymeleaf.standard.processor.StandardXmlLangTagProcessor
[THYMELEAF]             * [* {xmlns:th}] [1000]: org.thymeleaf.standard.processor.StandardXmlNsTagProcessor
[THYMELEAF]             * [* {th:xmlspace,data-th-xmlspace}] [1000]: org.thymeleaf.standard.processor.StandardXmlSpaceTagProcessor
[THYMELEAF]             * [* {th:classappend,data-th-classappend}] [1100]: org.thymeleaf.standard.processor.StandardClassappendTagProcessor
[THYMELEAF]             * [* {th:styleappend,data-th-styleappend}] [1100]: org.thymeleaf.standard.processor.StandardStyleappendTagProcessor
[THYMELEAF]             * [* {th:text,data-th-text}] [1300]: org.thymeleaf.standard.processor.StandardTextTagProcessor
[THYMELEAF]             * [* {th:utext,data-th-utext}] [1400]: org.thymeleaf.standard.processor.StandardUtextTagProcessor
[THYMELEAF]             * [* {th:fragment,data-th-fragment}] [1500]: org.thymeleaf.standard.processor.StandardFragmentTagProcessor
[THYMELEAF]             * [* {th:assert,data-th-assert}] [1550]: org.thymeleaf.standard.processor.StandardAssertTagProcessor
[THYMELEAF]             * [* {th:remove,data-th-remove}] [1600]: org.thymeleaf.standard.processor.StandardRemoveTagProcessor
[THYMELEAF]             * [* {th:ref,data-th-ref}] [10000]: org.thymeleaf.standard.processor.StandardRefAttributeTagProcessor
[THYMELEAF]             * [{th:block,th-block} *] [100000]: org.thymeleaf.standard.processor.StandardBlockTagProcessor
[THYMELEAF]             * [* th:*] [2147483647]: org.thymeleaf.standard.processor.StandardDefaultAttributesTagProcessor
[THYMELEAF]         * Text Processors by [precedence]:
[THYMELEAF]             * [1000]: org.thymeleaf.standard.processor.StandardInliningTextProcessor
[THYMELEAF]         * DOCTYPE Processors by [precedence]:
[THYMELEAF]             * [1000]: org.thymeleaf.standard.processor.StandardTranslationDocTypeProcessor
[THYMELEAF]         * CDATA Section Processors by [precedence]:
[THYMELEAF]             * [1000]: org.thymeleaf.standard.processor.StandardInliningCDATASectionProcessor
[THYMELEAF]         * Comment Processors by [precedence]:
[THYMELEAF]             * [1000]: org.thymeleaf.standard.processor.StandardInliningCommentProcessor
[THYMELEAF]             * [1100]: org.thymeleaf.standard.processor.StandardConditionalCommentProcessor
[THYMELEAF]     * Processors for Template Mode: XML
[THYMELEAF]         * Element Tag Processors by [matching element and attribute name] [precedence]:
[THYMELEAF]             * [* {th:include}] [100]: org.thymeleaf.standard.processor.StandardIncludeTagProcessor
[THYMELEAF]             * [* {th:insert}] [100]: org.thymeleaf.standard.processor.StandardInsertTagProcessor
[THYMELEAF]             * [* {th:replace}] [100]: org.thymeleaf.standard.processor.StandardReplaceTagProcessor
[THYMELEAF]             * [* {th:each}] [200]: com.intuit.karate.template.KarateEachTagProcessor
[THYMELEAF]             * [* {th:switch}] [250]: org.thymeleaf.standard.processor.StandardSwitchTagProcessor
[THYMELEAF]             * [* {th:case}] [275]: org.thymeleaf.standard.processor.StandardCaseTagProcessor
[THYMELEAF]             * [* {th:if}] [300]: org.thymeleaf.standard.processor.StandardIfTagProcessor
[THYMELEAF]             * [* {th:unless}] [400]: org.thymeleaf.standard.processor.StandardUnlessTagProcessor
[THYMELEAF]             * [* {th:object}] [500]: org.thymeleaf.standard.processor.StandardObjectTagProcessor
[THYMELEAF]             * [* {th:with}] [600]: com.intuit.karate.template.KarateWithTagProcessor
[THYMELEAF]             * [* {th:attr}] [700]: com.intuit.karate.template.KarateAttributeTagProcessor.KarateAttrTagProcessor
[THYMELEAF]             * [* {th:attrappend}] [900]: com.intuit.karate.template.KarateAttributeTagProcessor.KarateAttrappendTagProcessor
[THYMELEAF]             * [* {th:attrprepend}] [900]: com.intuit.karate.template.KarateAttributeTagProcessor.KarateAttrprependTagProcessor
[THYMELEAF]             * [* {th:inline}] [1000]: org.thymeleaf.standard.processor.StandardInlineXMLTagProcessor
[THYMELEAF]             * [* {xmlns:th}] [1000]: org.thymeleaf.standard.processor.StandardXmlNsTagProcessor
[THYMELEAF]             * [* {th:text}] [1300]: org.thymeleaf.standard.processor.StandardTextTagProcessor
[THYMELEAF]             * [* {th:utext}] [1400]: org.thymeleaf.standard.processor.StandardUtextTagProcessor
[THYMELEAF]             * [* {th:fragment}] [1500]: org.thymeleaf.standard.processor.StandardFragmentTagProcessor
[THYMELEAF]             * [* {th:assert}] [1550]: org.thymeleaf.standard.processor.StandardAssertTagProcessor
[THYMELEAF]             * [* {th:remove}] [1600]: org.thymeleaf.standard.processor.StandardRemoveTagProcessor
[THYMELEAF]             * [* {th:ref}] [10000]: org.thymeleaf.standard.processor.StandardRefAttributeTagProcessor
[THYMELEAF]             * [{th:block} *] [100000]: org.thymeleaf.standard.processor.StandardBlockTagProcessor
[THYMELEAF]             * [* th:*] [2147483647]: org.thymeleaf.standard.processor.StandardDefaultAttributesTagProcessor
[THYMELEAF]         * Text Processors by [precedence]:
[THYMELEAF]             * [1000]: org.thymeleaf.standard.processor.StandardInliningTextProcessor
[THYMELEAF]         * CDATA Section Processors by [precedence]:
[THYMELEAF]             * [1000]: org.thymeleaf.standard.processor.StandardInliningCDATASectionProcessor
[THYMELEAF]         * Comment Processors by [precedence]:
[THYMELEAF]             * [1000]: org.thymeleaf.standard.processor.StandardInliningCommentProcessor
[THYMELEAF]     * Processors for Template Mode: TEXT
[THYMELEAF]         * Element Tag Processors by [matching element and attribute name] [precedence]:
[THYMELEAF]             * [* {th:insert}] [100]: org.thymeleaf.standard.processor.StandardInsertTagProcessor
[THYMELEAF]             * [* {th:replace}] [100]: org.thymeleaf.standard.processor.StandardReplaceTagProcessor
[THYMELEAF]             * [* {th:each}] [200]: com.intuit.karate.template.KarateEachTagProcessor
[THYMELEAF]             * [* {th:switch}] [250]: org.thymeleaf.standard.processor.StandardSwitchTagProcessor
[THYMELEAF]             * [* {th:case}] [275]: org.thymeleaf.standard.processor.StandardCaseTagProcessor
[THYMELEAF]             * [* {th:if}] [300]: org.thymeleaf.standard.processor.StandardIfTagProcessor
[THYMELEAF]             * [* {th:unless}] [400]: org.thymeleaf.standard.processor.StandardUnlessTagProcessor
[THYMELEAF]             * [* {th:object}] [500]: org.thymeleaf.standard.processor.StandardObjectTagProcessor
[THYMELEAF]             * [* {th:with}] [600]: com.intuit.karate.template.KarateWithTagProcessor
[THYMELEAF]             * [* {th:inline}] [1000]: org.thymeleaf.standard.processor.StandardInlineTextualTagProcessor
[THYMELEAF]             * [* {th:text}] [1300]: org.thymeleaf.standard.processor.StandardTextTagProcessor
[THYMELEAF]             * [* {th:utext}] [1400]: org.thymeleaf.standard.processor.StandardUtextTagProcessor
[THYMELEAF]             * [* {th:assert}] [1550]: org.thymeleaf.standard.processor.StandardAssertTagProcessor
[THYMELEAF]             * [* {th:remove}] [1600]: org.thymeleaf.standard.processor.StandardRemoveTagProcessor
[THYMELEAF]             * [{th:block} *] [100000]: org.thymeleaf.standard.processor.StandardBlockTagProcessor
[THYMELEAF]             * [* 100000] [org.thymeleaf.standard.processor.StandardBlockTagProcessor]: {}
[THYMELEAF]         * Text Processors by [precedence]:
[THYMELEAF]             * [1000]: org.thymeleaf.standard.processor.StandardInliningTextProcessor
[THYMELEAF]     * Processors for Template Mode: JAVASCRIPT
[THYMELEAF]         * Element Tag Processors by [matching element and attribute name] [precedence]:
[THYMELEAF]             * [* {th:insert}] [100]: org.thymeleaf.standard.processor.StandardInsertTagProcessor
[THYMELEAF]             * [* {th:replace}] [100]: org.thymeleaf.standard.processor.StandardReplaceTagProcessor
[THYMELEAF]             * [* {th:each}] [200]: com.intuit.karate.template.KarateEachTagProcessor
[THYMELEAF]             * [* {th:switch}] [250]: org.thymeleaf.standard.processor.StandardSwitchTagProcessor
[THYMELEAF]             * [* {th:case}] [275]: org.thymeleaf.standard.processor.StandardCaseTagProcessor
[THYMELEAF]             * [* {th:if}] [300]: org.thymeleaf.standard.processor.StandardIfTagProcessor
[THYMELEAF]             * [* {th:unless}] [400]: org.thymeleaf.standard.processor.StandardUnlessTagProcessor
[THYMELEAF]             * [* {th:object}] [500]: org.thymeleaf.standard.processor.StandardObjectTagProcessor
[THYMELEAF]             * [* {th:with}] [600]: com.intuit.karate.template.KarateWithTagProcessor
[THYMELEAF]             * [* {th:inline}] [1000]: org.thymeleaf.standard.processor.StandardInlineTextualTagProcessor
[THYMELEAF]             * [* {th:text}] [1300]: org.thymeleaf.standard.processor.StandardTextTagProcessor
[THYMELEAF]             * [* {th:utext}] [1400]: org.thymeleaf.standard.processor.StandardUtextTagProcessor
[THYMELEAF]             * [* {th:assert}] [1550]: org.thymeleaf.standard.processor.StandardAssertTagProcessor
[THYMELEAF]             * [* {th:remove}] [1600]: org.thymeleaf.standard.processor.StandardRemoveTagProcessor
[THYMELEAF]             * [* 100000] [org.thymeleaf.standard.processor.StandardBlockTagProcessor]: {}
[THYMELEAF]             * [{th:block} *] [100000]: org.thymeleaf.standard.processor.StandardBlockTagProcessor
[THYMELEAF]         * Text Processors by [precedence]:
[THYMELEAF]             * [1000]: org.thymeleaf.standard.processor.StandardInliningTextProcessor
[THYMELEAF]     * Processors for Template Mode: CSS
[THYMELEAF]         * Element Tag Processors by [matching element and attribute name] [precedence]:
[THYMELEAF]             * [* {th:insert}] [100]: org.thymeleaf.standard.processor.StandardInsertTagProcessor
[THYMELEAF]             * [* {th:replace}] [100]: org.thymeleaf.standard.processor.StandardReplaceTagProcessor
[THYMELEAF]             * [* {th:each}] [200]: com.intuit.karate.template.KarateEachTagProcessor
[THYMELEAF]             * [* {th:switch}] [250]: org.thymeleaf.standard.processor.StandardSwitchTagProcessor
[THYMELEAF]             * [* {th:case}] [275]: org.thymeleaf.standard.processor.StandardCaseTagProcessor
[THYMELEAF]             * [* {th:if}] [300]: org.thymeleaf.standard.processor.StandardIfTagProcessor
[THYMELEAF]             * [* {th:unless}] [400]: org.thymeleaf.standard.processor.StandardUnlessTagProcessor
[THYMELEAF]             * [* {th:object}] [500]: org.thymeleaf.standard.processor.StandardObjectTagProcessor
[THYMELEAF]             * [* {th:with}] [600]: com.intuit.karate.template.KarateWithTagProcessor
[THYMELEAF]             * [* {th:inline}] [1000]: org.thymeleaf.standard.processor.StandardInlineTextualTagProcessor
[THYMELEAF]             * [* {th:text}] [1300]: org.thymeleaf.standard.processor.StandardTextTagProcessor
[THYMELEAF]             * [* {th:utext}] [1400]: org.thymeleaf.standard.processor.StandardUtextTagProcessor
[THYMELEAF]             * [* {th:assert}] [1550]: org.thymeleaf.standard.processor.StandardAssertTagProcessor
[THYMELEAF]             * [* {th:remove}] [1600]: org.thymeleaf.standard.processor.StandardRemoveTagProcessor
[THYMELEAF]             * [{th:block} *] [100000]: org.thymeleaf.standard.processor.StandardBlockTagProcessor
[THYMELEAF]             * [* 100000] [org.thymeleaf.standard.processor.StandardBlockTagProcessor]: {}
[THYMELEAF]         * Text Processors by [precedence]:
[THYMELEAF]             * [1000]: org.thymeleaf.standard.processor.StandardInliningTextProcessor
[THYMELEAF]     * Expression Objects:
[THYMELEAF]         * #ctx
[THYMELEAF]         * #root
[THYMELEAF]         * #vars
[THYMELEAF]         * #object
[THYMELEAF]         * #locale
[THYMELEAF]         * #conversions
[THYMELEAF]         * #uris
[THYMELEAF]         * #temporals
[THYMELEAF]         * #calendars
[THYMELEAF]         * #dates
[THYMELEAF]         * #bools
[THYMELEAF]         * #numbers
[THYMELEAF]         * #objects
[THYMELEAF]         * #strings
[THYMELEAF]         * #arrays
[THYMELEAF]         * #lists
[THYMELEAF]         * #sets
[THYMELEAF]         * #maps
[THYMELEAF]         * #aggregates
[THYMELEAF]         * #messages
[THYMELEAF]         * #ids
[THYMELEAF]         * #execInfo
[THYMELEAF]         * #request
[THYMELEAF]         * #response
[THYMELEAF]         * #session
[THYMELEAF]         * #servletContext
[THYMELEAF]     * Execution Attributes:
[THYMELEAF]         * "StandardExpressionParser": com.intuit.karate.template.KarateStandardDialect@537ca28e
[THYMELEAF]         * "StandardJavaScriptSerializer": org.thymeleaf.standard.serializer.StandardJavaScriptSerializer@4d290757
[THYMELEAF]         * "StandardCSSSerializer": org.thymeleaf.standard.serializer.StandardCSSSerializer@720a1fd0
[THYMELEAF]         * "StandardVariableExpressionEvaluator": com.intuit.karate.template.KarateStandardDialect@537ca28e
[THYMELEAF]         * "StandardConversionService": org.thymeleaf.standard.expression.StandardConversionService@5ab7ac02
[THYMELEAF] * Dialect [2 of 2]: karate (com.intuit.karate.template.KarateScriptDialect)
[THYMELEAF]     * Prefix: "ka"
[THYMELEAF]     * Processors for Template Mode: HTML
[THYMELEAF]         * Element Tag Processors by [matching element and attribute name] [precedence]:
[THYMELEAF]             * [* {src}] [1000]: com.intuit.karate.template.KaScriptAttrProcessor
[THYMELEAF]         * Element Model Processors by [matching element and attribute name] [precedence]:
[THYMELEAF]             * [{script} {ka:scope,data-ka-scope}] [1000]: com.intuit.karate.template.KaScriptElemProcessor
[THYMELEAF]             * [* {ka:set,data-ka-set}] [1000]: com.intuit.karate.template.KaSetElemProcessor
[THYMELEAF] TEMPLATE ENGINE CONFIGURED OK
12:08:40.021 [Test worker] DEBUG org.thymeleaf.TemplateEngine -- [THYMELEAF] TEMPLATE ENGINE INITIALIZED
---------------------------------------------------------
feature: classpath:features/marvel_characters_api/consultarPersonajePorId.feature
scenarios:  2 | passed:  2 | failed:  0 | time: 0.3763
---------------------------------------------------------

12:08:40.068 [Test worker] DEBUG org.apache.http.client.protocol.RequestAddCookies -- CookieSpec selected: karate
12:08:40.068 [Test worker] DEBUG org.apache.http.client.protocol.RequestAuthCache -- Auth cache not set in the context
12:08:40.068 [Test worker] DEBUG com.intuit.karate -- request:
1 > GET http://bp-se-test-cabcd9b246a5.herokuapp.com/testuser/api/characters
1 > Accept: application/json
1 > Host: bp-se-test-cabcd9b246a5.herokuapp.com
1 > Connection: Keep-Alive
1 > User-Agent: Apache-HttpClient/4.5.14 (Java/17.0.14)
1 > Accept-Encoding: gzip,deflate


12:08:40.068 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection request: [route: {}->http://bp-se-test-cabcd9b246a5.herokuapp.com:80][total available: 0; route allocated: 0 of 5; total allocated: 0 of 10]
12:08:40.068 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection leased: [id: 4][route: {}->http://bp-se-test-cabcd9b246a5.herokuapp.com:80][total available: 0; route allocated: 1 of 5; total allocated: 1 of 10]
12:08:40.068 [Test worker] DEBUG org.apache.http.impl.execchain.MainClientExec -- Opening connection {}->http://bp-se-test-cabcd9b246a5.herokuapp.com:80
12:08:40.068 [Test worker] DEBUG org.apache.http.impl.conn.DefaultHttpClientConnectionOperator -- Connecting to bp-se-test-cabcd9b246a5.herokuapp.com/52.5.82.174:80
12:08:40.153 [Test worker] DEBUG org.apache.http.impl.conn.DefaultHttpClientConnectionOperator -- Connection established 192.168.100.112:58283<->52.5.82.174:80
12:08:40.153 [Test worker] DEBUG org.apache.http.impl.conn.DefaultManagedHttpClientConnection -- http-outgoing-4: set socket timeout to 30000
12:08:40.153 [Test worker] DEBUG org.apache.http.impl.execchain.MainClientExec -- Executing request GET /testuser/api/characters HTTP/1.1
12:08:40.153 [Test worker] DEBUG org.apache.http.impl.execchain.MainClientExec -- Target auth state: UNCHALLENGED
12:08:40.153 [Test worker] DEBUG org.apache.http.impl.execchain.MainClientExec -- Proxy auth state: UNCHALLENGED
12:08:40.154 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-4 >> GET /testuser/api/characters HTTP/1.1
12:08:40.154 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-4 >> Accept: application/json
12:08:40.154 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-4 >> Host: bp-se-test-cabcd9b246a5.herokuapp.com
12:08:40.154 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-4 >> Connection: Keep-Alive
12:08:40.154 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-4 >> User-Agent: Apache-HttpClient/4.5.14 (Java/17.0.14)
12:08:40.154 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-4 >> Accept-Encoding: gzip,deflate
12:08:40.154 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 >> "GET /testuser/api/characters HTTP/1.1[\r][\n]"
12:08:40.154 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 >> "Accept: application/json[\r][\n]"
12:08:40.154 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 >> "Host: bp-se-test-cabcd9b246a5.herokuapp.com[\r][\n]"
12:08:40.154 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 >> "Connection: Keep-Alive[\r][\n]"
12:08:40.154 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 >> "User-Agent: Apache-HttpClient/4.5.14 (Java/17.0.14)[\r][\n]"
12:08:40.154 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 >> "Accept-Encoding: gzip,deflate[\r][\n]"
12:08:40.154 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 >> "[\r][\n]"
12:08:40.241 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "HTTP/1.1 200 [\r][\n]"
12:08:40.241 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "Server: Cowboy[\r][\n]"
12:08:40.241 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "Report-To: {"group":"heroku-nel","max_age":3600,"endpoints":[{"url":"https://nel.heroku.com/reports?ts=1750439320&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=YrmB5yVBFdMfgJMsB%2Fe1n75IIN4dHcXUl31IY0ogeSo%3D"}]}[\r][\n]"
12:08:40.241 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "Reporting-Endpoints: heroku-nel=https://nel.heroku.com/reports?ts=1750439320&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=YrmB5yVBFdMfgJMsB%2Fe1n75IIN4dHcXUl31IY0ogeSo%3D[\r][\n]"
12:08:40.241 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "Nel: {"report_to":"heroku-nel","max_age":3600,"success_fraction":0.005,"failure_fraction":0.05,"response_headers":["Via"]}[\r][\n]"
12:08:40.241 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "Connection: keep-alive[\r][\n]"
12:08:40.241 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "Content-Type: application/json[\r][\n]"
12:08:40.241 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "Transfer-Encoding: chunked[\r][\n]"
12:08:40.241 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "Date: Fri, 20 Jun 2025 17:08:40 GMT[\r][\n]"
12:08:40.241 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "Via: 1.1 vegur[\r][\n]"
12:08:40.241 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "[\r][\n]"
12:08:40.241 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "2000[\r][\n]"
12:08:40.241 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "[{"id":118,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":119,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":121,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":122,"name":"Test Character 1750432020309","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":123,"name":"Iron Man Full v2","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":125,"name":"Test Character 1750432022197","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":126,"name":"Iron Man 53ca6cc1-a1bd-4f2b-93f9-1633be1aad6b","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":129,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":130,"name":"Thor 2e08893c-7920-498d-90f9-3343b0a54908","alterego":"Thor Odinson","description":"God of Thunder","powers":["Hammer","Lightning"]},{"id":131,"name":"Iron Man ac45fd26-8b98-487d-81c9-f2e9d934384e","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":133,"name":"Santiago Sanchez","alte"
12:08:40.241 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-4 << HTTP/1.1 200 
12:08:40.241 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-4 << Server: Cowboy
12:08:40.241 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-4 << Report-To: {"group":"heroku-nel","max_age":3600,"endpoints":[{"url":"https://nel.heroku.com/reports?ts=1750439320&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=YrmB5yVBFdMfgJMsB%2Fe1n75IIN4dHcXUl31IY0ogeSo%3D"}]}
12:08:40.241 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-4 << Reporting-Endpoints: heroku-nel=https://nel.heroku.com/reports?ts=1750439320&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=YrmB5yVBFdMfgJMsB%2Fe1n75IIN4dHcXUl31IY0ogeSo%3D
12:08:40.241 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-4 << Nel: {"report_to":"heroku-nel","max_age":3600,"success_fraction":0.005,"failure_fraction":0.05,"response_headers":["Via"]}
12:08:40.241 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-4 << Connection: keep-alive
12:08:40.241 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-4 << Content-Type: application/json
12:08:40.241 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-4 << Transfer-Encoding: chunked
12:08:40.241 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-4 << Date: Fri, 20 Jun 2025 17:08:40 GMT
12:08:40.241 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-4 << Via: 1.1 vegur
12:08:40.241 [Test worker] DEBUG org.apache.http.impl.execchain.MainClientExec -- Connection can be kept alive indefinitely
12:08:40.241 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "rego":"Santi S","description":"Ingeniero","powers":["Fuerte","Inteligente"]},{"id":134,"name":"mario almeida","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":136,"name":"Iron Man 200","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":137,"name":"Iron Man Eva","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":138,"name":"Test Character 1750432250612","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":139,"name":"Test Character 1750432250854","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":140,"name":"Test Character 1750432251501","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":141,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":143,"name"
12:08:40.241 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "":"Test Character 1750432253388","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":144,"name":"Iron Man 86dcbb11-1522-4457-afd9-398d1c189b8a","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":146,"name":"Hulk eea541c7-2292-4cef-af8c-d19"
12:08:40.243 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "a81e39cb9","alterego":"Bruce Banner","description":"Green giant","powers":["Strength"]},{"id":147,"name":"Thor 6fa4faf3-c0bb-475d-b0c9-1570131ddcc6","alterego":"Thor Odinson","description":"God of Thunder","powers":["Hammer","Lightning"]},{"id":148,"name":"Capitan America de7de8bc-4a24-4313-9cfe-200dfa6d2775","alterego":"Steve Rogers","description":"Updated description","powers":["Shield","Leadership"]},{"id":149,"name":"IronMan-92ac203d-0658-432a-8ebc-e6466d1eb66f","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":151,"name":"Spider-Man-5","alterego":"Peter Parker","description":"Superh[0xc3][0xa9]roe ar[0xc3][0xa1]cnido de Marvel","powers":["Agilidad","Sentido ar[0xc3][0xa1]cnido","Trepar muros"]},{"id":152,"name":"Iron Man e354d0ac-a1c2-46aa-be2e-f1d6d8f9b459","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":153,"name":"Hulk e459e8d2-7af9-4bf7-b9d5-22a9f453fffb","alterego":"Bruce Banner","description":"Green giant","powers":["Strength"]},{"id":154,"
12:08:40.243 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << ""name":"Thor 2e94238c-4bea-45ec-b042-00ed2e7e8fb3","alterego":"Thor Odinson","description":"God of Thunder","powers":["Hammer","Lightning"]},{"id":155,"name":"Capitan America 9da54d03-62b6-49ac-9b9e-164d80e3c02d","alterego":"Steve Rogers","description":"Updated description","powers":["Shield","Leadership"]},{"id":157,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":159,"name":"Thor 3610678a-d9c8-4848-b133-4c7ebb9b1f6d","alterego":"Thor Odinson","description":"God of Thunder","powers":["Hammer","Lightning"]},{"id":160,"name":"Capitan America 5c6fb5f4-1f84-4149-87d5-f09499cebe3b","alterego":"Steve Rogers","description":"Updated description","powers":["Shield","Leadership"]},{"id":162,"name":"Spider-Man-6","alterego":"Peter Parker","description":"Superh[0xc3][0xa9]roe ar[0xc3][0xa1]cnido de Marvel","powers":["Agilidad","Sentido ar[0xc3][0xa1]cnido","Trepar muros"]},{"id":163,"name":"Captain Marvel","alterego":"Carol Danvers","description":"the biggest hero in the world","powers""
12:08:40.244 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << ":["Flight","Force"]},{"id":164,"name":"Iron Man dde04cc2-ac24-4eb4-ac77-ab5592d642fc","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":165,"name":"Hulk c06d00b0-f944-432e-8cbe-646bb23e5422","alterego":"Bruce Banner","description":"Green giant","powers":["Strength"]},{"id":166,"name":"Thor e04e9665-ee54-4b9c-baa4-44a41efd1133","alterego":"Thor Odinson","description":"God of Thunder","powers":["Hammer","Lightning"]},{"id":167,"name":"Capitan America 65bfa9f4-efcd-4f20-8f98-a824c7d8eac4","alterego":"Steve Rogers","description":"Updated description","powers":["Shield","Leadership"]},{"id":169,"name":"Test Character 1750432373791","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":170,"name":"Test Character 1750432374022","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":171,"name":"Test Character 1750432374630","alterego":"Test Alter Ego","description":""
12:08:40.244 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "Test Description","powers":["Test Power 1","Test Power 2"]},{"id":172,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":174,"name":"Test Character 1750432376433","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":175,"name":"Iron Man #3","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":176,"name":"Iron Man 5580fbb0-f402-4c30-8f00-9c9543cb5a6b","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":178,"name":"Test Character 1750432464491","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":179,"name":"Test Character 1750432465100","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":181,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id""
12:08:40.244 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << ":184,"name":"Test Character 1750432467117","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":185,"name":"Hulk","alterego":"No  Recuerdo","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":186,"name":"Loki","alterego":"Loki Laufeyson","description":"Dios del enga[0xc3][0xb1]o","powers":["Magia","Ilusi[0xc3][0xb3]n"]},{"id":187,"name":"Ghost Rider JC","alterego":"Ghost Rider JC","description":"Demon","powers":["Fire","Punishing gaze"]},{"id":188,"name":"IronMan-4e1c6d16-e5ee-42d8-8337-49de7e644f2c","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":189,"name":"Deadpool jusimban3","alterego":"Wade Winston Wilson","description":"Updated description","powers":["Immortality","Regeneration","Superhuman strength"]},{"id":191,"name":"CasaPlus","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":193,"name":"BatMans 2025","alterego":"Bruce Wayne","description":"the Dark Knight",""
12:08:40.244 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "powers":["Money","Investment","Martial Arts"]},{"id":194,"name":"Jose Obando 1750432629445","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":195,"name":"Test Character 1750432656836","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","[\r][\n]"
12:08:40.244 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "2000[\r][\n]"
12:08:40.244 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "Test Power 2"]},{"id":196,"name":"Test Character 1750432657078","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":197,"name":"Test Character 1750432657714","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":198,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":200,"name":"Jose Obando 1750432659387","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":201,"name":"Test Character 1750432659614","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":202,"name":"Iron Man e0a94dac-e873-4970-bd09-b4203cd66860","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":203,"name":"Chema Venegas","alterego":"Jos[0xc3][0xa9] Maria Venegas","description":"Updated description","powers":["Armor","Flight"]},{"id":204,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":208,"name":"Iron Man 8aef9187-dfcf-4c54-92fe-e1833b0159e6","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":209,"name":"Iron Man BP","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":210,"name":"Jose Obando 1750432762927","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":212,"name":"Iron Man","alterego":"Tony Stark v1","description":"Updated description","powers":["Armor","Flight"]},{"id":213,"name":"Diego Iron Man","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":214,"name":"Iron Man 33145b49-a097-4c72-981e-4c57d9a5e88c","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":215,"name":"Hulk ebbc0b5f-1969-403e-a742-67d590a463ae","alterego":"Bruce Banner","description":"Green giant","powers":["Strength"]},{"id":216,"name":"Thor bc05acef-514d-4521-9c92-fc5bde2bbdd8","alterego":"Thor Odinson","description":"God of Thunder","powers":["Hammer","Lightning"]},{"id":217,"name":"Capitan America 51f41353-8527-48a5-9048-1741d044680f","alterego":"Steve Rogers","description":"Updated description","powers":["Shield","Leadership"]},{"id":219,"name":"Jose Obando 1750432788774","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":220,"name":"Capitan America","alterego":"Cris","description":"Muy muy fuertote","powers":["Escudo"]},{"id":221,"name":"Prueba name","alterego":"Alt prueba","description":"Prueba des","powers":["Armor","Flight"]},{"id":222,"name":"Spider-Man-7","alterego":"Peter Parker","description":"Superh[0xc3][0xa9]roe ar[0xc3][0xa1]cnido de Marvel","powers":["Agilidad","Sentido ar[0xc3][0xa1]cnido","Trepar muros"]},{"id":225,"name":"Iron Man 1da9babc-0f1b-4ad5-a4e7-06c3c258c68a","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":226,"name":"Jose Obando 1750432896081","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":227,"name":"Prueba name1","alterego":"Alt prueba","description":"Prueba des","powers":["Armor","Flight"]},{"id":228,"name":"Iron Man6","alterego":"Tony Stark6","description":"Genius billionaire6","powers":["Armor6","Flight6"]},{"id":230,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":231,"name":"Iron Man 3244c4dc-b252-4dad-8ca9-5832a0b47887","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":232,"name":"Hulk 965fef05-74b4-4eb7-b0db-05133f03b247","alterego":"Bruce Banner","description":"Green giant","powers":["Strength"]},{"id":233,"name":"Thor 3ddb8a85-f427-4b58-ba84-8de2b7e501e4","alterego":"Thor Odinson","description":"God of Thunder","powers":["Hammer","Lightning"]},{"id":234,"name":"Capitan America b95c1248-8deb-48ea-a31a-058efb0c257e","alterego":"Steve Rogers","description":"Updated description","powers":["Shield","Leadership"]},{"id":235,"name":"Jose Obando 1750432985709","alterego""
12:08:40.326 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << ":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":237,"name":"Pedro Costa","alterego":"Pedrito Coco","description":"Un coste[0xc3][0xb1]o buena onda que le gusta la playa","powers":["Reir","Cantar","Bailar"]},{"id":238,"name":"Silvana Bentacourt","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":239,"name":"Iron Man100","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":240,"name":"Iron Man JZ","alterego":"Tony Stark JZ","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":241,"name":"Wolverine","alterego":"James Howlett","description":"Mutante con garras de adamantium y factor de curaci[0xc3][0xb3]n","powers":["Regeneraci[0xc3][0xb3]n","Garras de adamantium","Sentidos agudos","Longevidad"]},{"id":242,"name":"Iron Man JZZ","alterego":"Otro JZ","description":"Otro","powers":["Armor"]},{"id":243,"name":"Iron Man1900","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"
12:08:40.327 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << ""id":244,"name":"hugo leon","alterego":"Leons","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":246,"name":"Iron Man0","alterego":"Otro","description":"Otro","powers":["Armor"]},{"id":247,"name":"Iron Alexis","alterego":"Tony Alexis","description":"Genius billionaire soccer","powers":["Armor","Flight"]},{"id":248,"name":"Jose Obando 1750433080040","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":249,"name":"Iron Man abf120f1-71fc-4a6e-8458-603dd31e22c0","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":250,"name":"Jose Obando 1750433097032","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":251,"name":"Iron Men","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":252,"name":"Silvana Bentacourt v1","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":253,"name":"Test Character 1"
12:08:40.327 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "750433107277","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":254,"name":"Test Character 1750433107521","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":255,"name":"Test Character 1750433108172","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":256,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":258,"name":"Test Character 1750433110415","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":259,"name":"Anderson Morrillo DEV #","alterego":"Worst Automatizator ever","description":"updated description # 3cbc9b39-6821-47e7-8967-0b323215d9f5","powers":["JAVA","NET"]},{"id":260,"name":"uniqueName","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":261,"name":"Iron Man Infernal 1""
12:08:40.327 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << ","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":262,"name":"Iron Man1901","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":263,"name":"Accelerator","alterego":"Emiya Shirou ","description":"King of Babylon, and friend of Enkidou","powers":["Full Attack","Unlimited Blades","Final Hit"]},{"id":265,"name":"IronMan-","alterego":"Otro","description":"Otro","powers":["Armor"]},{"id":266,"name":"Iron Man 20fe3893-3e5e-450b-a582-29e860e97061","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":267,"name":"Hulk d9c79414-8bed-4759-8490-d1626dd0baaa","alterego":"Bruce Banner","description":"Green giant","powers":["Strength"]},{"id":268,"name":"Thor 98acbad0-52a4-41bf-9cfe-ff4e57f25317","alterego":"Thor Odinson","description":"God of Thunder","powers":["Hammer","Lightning"]},{"id":269,"name":""
12:08:40.328 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "[\r][\n]"
12:08:40.328 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "2000[\r][\n]"
12:08:40.332 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "Capitan America 159d7856-e8fc-409e-b072-e76f81547bc6","alterego":"Steve Rogers","description":"Updated description","powers":["Shield","Leadership"]},{"id":271,"name":"Iron Mans","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":273,"name":"TestBP","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":275,"name":"IronFB-","alterego":"Otro","description":"Otro","powers":["Armor"]},{"id":277,"name":"Test Character 1750433288330","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":278,"name":"Test Character 1750433288565","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":279,"name":"Test Character 1750433289216","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":280,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":282,"name":"Test Character 1750433291431","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":283,"name":"Iron Man 43e885e6-1428-4f2e-a2c9-4d3760dfa719","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":284,"name":"Iron Mon","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":285,"name":"Iron 6","alterego":"Tony 6","description":"Genius billionaire6","powers":["Alto6"]},{"id":287,"name":"Thryion Lannister","alterego":"Emiya Shirou ","description":"King of Babylon, and friend of Enkidou","powers":["Full Attack","Unlimited Blades","Final Hit"]},{"id":288,"name":"Iron Man c2cb5987-8855-46f0-b661-9006e15192c6","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":289,"name":"Chris M","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":290,"name":"Iron Man23232","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":291,"name":"Super Hero Test 4746","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":292,"name":"Iron Max","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":295,"name":"Test Character 1750433506400","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":296,"name":"Test Character 1750433506630","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":297,"name":"Test Character 1750433507077","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":298,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":299,"name":"Iron Man 22","alterego":"Tony Stark 22","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":300,"name":"El pepe","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":302,"name":"Test Character 1750433509103","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":303,"name":"Iron Man1902","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":304,"name":"Super Hero Test ","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":305,"name":"IronFB-69d7a1a7-49f9-4cf8-8f24-04ede770aa36","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":308,"name":"Jose Obando 1750433570443","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":310,"name":"Iron Man1903","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":311,"name":"Black Widow","alterego":"Natasha Romanoff","description":"Esp[0xc3][0xad]a rusa","powers":["Combate","Espionaje"]},{"id":312,"name":"Thor","alterego":"Thor Odinson","description":"Dios del trueno","powers":["Control del rayo","Super fuerza","Mjolnir"]},{"id":313,"name":"Captain America","alterego":"Steve Rogers","description":"Super soldado","powers":["Super fuerza","Escudo de Vibranium"]},{"id":314,"name":"Spider-Man 113189","alterego":"Peter Parker","description":"Superh[0xc3][0xa9]roe ar[0xc3][0xa1]cnido de Marvel","powers":["Agilidad","Sentido ar[0xc3][0xa1]cnido","Trepar muros"]},{"id":315,"name":"CohetePlus","alterego":"Cohete Plus","description":"Cohetito Plus","powers":["Armor","Flight"]},{"id":318,"name":"Super Hero Test 123","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":319,"name":"Test Character 1750433582237","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":320,"name":"Test Character 1750433582455","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":321,"name":"Test Character 1750433583360","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":322,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":323,"name":"max versatapen","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":325,"name":"Test Character 1750433585661","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":326,"
12:08:40.335 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << ""name":"Iron Man 0a790bc9-1ee6-41f5-8a31-706d23a56f87","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":328,"name":"Deadpool jusimban","alterego":"Wade Winston Wilson","description":"Mercenario, supervillano[0xe2][0x80][0x8b][0xe2][0x80][0x8b] y antih[0xc3][0xa9]roe","powers":["Immortality","Regeneration","Superhuman strength"]},{"id":329,"name":"Test Character 1750433618842","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":330,"name":"Test Character 1750433619055","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":331,"name":"Test Character 1750433619974","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":332,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":334,"name":"Test Character 1750433622270","alterego":"Test Alter Ego","description":"Test Description","powers":"
12:08:40.335 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "["Test Power 1","Test Power 2"]},{"id":335,"name":"GatunoNeptuno","alterego":"Naranjoso","description":"Crazy cat","powers":["Meow","Cry in desperation"]},{"id":336,"name":"Test Character 1750433629991","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":337,"name":"Test Character 1750433630210","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":338,"name":"Test Character 1750433630809","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":339,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":341,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":342,"name":"Iron Man tst","alterego":"Tony Stark tst","description":"Genius billionaire tst","powers":["Armor tst","Flight tst"]},{"id":343,"name":"CohetePlus1","alterego":"Coh"
12:08:40.336 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "ete Plus","description":"Cohetito Plus","powers":["Armors","Flight"]},{"id":344,"name":"Iron Man God","alterego":"Tony Stark","description":"Genio, millonario, playboy, fil[0xc3][0xa1]ntropo","powers":["Armadura","Inteligencia"]},{"id":347,"name":"Spider-Man1","alterego":"Peter Parker1","description":"Friendly neighborhood Spider-Man falso","powers":["Wall-c[\r][\n]"
12:08:40.336 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "2000[\r][\n]"
12:08:40.336 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "rawling","Spider-sense"]},{"id":348,"name":"CasaPlus1","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":349,"name":"Test Character 1750433708796","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":350,"name":"Test Character 1750433709031","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":351,"name":"UpdateTest_71299deb_Updated","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":352,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":354,"name":"Test Character 1750433710980","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":355,"name":"Iron Man Infernal Karate -e2462451-d7f9-4eb5-9502-2f202828f715","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":356,"name":"Test Character 1750433733222","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":357,"name":"Test Character 1750433733461","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":358,"name":"Test Character 1750433733906","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":359,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":362,"name":"Jose Obando 1750433737747","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":365,"name":"Deadpool jusimban2","alterego":"Wade Winston Wilson","description":"Mercenario, supervillano[0xe2][0x80][0x8b][0xe2][0x80][0x8b] y antih[0xc3][0xa9]roe","powers":["Immortality","Regeneration","Superhuman strength"]},{"id":366,"name":"Iron Man Superior","alterego":"Tony Stark","description":"Genio, millonario, playboy, fil[0xc3][0xa1]ntropo","powers":["Armadura","Inteligencia"]},{"id":367,"name":"Test Character 1750433753944","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":368,"name":"Test Character 1750433754176","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":369,"name":"Test Character 1750433754632","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":370,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":372,"name":"Test Character 1750433756102","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":373,"name":"Iron Man d53f8847-99c4-4496-a60d-7fb3e7c9c9a9","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":374,"name":"Iron Man 4711","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":375,"name":"Test Character 1750433774349","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":376,"name":"Iron Manchs","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":377,"name":"Test Character 1750433774586","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":378,"name":"Test Character 1750433775033","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":379,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":381,"name":"Test Character 1750433776511","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":382,"name":"Iron Man1904","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":383,"name":"Deadpool jusimban3","alterego":"Wade Winston Wilson","description":"Mercenario, supervillano[0xe2][0x80][0x8b][0xe2][0x80][0x8b] y antih[0xc3][0xa9]roe","powers":["Immortality","Regeneration","Superhuman strength"]},{"id":384,"name":"CohetePlus2","alterego":"Cohete Plus","description":"Cohetito Plus","powers":["Armors","Flight"]},{"id":385,"name":"Jose Obando 1750433795597","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":386,"name":"Iron Man 2e68e284-dd9d-4435-80b2-6481d8e5bac8","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":387,"name":"Iron Man Infernal Karate -5ba06ebc-c345-4fce-98d3-59ef4568efce","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":388,"name":"Test Character 1750433797315","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":389,"name":"Test Character 1750433797554","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":390,"name":"Test Character 1750433798007","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":391,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":393,"name":"Test Character 1750433799483","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":394,"name":"Iron Man tst2","alterego":"Tony Stark tst","description":"Genius billionaire tst","powers":["Armor tst","Flight tst"]},{"id":395,"name":"Man","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":396,"name":"Iron Man TestBP","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":398,"name":"Diego2 Iron Man","alterego":"Tony Stark Diego","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":399,"name":"Iron Man test - aandino","alterego":"Tony Stark aandino","description":"Genius billionaire - aandino","powers":["Armor","Flight","unity","c#"]},{"id":401,"name":"Test Character 1750433836144","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":402,"name":"Test Character 1750433836374","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":403,"name":"Test Character 1750433836808","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":404,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":406,"name":"Test Character 1750433838281","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":407,"name":"Test Character 1750433845402","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":408,"name":"Test Character 1750433845637","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":409,"name":"Test Character 1750433846080","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":410,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":411,"name":"Spider-Man1-cb88af9d-9e1d-4965-9a89-77df954d9e16","alterego":"Peter Parker1","description":"Friendly neighborhood Spider-Man falso","powers":["Wall-crawling","Spider-sense"]},{"id":413,"name":"Test Character 1750433847614","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":414,"name":"Cohete"
12:08:40.336 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "Plus3","alterego":"Cohete Plus","description":"Cohetito Plus","powers":["Armors","Flight"]},{"id":415,"name":"Spiderman Test Karate","alterego":"Peter Parker","description":"H[0xc3][0xa9]roe ar[0xc3][0xa1]cnido de Marvel","powers":["agilidad","sentido ar[0xc3][0xa1]cnido","trepar paredes"]},{"id":416,"name":"Test Character 1750433855427","alterego":"Test Alter Ego","description":"Test [\r][\n]"
12:08:40.336 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "2000[\r][\n]"
12:08:40.337 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "Description","powers":["Test Power 1","Test Power 2"]},{"id":417,"name":"Iron Manchss","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":418,"name":"Test Character 1750433855662","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":419,"name":"Test Character 1750433856281","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":420,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":422,"name":"Test Character 1750433858961","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":423,"name":"ACC","alterego":"AGCC","description":"Genius billionaire and philanthropist","powers":["Armor","Flight"]},{"id":424,"name":"Iron Man Infernal Karate -1e7b39d2-3f63-4df9-8c8b-a8122365e368","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":425,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":426,"name":"Iron Man1905","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":428,"name":"Anderson Morrillo DEV # 54ce83f6-bbcb-4137-bffe-78aefa52fe40","alterego":"Worst Automatizator ever","description":"El Dev Humilde","powers":["JAVA","NET"]},{"id":429,"name":"IronFbb5a60f02-3e76-4d54-8277-5e0841ef8b8f","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":430,"name":"Iron Man66","alterego":"Otro","description":"Otro","powers":["Armor"]},{"id":432,"name":"Test Character 1750433899423","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":433,"name":"Test Character 1750433899666","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":434,"name":"Test Character 1750433900743","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":435,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":437,"name":"Test Character 1750433903439","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":438,"name":"Carmita","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":439,"name":"Iron Man1906","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":440,"name":"Anderson Morrillo DEV # 3969a194-06d5-49a9-9092-733f4e1c8281","alterego":"Worst Automatizator ever","description":"El Dev Humilde","powers":["JAVA","NET"]},{"id":441,"name":"Ghost Rider JC Updated","alterego":"Ghost Rider JC Updated","description":"Demon Updated","powers":["Fire","Punishing gaze"]},{"id":442,"name":"Jose Obando 1750433957284","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":443,"name":"Iron Man Rafael","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":444,"name":"Iron Marco","alterego":"Marco Jativa","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":446,"name":"Javier Simbana","alterego":"All","description":"Superpower","powers":["Teletransportacion","Jugar futbol"]},{"id":448,"name":"Iron Man a63bcaa0-8085-4566-b0cf-8f5e1b0c5c6c","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":449,"name":"Iron Man 7631688d","alterego":"Tony Stark","description":"Genius, billionaire, playboy, philanthropist. Wears a suit of armor.","powers":["Armor","Flight"]},{"id":450,"name":"Iron Man eb0e8d97","alterego":"Tony Stark","description":"Genius, billionaire, playboy, philanthropist. Wears a suit of armor.","powers":["Armor","Flight"]},{"id":451,"name":"Iron Man cb1b3f87","alterego":"Tony Stark","description":"Genius, billionaire, playboy, philanthropist. Wears a suit of armor.","powers":["Armor","Flight"]},{"id":452,"name":"Iron Man 1df3c71a","alterego":"Tony Stark","description":"Genius, billionaire, playboy, philanthropist. Wears a suit of armor.","powers":["Armor","Flight"]},{"id":453,"name":"Green Goblin","alterego":"Ned","description":"Student","powers":["Armor","Flight"]},{"id":454,"name":"Diana1750433951","alterego":"kcatucuamba","description":"A genius programmer and a superhero","powers":["PHP","JAVA"]},{"id":455,"name":"Iron Man Infernal Karate -41787326-1671-4354-95fb-5b06971d3883","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":458,"name":"Iron Man Test","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":459,"name":"Iron Man 4678f266-a460-48f1-ae8e-d927dad2bd16","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":460,"name":"Iron Man #(randomNum)","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":461,"name":"Alexis Name 3 Updated","alterego":"Alexis Alterego 3 Updated","description":"Alexis Description 3 Updated","powers":["Armor","Flight"]},{"id":463,"name":"Iron Man1907","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":464,"name":"Spider-Man-fda525ee-03b4-4a9a-bac2-b5b69f49e7a3","alterego":"Peter Parker","description":"Friendly neighborhood Spider-Man","powers":["Wall-crawling","Spider-sense"]},{"id":465,"name":"spiderman.name","alterego":"Otro","description":"Otro","powers":["Armor"]},{"id":466,"name":"IronFb57bd5b58-ae3d-4373-acfa-2919bd800e0e","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":467,"name":"Iron Man b6d81","alterego":"Otro","description":"Otro","powers":["Armor"]},{"id":468,"name":"Javier Simbana 1","alterego":"All jsi","description":"Superpower","powers":["Teletransportacion","Jugar futbol"]},{"id":469,"name":"Iron Man4","alterego":"Otro","description":"Otro","powers":["Armor"]},{"id":470,"name":"Bob1750434058","alterego":"kcatucuamba","description":"A genius programmer and a superhero","powers":["PHP","JAVA"]},{"id":471,"name":"IronMan_072abe9d-e0a2-4650-88bf-273284a64666","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":472,"name":"Chris M1","alterego":"Christian Muyon","description":"Programmer and Karate enthusiast","powers":["Intelligence","String"]},{"id":473,"name":"Iron Man 4c592141-80e1-4206-9a8b-06c0bcc1b363","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":474,"name":"Green Goblin 2","alterego":"Ned","description":"Student","powers":["Armor","Flight"]},{"id":475,"name":"Iron Man1908","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":476,"name":"Iron Man 56","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":478,"name":"Iron Man tst23","alterego":"Tony Stark tst","description":"Genius billionaire tst","powers":["Armor tst","Flight tst"]},{"id":479,"name":"Iron Man Infernal Karate -b4bb865d-a131-4ddd-b275-d6a0554308a5","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":481,"name":"Iron Mansanchez","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":482,"name":"DiegoCambiado3 Iron Man","alterego":"Tony Stark Diego","description":"Geniu"
12:08:40.408 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "s billionaire","powers":["Armor","Flight"]},{"id":483,"name":"Character-ef2c4b87","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":484,"name":"Character-e9d66f0e","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":485,"name":"Character-ad7b4a88","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":486,"name":"Character-ac632283","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":487,"name":"IronFba388ed7d-d28b-4d08-b9c2-6"
12:08:40.409 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "[\r][\n]"
12:08:40.409 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "2000[\r][\n]"
12:08:40.409 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "834d477af00","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":488,"name":"Iron Man9","alterego":"Otro","description":"Otro","powers":["Armor"]},{"id":490,"name":"Iron Man 91e6d9ac","alterego":"Tony Stark","description":"Genius, billionaire, playboy, philanthropist. Wears a suit of armor.","powers":["Armor","Flight"]},{"id":491,"name":"Iron Man 0f671a8a","alterego":"Tony Stark","description":"Genius, billionaire, playboy, philanthropist. Wears a suit of armor.","powers":["Armor","Flight"]},{"id":492,"name":"Iron Man 35a2388e","alterego":"Tony Stark","description":"Genius, billionaire, playboy, philanthropist. Wears a suit of armor.","powers":["Armor","Flight"]},{"id":493,"name":"Iron Man 32ebadfa","alterego":"Tony Stark","description":"Genius, billionaire, playboy, philanthropist. Wears a suit of armor.","powers":["Armor","Flight"]},{"id":494,"name":"Anderson Morrillo DEV # aee869ff-edc7-4235-96a3-a3bd18fe402a","alterego":"Worst Automatizator ever","description":"El Dev Humilde","powers":["JAVA","NET"]},{"id":495,"name":"Anderson Morrillo DEV #","alterego":"Worst Automatizator ever","description":"El Dev Humilde","powers":["JAVA","NET"]},{"id":497,"name":"Iron Man 5a56b4d8","alterego":"Tony Stark","description":"Genius, billionaire, playboy, philanthropist. Wears a suit of armor.","powers":["Armor","Flight"]},{"id":498,"name":"Iron Man 2f038a75","alterego":"Tony Stark","description":"Genius, billionaire, playboy, philanthropist. Wears a suit of armor.","powers":["Armor","Flight"]},{"id":499,"name":"Iron Man 5454745d","alterego":"Tony Stark","description":"Genius, billionaire, playboy, philanthropist. Wears a suit of armor.","powers":["Armor","Flight"]},{"id":504,"name":"Super Madre","alterego":"Luz Toaquiza","description":"Puede hacer varias cosas","powers":["Amor","Comprensi[0xc3][0xb3]n"]},{"id":505,"name":"DiegoCambiado3 Iron Man","alterego":"Tony Stark Diego","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":506,"name":"Captain America 1750434216603","alterego":"Steve Rogers","description":"Super soldier with enhanced strength and agility","powers":["Super Strength","Enhanced Agility","Vibranium Shi"
12:08:40.409 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "eld"]},{"id":507,"name":"Hulk Supremo 1723463053 1750434217197","alterego":"Bruce Banner","description":"Scientist with the ability to transform into a giant green monster","powers":["Super Strength","Regeneration","Durability"]},{"id":508,"name":"Black Widow 1750434217635","alterego":"Natasha Romanoff","description":"Skilled spy and martial artist","powers":["Combat Expert","Espionage","Tactical Intelligence"]},{"id":509,"name":"Iron Man tst233","alterego":"Tony Stark tst","description":"Genius billionaire tst","powers":["Armor tst","Flight tst"]},{"id":510,"name":"Thor 1750434218264","alterego":"Thor Odinson","description":"God of Thunder from Asgard","powers":["Weather Control","Mjolnir","Superhuman Strength"]},{"id":511,"name":"Captain America 1750434218953","alterego":"Steve Rogers","description":"Super soldier with enhanced strength and agility","powers":["Super Strength","Enhanced Agility","Vibranium Shield"]},{"id":512,"name":"Spider-Man-02368906-8b2b-4e16-80b0-71dd5d2f5c4d","alterego":"Peter Parker","
12:08:40.409 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << ""description":"Friendly neighborhood Spider-Man","powers":["Wall-crawling","Spider-sense"]},{"id":513,"name":"Iron Man 7fc9b5b3-d7c2-462b-a1ee-116cef0932da","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":516,"name":"Chris Muyon xd","alterego":"Christian Muyon","description":"Programmer and Karate enthusiast","powers":["Intelligence","String"]},{"id":517,"name":"DiegoCambiado3 Iron Man","alterego":"Tony Stark Diego","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":518,"name":"Iron Man1909","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":519,"name":"Iron Man58","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":520,"name":"Ironasdsadsa Man","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":521,"name":"Iron Man 9619","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":523,""
12:08:40.410 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "name":"Iron Man 3378","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":524,"name":"Iron Man 5092","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":525,"name":"Iron Man 563","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":526,"name":"Iron Man 2753","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":527,"name":"Iron Man 202","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":529,"name":"Iron Man 9862","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":530,"name":"the winter soldier",""
12:08:40.410 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "alterego":"Stalin Condolo","description":"Un soldado del invierno","powers":["Brazo de hierro","metralladora"]},{"id":531,"name":"Iron ManSanchez2","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":532,"name":"Jose Obando 1750434296881","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":533,"name":"Sonic-27e58e7b-aee1-43d5-b47f-31b79ab9ef7a","alterego":"Super sonico","description":"Erizo azul con super velocidad","powers":["velocidad","agilidad","resistencia"]},{"id":534,"name":"Iron Man 9ce51371-d1a9-4d09-9549-f286b5e8dc82","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":536,"name":"Silvana Bentacourt v1-1750434339544","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":537,"name":"Personaje actualizado-1750434343376","alterego":"Tony Stark","description":"Genius billionaire test","powers":["Armor","Flight"]},{"id":539,"name":"Iron Man "
12:08:40.410 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "Superior-794","alterego":"Tony Stark","description":"Genio, millonario, playboy, fil[0xc3][0xa1]ntropo","powers":["Armadura","Inteligencia"]},{"id":540,"name":"Hero_eb7fb2b3-489f-435d-8977-06daf4295252","alterego":"Nuevo Alterego","description":"Nuevo personaje","powers":["Poder1"]},{"id":541,"name":"Hero_98d318cb-59d0-4154-9032-ebe5943ae31a","alterego":"Otro","description":"Otro","powers":["Poder2"]},{"id":542,"name":"Iron Man TestBP1","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":543,"name":"Iron Man 18ca4000-009f-4d19-9c87-fc0de9768e13","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":545,"name":"Alexis Name 2 Updated","alterego":"Alexis Alterego 2 Updated","description":"Alexis Description 2 Updated","powers":["Armor","Flight"]},{"id":546,"name":"Iron Man1910","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":547,"name":"Alexis Name 3","alterego":" Alexis Alterego 3","description""
12:08:40.410 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << ":" Alexis Description 3","powers":["Armor","Flight"]},{"id":550,"name":"nombreCreate","alterego":"Alt prueba","description":"Prueba des","powers":["Armor","Flight"]},{"id":551,"name":"Character","alterego":"Hero","description":"A character","powers":["strength"]},{"id":552,"name":"Jose Obando 1750434393499","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":554,"name":"jchuldeb","alterego":"Fernando Chulde","description":"Editar descripci[0xc3][0xb3]n","powers":["Armor","Flight"]},{"id":555,"name":"Iron Man 1750434398028","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":556,"name":"Iron Man Test3 1750434398378","alterego":"Tony Stark","description":"Genius billionai"
12:08:40.412 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "re","powers":["Armor","Flight"]},{"id":557,"name":"Iron Man Test5 1750434399272","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":558,"name":"Iron Man Test7 1750434400132","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":560,"name":"Spider-Man Test11 1750434402397","alterego":"Peter Parker","description":"[\r][\n]"
12:08:40.412 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "2000[\r][\n]"
12:08:40.413 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "Superh[0xc3][0xa9]roe ar[0xc3][0xa1]cnido","powers":["Agilidad","Sentido ar[0xc3][0xa1]cnido","Trepar muros"]},{"id":561,"name":"Captain America Test11 1750434402397","alterego":"Steve Rogers","description":"S[0xc3][0xba]per soldado","powers":["Fuerza","Escudo","Liderazgo"]},{"id":563,"name":"IronMan-1f93da34-ad9a-4dfa-bb94-45ae015cb268","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":564,"name":"Iron Man1911","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":565,"name":"Iron Man 9597c7ae-c86a-4a19-8070-00c9aeabd823","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":566,"name":"Iron Man aa60b152-bc11-4c5f-8de9-7db12708385b","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":567,"name":"Iron Maiden 3","alterego":"Tony Mayor","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":568,"name":"Iron Marco1","alterego":"Marco Jativa","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":569,"name":"Iron Man-3a282d5c-35e9-4f74-94f4-22d383a00024","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":570,"name":"Iron Man 982e99df-678a-47e0-88fa-637de0b6d649","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":571,"name":"XIron ManX","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":572,"name":"Iron Man 16897711","alterego":"Tony Stark","description":"Genius, billionaire, playboy, philanthropist. Wears a suit of armor.","powers":["Armor","Flight"]},{"id":573,"name":"Iron Man 83ed4d75","alterego":"Tony Stark","description":"Genius, billionaire, playboy, philanthropist. Wears a suit of armor.","powers":["Armor","Flight"]},{"id":574,"name":"Iron Man 3904c383","alterego":"Tony Stark","description":"Genius, billionaire, playboy, philanthropist. Wears a suit of armor.","powers":["Armor","Flight"]},{"id":575,"name":"Iron Man abf03b68","alterego":"Tony Stark","description":"Genius, billionaire, playboy, philanthropist. Wears a suit of armor.","powers":["Armor","Flight"]},{"id":577,"name":"Spider-Man-5e6c5350-ad12-41f5-9358-687c73bd9279","alterego":"Peter Parker","description":"Friendly neighborhood Spider-Man","powers":["Wall-crawling","Spider-sense"]},{"id":579,"name":"milmoral9","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":580,"name":"Iron Man 63","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":581,"name":"Iron Man 4731","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":582,"name":"Iron Man 2233","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":583,"name":"Iron Man 363","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":584,"name":"nombre","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":585,"name":"Iron Man 8265","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":591,"name":"Iron Marck","alterego":"Marco Jativa","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":592,"name":"Chris Muyon 42146","alterego":"Christian Muyon","description":"Programmer and Karate enthusiast","powers":["Intelligence","String"]},{"id":594,"name":"Capitan America Negrito 2","alterego":"Un nombre Random","description":"Personaje para prueba temporal","powers":["Red","Blue"]},{"id":595,"name":"Iron Man 30865d8b-f4d1-4d3a-8da9-61065a3d9e1b","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":597,"name":"Iron Man 1195","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":598,"name":"Iron Man 2555","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":599,"name":"Iron Man 226","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":600,"name":"Iron Man 3826","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":602,"name":"Iron Man 2839","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":605,"name":"Kramerx","alterego":"Updated Hero","description":"Updated description","powers":["updated power"]},{"id":606,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":607,"name":"I2","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":608,"name":"Silvana Bentacourt v1-1750434549919","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":609,"name":"Jose Castle","alterego":"Super Pichincha","description":"Genius Developer","powers":["Armor","Flight","Super Strength","Intelligence"]},{"id":610,"name":"UpdateTest_c31bf866_Updated","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":611,"name":"jose","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":613,"name":"Iron Man-1e2ab87a-d0d2-4656-913a-c4279d3bfa6f","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":614,"name":"Iron Man 5d59a582-166c-4720-b20d-cec95d9982f0","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":615,"name":"Jose Obando 1750434583471","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":616,"name":"milmoral2","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":617,"name":"milmoral3","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":618,"name":"Iron Man Superior-4235","alterego":"Tony Stark","description":"Genio, millonario, playboy, fil[0xc3][0xa1]ntropo","powers":["Armadura","Inteligencia"]},{"id":621,"name":"Iron Man v2","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":623,"name":"IronMan-e279bc88-b3e5-4731-9a82-0fbce36ad6e3","alterego":"Santiago Sanchez","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":624,"name":"Test Character 1750434618","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":627,"name":"CohetePlus6","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":629,"name":"Spider-Man-New","alterego":"Peter Parker","description":"Superh[0xc3][0xa9]roe ar[0xc3][0xa1]cnido de Marvel","powers":["Agilidad","Sentido ar[0xc3][0xa1]cnido","Trepar muros"]},{"id":630,"name":"Captain America 1750434654993","alterego":"Steve Rogers","description":"Super soldier with enhanced strength and agility","powers":["Super Strength","Enhanced Agility","Vibranium Shield"]},{"id":631,"name":"Hulk Supremo 1723463053 1750434655581","alterego":"Bruce Banner","description":"Scientist with the ability to transform into a giant green monster","powers":["Super Strength","Regeneration","Durability"]},{"id":632,"name":"Black Widow 1750434655839","alterego":"Natasha Romanoff","description":"Skilled spy and martial artist","powers":["Combat Expert","Espionage","Tactical Intelligence"]},{"id":633,"name":"Thor 1750434656329","alterego":"Thor Odinson","description":"God of Thunder from Asgard","powers":["Weather Control","Mjolnir","Superhuman Strength"]},{"id":634,"name":"Captain America 1750434656777","alterego":"Steve Rogers","description":"Super soldier with enhanced strength and agility","powers":["Super Strength","Enhanced Agility","Vibran"
12:08:40.413 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "ium Shield"]},{"id":635,"name":"Iron Man dea5b9c1-049a-4cc7-93b0-f46351816106","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":636,"name":"Iron Man fd4eebef-5bc2-440d-aaab-761cf21cfb05","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":637,"name":"Iron Marck10","alterego":"Marco Jativa","description":"Genius Multi [\r][\n]"
12:08:40.413 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "2000[\r][\n]"
12:08:40.413 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "billionaire","powers":["Armor","Flight"]},{"id":641,"name":"Iron Man-e60af0ac-255a-4fe3-bfb4-438b4aa31007","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":642,"name":"Iron Man Superior-3419","alterego":"Tony Stark","description":"Genio, millonario, playboy, fil[0xc3][0xa1]ntropo","powers":["Armadura","Inteligencia"]},{"id":643,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":645,"name":"IronFbb697fe07-575a-4809-be2c-5a8ca55a9e42","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":646,"name":"Silvana Bentacourt v1-1750434702372","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":649,"name":"HeroeConsulta_5dc7aabc-c03f-48f8-a0c5-dcac3b97293c","alterego":"AlteregoConsulta","description":"Consulta","powers":["Consulta"]},{"id":651,"name":"Hero_5bc6275a-7bcd-4c58-8c4d-e5b5ffa7e8ca","alterego":"Nuevo Alterego","description":"Nuevo personaje","powers":["Poder1"]},{"id":652,"name":"Hero_f5cfbdf0-c152-402f-8af1-13f5843bfe6f","alterego":"Otro","description":"Otro","powers":["Poder2"]},{"id":653,"name":"HeroeActualizado","alterego":"AlteregoActualizado","description":"Actualizado","powers":["PoderActualizado"]},{"id":654,"name":"Vision Woman 221b89","alterego":"All jsi","description":"Superpower","powers":["Teletransportacion","Jugar futbol"]},{"id":655,"name":"anamcias","alterego":"anamcias","description":"Developer","powers":["Angular","Karate"]},{"id":657,"name":"Captain America 1750434732444","alterego":"Steve Rogers","description":"Super soldier with enhanced strength and agility","powers":["Super Strength","Enhanced Agility","Vibranium Shield"]},{"id":658,"name":"Hulk 1750434733011","alterego":"Bruce Banner","description":"Scientist with the ability to transform into a giant green monster","powers":["Super Strength","Regeneration","Durability"]},{"id":659,"name":"Black Widow 1750434733259","alterego":"Natasha Romanoff","description":"Skilled spy and martial artist","powers":["Combat Expert","Espionage","Tactical Intelligence"]},{"id":660,"name":"Thor 1750434733714","alterego":"Thor Odinson","description":"God of Thunder from Asgard","powers":["Weather Control","Mjolnir","Superhuman Strength"]},{"id":661,"name":"Captain America 1750434734194","alterego":"Steve Rogers","description":"Super soldier with enhanced strength and agility","powers":["Super Strength","Enhanced Agility","Vibranium Shield"]},{"id":662,"name":"Silvana Bentacourt v1-1750434738344","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":663,"name":"Black Panther","alterego":"T'Challa","description":"Rey de Wakanda","powers":["Fuerza","Tecnolog[0xc3][0xad]a"]},{"id":664,"name":"Thanor","alterego":"Jack Doson","description":"Genius Power","powers":["Armor","Flight"]},{"id":665,"name":"Iron Man Test 1750434749684","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":666,"name":"Iron Man-ca8ae162-fa01-4994-97a8-b917491af703","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":668,"name":"Blue Marvel","alterego":"Ad[0xc3][0xa1]n Bernard Brashear","description":"Cientifico","powers":["living reactor"]},{"id":669,"name":"Iron Man Superior-8548","alterego":"Tony Stark","description":"Genio, millonario, playboy, fil[0xc3][0xa1]ntropo","powers":["Armadura","Inteligencia"]},{"id":670,"name":"JaHcOiADzl","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":671,"name":"IronMan-1ef5b5f9-7c9c-4fe1-b28b-6762a589fe27","alterego":"Santiago Sanchez","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":672,"name":"Iron Man 8ad91d8d-f4ae-4470-a041-dbbc9fc9291d","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":673,"name":"Carlos Arcentales","alterego":"Developer","description":"Computer 24/7","powers":["Si"
12:08:40.415 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "tting all day"]},{"id":674,"name":"Spider-Man Test NN","alterego":"Peter Parker","description":"Superh[0xc3][0xa9]roe ar[0xc3][0xa1]cnido de Marvel","powers":["Agilidad","Sentido ar[0xc3][0xa1]cnido","Trepar muros"]},{"id":675,"name":"andres calamaro","alterego":"calamardo","description":"cantante","powers":["aaaa","Flibbbbbght"]},{"id":676,"name":"Sonic-f30f3f75-0ae5-47b5-9cf2-65616ca4502b","alterego":"Super sonico","description":"Erizo azul con super velocidad","powers":["velocidad","agilidad","resistencia"]},{"id":678,"name":"CohetePlus4","alterego":"Cohete Plus","description":"Cohetito Plus","powers":["Armors","Flight"]},{"id":680,"name":"Iron Man d06400bc-3bbf-48eb-89e5-32ab928e76b7","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":681,"name":"Iron Marck11","alterego":"Marco Jativa","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":682,"name":"Spider-Man-New-1","alterego":"Peter Parker","description":"Superh[0xc3][0xa9]roe ar[0xc3][0xa1]cnido de Marvel","powers":["Agilidad","Sentido ar[0xc3][0xa1]cn"
12:08:40.415 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "ido","Trepar muros"]},{"id":683,"name":"Anderson Morrillo DEV # 7fe66a00-8ffd-4853-9c96-a274c6067884","alterego":"Worst Automatizator ever","description":"El Dev Humilde","powers":["JAVA","NET"]},{"id":684,"name":"Iron Man Superior-7098","alterego":"Tony Stark","description":"Genio, millonario, playboy, fil[0xc3][0xa1]ntropo","powers":["Armadura","Inteligencia"]},{"id":688,"name":"Sonic-bf563f0f-fb4b-4254-8cf8-0ab44728b0c8","alterego":"Super sonico","description":"Erizo azul con super velocidad","powers":["velocidad","agilidad","resistencia"]},{"id":689,"name":"Silver surfer","alterego":"Silver","description":"Humanoid Alien","powers":["volar","fuerza"]},{"id":690,"name":"I2_73a3f8a4-94ff-4ff2-8a56-a4132bca6948","alterego":"Steve Rogers","description":"Super soldier","powers":["Super Strength","Shield"]},{"id":691,"name":"Iron Man1913","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":692,"name":"Jose Obando 1750434857758","alterego":"Tony Stark","description":"Genius billion"
12:08:40.415 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "aire","powers":["Armor","Flight"]},{"id":693,"name":"Anderson Morrillo DEV # a8d0f72e-508f-4c00-afc1-0d416e911fec","alterego":"Worst Automatizator ever","description":"El Dev Humilde","powers":["JAVA","NET"]},{"id":695,"name":"Iron Man-1750434870231","alterego":"Tony Stark","description":"Updated description 1750434871868","powers":["Armor","Flight"]},{"id":696,"name":"Iron Man-1750434873814","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":697,"name":"Wonder Lord 45cc01","alterego":"All jsi","description":"Superpower","powers":["Teletransportacion","Jugar futbol"]},{"id":698,"name":"Iron Man-1750434877435","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":699,"name":"\"; DROP TABLE characters; --","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":701,"name":"Iron Man Infernal Karate -c83db201-9f36-4ffa-8b65-69cf1ed417fd","alterego":"Tony Stark","description":"Genius billionaire"
12:08:40.416 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "","powers":["Armor","Flight"]},{"id":702,"name":"Iron Man 1750434916663","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":703,"name":"CohetePlus7","alterego":"Cohete Plus","description":"Cohetito Plus","powers":["Armors","Flight"]},{"id":705,"name":"Iron Man 71cc6bdc","alterego":"Tony Stark","description":"Genius, billionaire, playboy, philanthropist. Wears a suit of armor.","powers":["Armor","Flight"]},{"id":706,"name":"Iron Man abc73c30","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":708,"name":"Iron Man 10b8e6d2","alterego":"Tony Stark","description":"Genius, billionaire, playboy, philanthropist. Wears a suit of armor.","powers":["Armor","Flight"]},{"id":709,"name":"Spider-Man-fi","alterego":"Peter Parker","description":"Superh[0xc3][0xa9]roe ar[0xc3][0xa1]cnido de Marvel","powers":["Agilidad","Sentido ar[0xc3][0xa1]cnido","Trepar muros"]},{"id":710,"name":"Iron Man 7ebf883d-acd4-49ab-90f9-80925b6eb69c","alterego":"Tony Stark","description":"Ge"
12:08:40.416 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "nius billionaire","powers":["Armor","Flight"]},{"id":711,"name":"Captain Strange bbd0f3","alterego":"A[\r][\n]"
12:08:40.417 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "2000[\r][\n]"
12:08:40.417 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "ll jsi","description":"Superpower","powers":["Teletransportacion","Jugar futbol"]},{"id":712,"name":"Castleman","alterego":"Super castle","description":"Genius Dev","powers":["dev","qa"]},{"id":713,"name":"dSAROzEjqI","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":714,"name":"Iron Man_ebde376d-72ed-44a9-80e7-3c09ac314089","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":715,"name":"Iron Marck13","alterego":"Marco Jativa","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":716,"name":"Iron Man 1750434961700","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":717,"name":"Iron Man Superior-2063","alterego":"Tony Stark","description":"Genio, millonario, playboy, fil[0xc3][0xa1]ntropo","powers":["Armadura","Inteligencia"]},{"id":719,"name":"I2_73a3f8a4-94ff-4ff2-8a56-a4132bca6949","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":720,"name":"Iron Man Test Armando","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":721,"name":"ErrorServer500","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":722,"name":"Iron Man Test 1750434992629","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":723,"name":"Carlos Arcentales1","alterego":"Developer","description":"Computer 24/7","powers":["Sitting all day"]},{"id":724,"name":"Jose Obando ","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":728,"name":"Hero_a6ddccea-e0b1-44a9-a3ca-71e19ebb4ee5","alterego":"Nuevo Alterego","description":"Nuevo personaje","powers":["Poder1"]},{"id":729,"name":"Hero_17ea9470-e103-4144-a4ca-000ff8bcde5f","alterego":"Otro","description":"Otro","powers":["Poder2"]},{"id":731,"name":"Test Character 1750435001668","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":732,"name":"HeroeActualizado","alterego":"AlteregoActualizado","description":"Actualizado","powers":["PoderActualizado"]},{"id":733,"name":"Test Character 1750435001909","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":735,"name":"Test Character 1750435002972","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":736,"name":"Iron Man-1750435002424","alterego":"Tony Stark","description":"Updated description 1750435003911","powers":["Armor","Flight"]},{"id":737,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":739,"name":"Test Character 1750435005711","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":740,"name":"Iron Man d79feef5-ee40-47d4-a3e0-ce8335d60fb6","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":741,"name":"Super Hero Test 4181","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":742,"name":"Iron Man-1750435005758","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":743,"name":"Jose Obando 1750435006315","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":744,"name":"UIFLGPKgwd","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":745,"name":"Super Hero Test 9203","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":746,"name":"Black Widow e0cecd","alterego":"All jsi","description":"Superpower","powers":["Teletransportacion","Jugar futbol"]},{"id":747,"name":"Iron Man-1750435009457","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":749,"name":"Iron Man ac65cd4e-f8ee-4e20-af62-807e7c6438cf","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":750,"name":"Chris Muyon 91518","alterego":"Christian Muyon","description":"Programmer and Karate enthusiast","powers":["Intelligence","String"]},{"id":751,"name":"kramerx","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":753,"name":"Capitan America Negrito 3","alterego":"Un nombre Random para el negrito 3","description":"Personaje para prueba temporal No me borren porfas","powers":["Red","Blue"]},{"id":754,"name":"Spiderman","alterego":"Peter Parker","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":755,"name":"Iron Manson","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":756,"name":"Iron Man Infernal Karate -d1835d5f-3cbd-43e6-bd76-dc54277ae3d1","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":757,"name":"Thor aaf428f9-7f59-4314-b8dd-b2c8285ef0c4","alterego":"Thor","description":"Dios del trueno,","powers":["Speed","Strength"]},{"id":758,"name":"Iron Man Superior-7283-105634","alterego":"Tony Stark","description":"Genio, millonario, playboy, fil[0xc3][0xa1]ntropo","powers":["Armadura","Inteligencia"]},{"id":760,"name":"Iron Man 04f157cd-fed9-42db-8154-452dfee7878c","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":762,"name":"Test Character 1750435051243","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":763,"name":"Test Character 1750435051489","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":764,"name":"Test Character 1750435052509","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":765,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":766,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":768,"name":"Test Character 1750435055188","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":769,"name":"Iron Man 1750435054915","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":770,"name":"I2_af1ef636-6b7a-4753-9c3c-3193eddc46ce","alterego":"Steve Rogers","description":"Super soldier","powers":["Super Strength","Shield"]},{"id":771,"name":"Iron Man ebbcd79c-585d-4589-a191-41738c3092dd","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":772,"name":"Spider Boby 2","alterego":"Boby","description":"Student","powers":["Armor","Flight"]},{"id":773,"name":"Iron Man-8448985f-b485-41e9-a251-30c84c558927","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":774,"name":"Iron Man-1750435078065","alterego":"Tony Stark","description":"Updated description 1750435079527","powers":["Armor","Flight"]},{"id":776,"name":"Iron Man-1750435081593","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":777,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":779,"name":"Iron Man-1750435085457","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":781,"name":"IronFb60a86288-3a35-4318-8c1e-073df5c90941","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":782,"name":"Iron Man_4238bc3a-d63a-42d6-8efd-4bfe2dad81d5","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":783,"name":"Iron Man Test 1750435097303","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":786,"name":"Jose Obando 1750435106152","alterego":"
12:08:40.417 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << ""Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":787,"name":"Test Character [\r][\n]"
12:08:40.417 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "2000[\r][\n]"
12:08:40.418 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "1750435106752","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":788,"name":"Test Character 1750435106996","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":789,"name":"Test Character 1750435108042","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":790,"name":"Super Hero Test 9086","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":791,"name":"Spider Boby 3","alterego":"Boby","description":"Student","powers":["Armor","Flight"]},{"id":792,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":793,"name":"IronMan-126b29a8-0b98-4414-9242-f2b3202ad522","alterego":"Santiago Sanchez","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":794,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":796,"name":"Test Character 1750435110732","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":798,"name":"Bryan Carrillo","alterego":"bcarrill","description":"Test","powers":["Armor","Flight"]},{"id":800,"name":"mario almeida4","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":802,"name":"Captain America 1750435170454","alterego":"Steve Rogers","description":"Super soldier with enhanced strength and agility","powers":["Super Strength","Enhanced Agility","Vibranium Shield"]},{"id":803,"name":"Hulk 1750435171053","alterego":"Bruce Banner","description":"Scientist with the ability to transform into a giant green monster","powers":["Super Strength","Regeneration","Durability"]},{"id":804,"name":"Black Widow 1750435171297","alterego":"Natasha Romanoff","description":"Skilled spy and martial artist","powers":["Combat Expert","Espionage","Tactical Intelligence"]},{"id":805,"name":"Thor 1750435171760","alterego":"Thor Odinson","description":"God of Thunder from Asgard","powers":["Weather Control","Mjolnir","Superhuman Strength"]},{"id":806,"name":"Captain America 1750435172222","alterego":"Steve Rogers","description":"Super soldier with enhanced strength and agility","powers":["Super Strength","Enhanced Agility","Vibranium Shield"]},{"id":807,"name":"Test Character 1750435187058","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":808,"name":"Test Character 1750435187307","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":809,"name":"Test Character 1750435188383","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":810,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":812,"name":"Test Character 1750435191161","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":813,"name":"Sonic-84ccc118-4255-43fe-b0df-aa0aa7e2030f","alterego":"Super sonico","description":"Erizo azul con super velocidad","powers":["velocidad","agilidad","resistencia"]},{"id":814,"name":"Franky","alterego":"Frank  G[0xc3][0xb3]mez","description":"Genius Power","powers":["Dev","soft-skills"]},{"id":815,"name":"Iron Man ca034017-2379-40d2-9abd-b3c4ebd65e3d","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":816,"name":"Iron Man1915","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":817,"name":"Test Character 1750435202583","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":819,"name":"Test Character 1750435203924","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":820,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":822,"name":"Test Character 1750435206724","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":823,"name":"Test Character 1750435219684","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":824,"name":"Test Character 1750435219930","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":825,"name":"Test Character 1750435221013","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":826,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":828,"name":"IronMan-93bc5862-b995-4936-a2af-6fc972ea6781","alterego":"Santiago Sanchez","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":829,"name":"Test Character 1750435223803","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":831,"name":"Iron Man 7721ce9c-78ee-4e05-ba5a-60e804794866","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":832,"name":"Sonic-d82cc6b3-cf99-4ba1-8f74-565a3d43d021","alterego":"Super sonico","description":"Erizo azul con super velocidad","powers":["velocidad","agilidad","resistencia"]},{"id":833,"name":"chleona","alterego":"Leons","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":834,"name":"Edulima","alterego":"Edu Lima","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":835,"name":"Captain America 1750435236281","alterego":"Steve Rogers","description":"Super soldier with enhanced strength and agility","powers":["Super Strength","Enhanced Agility","Vibranium Shield"]},{"id":836,"name":"Hulk 1750435236908","alterego":"Bruce Banner","description":"Scientist with the ability to transform into a giant green monster","powers":["Super Strength","Regeneration","Durability"]},{"id":837,"name":"Black Widow 1750435237144","alterego":"Natasha Romanoff","description":"Skilled spy and martial artist","powers":["Combat Expert","Espionage","Tactical Intelligence"]},{"id":838,"name":"Thor 1750435237605","alterego":"Thor Odinson","description":"God of Thunder from Asgard","powers":["Weather Control","Mjolnir","Superhuman Strength"]},{"id":839,"name":"Captain America 1750435238033","alterego":"Steve Rogers","description":"Super soldier with enhanced strength and agility","powers":["Super Strength","Enhanced Agility","Vibranium Shield"]},{"id":840,"name":"Iron Man_R1","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":841,"name":"Doctor Woman 3ba7c0","alterego":"All jsi","description":"Superpower","powers":["Teletransportacion","Jugar futbol"]},{"id":843,"name":"Franky2 G[0xc3][0xb3]mez C","alterego":"Frank  G[0xc3][0xb3]mez 2","description":"Foundation Power","powers":["Dev","soft-skills","QA"]},{"id":844,"name":"Rein Batman","alterego":"Rein","description":"Genius billionaire Pro Tekken Player","powers":["Armor","Flight"]},{"id":845,"name":"Iron Man 3281ece1-88b7-4831-8871-d15bcc2f324c","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":846,"name":"Test Character 1750435267087","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":847,"name":"Test Character 1750435267352","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":848,"name":"Test Character 1750435268438","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":849,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":851,"name":"Test Character 1750435271239","alterego":"Test Alter Ego","description":"Test Description""
12:08:40.418 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << ","powers":["Test Power 1","Test Power 2"]},{"id":852,"name":"Iron Maidens","alterego":"Tony Stark","description":"Geni[\r][\n]"
12:08:40.418 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "2000[\r][\n]"
12:08:40.418 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "us billionaire","powers":["Armor","Flight"]},{"id":854,"name":"Iron Man Rafael6yysg6ot","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":856,"name":"Iron Man Rafael5nbh0li3","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":857,"name":"iMaMgUYCAQ","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":858,"name":"Iront Man tstttttt","alterego":"Tony Stark tst4","description":"Genius billionaire tst4","powers":["Armor tst4","Flight tst4"]},{"id":859,"name":"CHAPULIN COLORADO","alterego":"mz","description":"MZ","powers":["fury","EAT"]},{"id":861,"name":"Iron Man 11223","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":863,"name":"Sonic-2096ccde-28e7-4c6e-b795-dc18b7c693f1","alterego":"Super sonico","description":"Erizo azul con super velocidad","powers":["velocidad","agilidad","resistencia"]},{"id":864,"name":"Iron Man-5e71719b-7c06-4e73-abd7-895d8d16ee1c","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":865,"name":"Rein Batman 1","alterego":"Rein","description":"Genius billionaire Pro Tekken Player","powers":["Armor","Flight"]},{"id":866,"name":"Iron Man #9015","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":867,"name":"Prueba Pichincha0dcd3e56-9121-4274-bbe9-3cd421c4e7a7781","alterego":"Alt prueba","description":"Prueba des","powers":["Armor","Flight"]},{"id":868,"name":"Black America b95dfc","alterego":"All jsi","description":"Superpower","powers":["Teletransportacion","Jugar futbol"]},{"id":869,"name":"Iron Man 1750435332795","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":870,"name":"Iron Man #2090","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":871,"name":"Iron Man 1750435334408","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":873,"name":"Iron Man","alterego":"Tony Stark X","description":"Updated description","powers":["Armor","Flight"]},{"id":874,"name":"Iron Man Rafaelps49a20y","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":875,"name":"IronMan-e9dc335f-2cb5-4994-b31b-b45479436c30","alterego":"Santiago Sanchez","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":876,"name":"Iron Man Infernal Karate -1b349934-1c76-4789-93ed-86df94b3bab6","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":877,"name":"Super Hero Test 500","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":878,"name":"1Iron Man_r1","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":879,"name":"Iron Man Infernal Karate -5dbe5bd6-1ad7-4c94-91f2-53b8e16f3080","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":880,"name":"Super Hero Test 1069","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":881,"name":"Iron Man Rafael6y96my8l","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":882,"name":"Iron Man f6e38507-5f82-49ef-95c3-8e3b4cab62eb","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":883,"name":"Iron Man e75d7000-77dd-4ddc-acfd-f64ecaf5b277","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":884,"name":"Iron Man f168694c-c735-4e5d-a858-a741c71a5b33","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":885,"name":"Iron Man ee9f8afc-2391-4396-b7b6-7b9135876080","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":886,"name":"Iron Man e24e3542-c156-4d4e-a6e6-4c7a3bbfe9ce","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":887,"name":"Iron Man 89f5ee02-debd-4ea9-bcf7-90527151df4f","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":888,"name":"Iron Man f62165cd-b4f6-4f1d-a4f8-d9ba01fb3854","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":889,"name":"Iron Man effa79f7-455e-47ac-97fc-248c26e51f84","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":890,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":892,"name":"Iron Man_c8c4114f-954a-4157-b3d6-1f96d47000c0","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":894,"name":"I2_5a9b1ce5-1928-4df3-9a33-6feff687d6be","alterego":"Steve Rogers","description":"Super soldier","powers":["Super Strength","Shield"]},{"id":895,"name":"Iron Marck14","alterego":"Marco Jativa","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":897,"name":"2Iron Man_R1","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":898,"name":"Captain America 1750435378758","alterego":"Steve Rogers","description":"Super soldier with enhanced strength and agility","powers":["Super Strength","Enhanced Agility","Vibranium Shield"]},{"id":899,"name":"Hulk 1750435379415","alterego":"Bruce Banner","description":"Scientist with the ability to transform into a giant green monster","powers":["Super Strength","Regeneration","Durability"]},{"id":900,"name":"Iron Man 77645bb2-47c6-46da-95c8-2f7bbb3cd427","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":901,"name":"Nuevo Personaje #2088","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":902,"name":"Black Widow 1750435381094","alterego":"Natasha Romanoff","description":"Skilled spy and martial artist","powers":["Combat Expert","Espionage","Tactical Intelligence"]},{"id":903,"name":"Thor 1750435382825","alterego":"Thor Odinson","description":"God of Thunder from Asgard","powers":["Weather Control","Mjolnir","Superhuman Strength"]},{"id":904,"name":"Thors","alterego":"Rayo Man","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":905,"name":"Captain America 1750435384507","alterego":"Steve Rogers","description":"Super soldier with enhanced strength and agility","powers":["Super Strength","Enhanced Agility","Vibranium Shield"]},{"id":907,"name":"CohetePlus8","alterego":"Cohete Plus","description":"Cohetito Plus","powers":["Armors","Flight"]},{"id":908,"name":"Prueba Pichinchaf6587085-7bb9-4ede-9697-0210ca87ac471007","alterego":"Alt prueba","description":"Prueba des","powers":["Armor","Flight"]},{"id":909,"name":"Prueba Pichincha3c2bd79a-9c44-44f2-95e7-ff2489e2076d9887","alterego":"Otro","description":"Otro","powers":["Armor"]},{"id":910,"name":"Super Hero Test 8635","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":911,"name":"Super Hero Test 8202","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":912,"name":"2Iron Man","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":913,"name":"Iron Man Infernal Karate -55a18ae7-63dd-495e-a816-d69d36054423","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":914,"name":"Iron Man Editado","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":917,"name":"Thors2","alterego":"Rayo Man","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":918,"name":"CohetePlus5","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor""
12:08:40.418 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << ","Flight"]},{"id":919,"name":"Hulk2","alterego":"Si Recuerdo","description":"Updated Description","powers":["Armor","Flight"]}[\r][\n]"
12:08:40.418 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "2000[\r][\n]"
12:08:40.418 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << ",{"id":920,"name":"Iron Man Test 1750435448017","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":922,"name":"Diego1 Iron Man","alterego":"Tony Stark Diego","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":923,"name":"DiegoCambiado3 Iron Man","alterego":"Tony Stark Diego","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":924,"name":"Iron Man f334567c-af75-47cf-88bc-036551b99974","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":925,"name":"Iron Man 3a122aeb-0fd7-4e7e-a411-0e0c94a668eb","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":926,"name":"Iron Man 82830233-5a04-4d58-9267-aaa9e5c0187c","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":927,"name":"Iron Man f38e92b0-5ea3-4b5b-8e84-9a1fc2dc4409","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":928,"name":"Iron Man 569c2346-df86-46e9-8ca4-491fbee99fbf","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":929,"name":"Iron Man 6ce4dd6e-0bb8-4e29-8a99-f16a999838d2","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":930,"name":"Iron Man eaac79c8-540c-4fe0-9b82-ea916bad1088","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":931,"name":"Iron Man 80ddece7-2c23-4570-8679-62bd36e4a0fe","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":932,"name":"Iron Man 269a2031-06df-4f74-a80e-862231ca277f","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":934,"name":"Iron Man Rafaeldcollyfk","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":935,"name":"I2_1e9986da-8cce-4898-beba-ec3248e46508","alterego":"Steve Rogers","description":"Super soldier","powers":["Super Strength","Shield"]},{"id":938,"name":"Anderson Morrillo DEV # a15932ce-0317-402b-bcfa-895b16dd4d19","alterego":"Worst Automatizator ever","description":"El Dev Humilde","powers":["JAVA","NET"]},{"id":939,"name":"Iron Man Duplicate 1750435476808","alterego":"Otro","description":"Otro","powers":["Armor"]},{"id":940,"name":"Spider-Man 426","alterego":"Peter Parker","description":"El amigable vecino Spider-Man","powers":["Sentido ar[0xc3][0xa1]cnido","Trepar paredes","Lanzar telara[0xc3][0xb1]as"]},{"id":941,"name":"Spider-Man 362","alterego":"Otro","description":"Otro","powers":["Sentido ar[0xc3][0xa1]cnido"]},{"id":944,"name":"Iron Man Test 1750435503409","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":947,"name":"Iron Man","alterego":"Tony Stark X","description":"Updated description","powers":["Armor","Flight"]},{"id":948,"name":"Rein Batman be527396-34e6-4733-bcb3-7f4e575e94e8","alterego":"Rein","description":"Genius billionaire Pro Tekken Player","powers":["Armor","Flight"]},{"id":949,"name":"CohetePlus9","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":950,"name":"Iron Man 857abe15-57b3-4061-9b8b-2926081f3688","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":951,"name":"Iron Man 2ef32151-1370-468f-8635-422d69d5db81","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":952,"name":"Iron Man 3700e2fb-6099-454d-acdd-4112cd6dd972","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":953,"name":"Iron Man 5048f434-9232-44e9-aa53-95aa122880a1","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":954,"name":"Iron Man 87ba32a7-1465-4037-9383-05dee9d20fe6","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":955,"name":"Iron Man 2cfc22cf-00fe-42af-ae3a-3541e6ccee6f","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":956,"name":"Iron Man def5622c-993c-4ed9-ad7a-0c9e2a67e5f3","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":957,"name":"Iron Man e1929de8-92e8-4819-ac53-de723c2fb1c7","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":958,"name":"Iron Man 600","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":959,"name":"Iron Man 884","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":960,"name":"Iron Man 122","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":961,"name":"Iron Man 790","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":962,"name":"nombre","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":963,"name":"Nombre-25774c23-7a4d-4c00-98b8-d1b1e991ffcb","alterego":"Bruce Wayne","description":"the Dark Knight","powers":["Money","Investment","Martial Arts"]},{"id":964,"name":"Iron Man 255","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":965,"name":"Silvana Bentacourt v1-1750435519164","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":967,"name":"Iron Man 572","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":969,"name":"Iron Man 77f92d27-108f-4b11-bb40-e8404bdcb55c","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":970,"name":"Nuevo Personaje #1143","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":971,"name":"Prueba Pichincha872bfa00-6f0f-426a-adc1-87687a9a5d4a256","alterego":"Alt prueba","description":"Prueba des","powers":["Armor","Flight"]},{"id":972,"name":"Prueba Pichinchae131f0c1-b584-47c5-af37-2b68d033c2ec6690","alterego":"Otro","description":"Otro","powers":["Armor"]},{"id":973,"name":"Castleman_1","alterego":"Super castle_1","description":"Genius D"
12:08:40.496 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "ev_1","powers":["dev_1","qa_1"]},{"id":974,"name":"Anderson Morrillo DEV # 3c3f54e0-4c47-4a80-887d-f59b0a7a514f","alterego":"Worst Automatizator ever","description":"El Dev Humilde","powers":["JAVA","NET"]},{"id":975,"name":"CapitanAmerica001","alterego":"Doraemon","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":976,"name":"Rein Batman 769fa36c-5dc2-47ea-a2bf-b1ad4c67b8ee","alterego":"Rein","description":"Genius billionaire Pro Tekken Player","powers":["Armor","Flight"]},{"id":977,"name":"Anderson Morrillo DEV # f1feca28-dc56-416c-b8f5-a61f9fe0dbe8","alterego":"Worst Automatizator ever","description":"El Dev Humilde","powers":["JAVA","NET"]},{"id":978,"name":"Super Hero Test 2617","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":979,"name":"Super Hero Test 9135","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Prob"
12:08:40.496 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "lems"]},{"id":981,"name":"Franky Gomez Cabrera","alterego":"Frank G[0xc3][0xb3]mez C","description":"Genius Power","powers":["Dev","soft-skills"]},{"id":982,"name":"Iron Man","alterego":"Tony Stark X","description":"Updated description","powers":["Armor","Flight"]},{"id":983,"name":"Jose Obando 1750435566458","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":986,"name":"Spider Lord df55d2","alterego":"All jsi","description":"Superpower","powers":["Teletransportacion","Jugar futbol"]},{"id":987,"name":"I2_3b5b46de-51eb-4041-925d-259780f87b20","alterego":"Steve Rogers","description":"Super soldier","powers":["Super Strength","Shield"]},{"id":991,"name":"Super Hero Test 7962","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":992,"name":"Iron Man-32d2bb49-e3fd-44bb-99a9-eb4f9f32ff4d","alterego":"Tony Stark","description":"Genius billion"
12:08:40.497 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "[\r][\n]"
12:08:40.497 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "2000[\r][\n]"
12:08:40.497 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "aire","powers":["Armor","Flight"]},{"id":994,"name":"Iron Man 1c576f86-eba8-42bc-beb6-822436077093","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":995,"name":"Jose Obando 1750435587942","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":997,"name":"Captain America 1750435585271","alterego":"Steve Rogers","description":"Super soldier with enhanced strength and agility","powers":["Super Strength","Enhanced Agility","Vibranium Shield"]},{"id":998,"name":"Hulk 1750435585869","alterego":"Bruce Banner","description":"Scientist with the ability to transform into a giant green monster","powers":["Super Strength","Regeneration","Durability"]},{"id":1002,"name":"UpdateTest_332668ab_Updated","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":1003,"name":"Alexis Name 1","alterego":" Alexis Alterego 1","description":" Alexis Description 1","powers":["Armor","Flight"]},{"id":1004,"name":"Alexis Name 2","alterego":" Alexis Alterego 2","description":" Alexis Description 2","powers":["Armor","Flight"]},{"id":1005,"name":"Iron Man","alterego":"Tony Stark X","description":"Updated description","powers":["Armor","Flight"]},{"id":1006,"name":"Invincible","alterego":"Mark Grayson","description":"Viltrumite","powers":["String","Flight"]},{"id":1007,"name":"Captain America 1750435608323","alterego":"Steve Rogers","description":"Super soldier with enhanced strength and agility","powers":["Super Strength","Enhanced Agility","Vibranium Shield"]},{"id":1008,"name":"Hulk 1750435608927","alterego":"Bruce Banner","description":"Scientist with the ability to transform into a giant green monster","powers":["Super Strength","Regeneration","Durability"]},{"id":1009,"name":"Black Widow 1750435610401","alterego":"Natasha Romanoff","description":"Skilled spy and martial artist","powers":["Combat Expert","Espionage","Tactical Intelligence"]},{"id":1010,"name":"Iron Man 3243243243232423","alterego":"Tony Stark","description":"Updated description for testing","powers":["Armor","Flight"]},{"id":1011,"name":"Nuevo Personaje #9922","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1013,"name":"Anderson Morrillo DEV # 5abf852f-9ad6-41d1-b5ff-7c16a8a17b0a","alterego":"Worst Automatizator ever","description":"El Dev Humilde","powers":["JAVA","NET"]},{"id":1014,"name":"Iron Maan","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1016,"name":"Jose Obando 1750435623722","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1018,"name":"CAPULINA 1","alterego":"mz","description":"MZ","powers":["fury","EAT"]},{"id":1019,"name":"Iron Man xxxx","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1020,"name":"Prueba Pichincha691ae3a7-8628-4066-b2c1-4391ca34b68d2724","alterego":"Alt prueba","description":"Prueba des","powers":["Armor","Flight"]},{"id":1021,"name":"Iron Man Infernal Karate -519965a3-c172-4aaf-b396-8e3620e6403d","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1022,"name":"Prueba Pichinchabb5c576d-1a38-460b-9558-1d66cae834c74783","alterego":"Otro","description":"Otro","powers":["Armor"]},{"id":1023,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":1024,"name":"Iron Man","alterego":"Tony Stark","description":"Updated descriptionp2a8y4fr","powers":["Armor","Flight"]},{"id":1026,"name":"Iron Man 17630fe0-4d95-453d-a1b8-dfaf0c2ce600","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1027,"name":"kvViVETsCu","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1028,"name":"Iron Man 22ac5d96-b9d8-4e27-b6ce-47595f4437f7","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1029,"name":"Iron Man-9cbb33ef-c262-4f15-9fb1-4c8a009b20d2","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1030,"name":"Capitan America-998ff266-e951-4137-ba7c-800a42105de0","alterego":"Steve Rogers","description":"Super soldier","powers":["Shield"]},{"id":1031,"name":"Nuevo Personaje #8482","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1032,"name":"Iron Man Test 1750435660148","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1033,"name":"Black Panther 9e151d01-072b-43e2-9bc1-1d14213d301c","alterego":"T'Challa","description":"Rey de Wakanda","powers":["Fuerza","Tecnolog[0xc3][0xad]a"]},{"id":1034,"name":"Iron Man 1","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1035,"name":"Black Panther 7abc858a-d9f3-4fb2-812c-f17d8bead885","alterego":"T'Challa","description":"Actualizado desde Karate Pro","powers":["Fuerza","Tecnolog[0xc3][0xad]a"]},{"id":1036,"name":"Jose Obando 1750435669712","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1039,"name":"Iron Man Rafaelhuk5tg0w","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1040,"name":"Super Rein 0bf64ce1-df70-4ba5-bdfd-a711ef2f2a06","alterego":"Rein","description":"Genius billionaire Pro Tekken Player","powers":["Armor","Flight"]},{"id":1041,"name":"Jose Obando 1750435693501","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1043,"name":"Iron Man 0c98d5ab-b5d3-4f38-97df-13d34e82bcaa","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1044,"name":"Iron Man 1750435705600","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1045,"name":"Iron Man 1750435707067","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1047,"name":"Iron Man Rafaelfy5twhmo","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1050,"name":"Duplicate 1750435710748","alterego":"Alguien","description":"Descripci[0xc3][0xb3]n","powers":["Poder"]},{"id":1052,"name":"Iron Man 1750435714411","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":1054,"name":"Iron Man Test 1750435720321","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1055,"name":"Prueba Pichincha6b7a5d34-99cc-4829-9447-2f5977708b83689","alterego":"Alt prueba","description":"Prueba des","powers":["Armor","Flight"]},{"id":1056,"name":"Prueba Pichinchade71b3f1-7ce9-4c1b-8bde-8f31397be9d36628","alterego":"Otro","description":"Otro","powers":["Armor"]},{"id":1058,"name":"Hero_322f11d1","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1059,"name":"Iron Man_9d337d0a-262b-4fd9-9380-93b8596bd9e9","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1060,"name":"Super Hero Test 6920","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":1063,"name":"Chris Muyon","alterego":"updated alterego","description":"Updated description","powers":["Armor","Flight"]},{"id":1064,"name":"Iron Man-ade018d2-e3a3-4744-8187-9059a357d850","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1065,"name":"Capitan America-afe9e1d7-6849-47a0-999f-bd1577a4ffab","alterego":"Steve Rogers","description":"Super soldier","powers":["Shield"]},{"id":1066,"name":"Edulima 2","alterego":"Edu Lima","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1067,"name":"Chapulin colorado Test Karate","alterego":"Roberto Gomez","description":"H[0xc3][0xa9]roe ficticio mexicano","powers":["agilidad","sentido del humor","hacer reir"]},{"id":1068,"name":"Prueba Pichincha7d361762-d9c2-43d4-b9c9-b95aa746fa9b5445","alterego":"Alt prueba","description":"Prueba des","powers":["Armor","Flight"]},{"id":1069,"name""
12:08:40.498 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << ":"Prueba[\r][\n]"
12:08:40.498 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "2000[\r][\n]"
12:08:40.499 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << " Pichincha1f9c29a8-2d77-4572-91cf-ca4744a2875d6299","alterego":"Otro","description":"Otro","powers":["Armor"]},{"id":1070,"name":"Diego Iron Man 7253","alterego":"Tony Stark Diego Post","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1071,"name":"Iron Man dc8af850-c952-41fb-9322-ae009d4e74e0","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1072,"name":"DiegoCambiado3 Iron Man","alterego":"Tony Stark Diego","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1073,"name":"Spider Boby 4","alterego":"Boby","description":"Student","powers":["Armor","Flight"]},{"id":1074,"name":"I2_67c77687-9059-4f39-8d56-03b06a1609ef","alterego":"Steve Rogers","description":"Super soldier","powers":["Super Strength","Shield"]},{"id":1075,"name":"Captain America","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":1076,"name":"Iron Man","alterego":"Tony Stark X","description":"Updated description","powers":["Armor","Flight"]},{"id":1078,"name":"Hulk3","alterego":"Para Eliminar","description":"Para Eliminar","powers":["Armor","Flight"]},{"id":1079,"name":"Iron Man b591afb4-f9c8-4144-b65b-349a790804dc","alterego":"Tony Stark tst","description":"Genius billionaire tst4","powers":["Armor tst4","Flight tst4"]},{"id":1080,"name":"Hulk4","alterego":"Para Eliminar","description":"Para Eliminar","powers":["Armor","Flight"]},{"id":1081,"name":"Iron Man Infernal Karate -b4c462ad-84ae-4ca7-a640-9cea46e7b1ba","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1082,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":1084,"name":"Iron Man2222","alterego":"Tony Stark2","description":"Genius billionaire2","powers":["Armor","Flight"]},{"id":1086,"name":"Hulk5","alterego":"Para Eliminar","description":"Para Eliminar","powers":["Armor","Flight"]},{"id":1087,"name":"Iron Man Superior-9467-110913","alterego":"Tony Stark","description":"Genio, millonario, playboy, fil[0xc3][0xa1]ntropo","powers":["Armadura","Inteligencia"]},{"id":1089,"name":"Super Rein 29a8d8be-5a94-43fc-9e9c-719bcfb4d00b","alterego":"Rein","description":"Genius billionaire Pro Tekken Player","powers":["Armor","Flight"]},{"id":1090,"name":"Castleman_2","alterego":"Super castle_2","description":"Genius Dev_2","powers":["dev_2","qa_2"]},{"id":1092,"name":"Iron Man 9d1e9be5-eef9-4207-a7e2-e96ea0921860","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1094,"name":"Hero_22bc49d9","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1095,"name":"Nombre-5e067d49-f7a2-474d-b273-e798742c16e0","alterego":"Bruce Wayne","description":"the Dark Knight","powers":["Money","Investment","Martial Arts"]},{"id":1097,"name":"Iron Man-e1b4ba5e-bfd8-4c1e-9b86-ed1933082bdd","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1098,"name":"Capitan America-2f7ca7fa-93d6-49e1-b0f0-2556a09e7b9e","alterego":"Steve Rogers","description":"Updated description","powers":["Shield","Leadership"]},{"id":1099,"name":"Jose Obando 1750435816482","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1101,"name":"Iron Man1233333","alterego":"Otro","description":"Otro","powers":["Armor"]},{"id":1104,"name":"Prueba Pichincha2efe7301-ce82-492e-ab9b-50a9fe0adcb36189","alterego":"Alt prueba","description":"Prueba des","powers":["Armor","Flight"]},{"id":1105,"name":"Prueba Pichincha04d9f706-f1c5-4705-885a-bf20263bef011287","alterego":"Otro","description":"Otro","powers":["Armor"]},{"id":1106,"name":"Super Rein 68b92e31-ea35-4577-9ff9-138673e31b22","alterego":"Rein","description":"Genius billionaire Pro Tekken Player","powers":["Armor","Flight"]},{"id":1107,"name":"Super Rein 70f9899c-80b8-49cc-83e7-e433dcb6ac0b","alterego":"Rein","description":"Genius billionaire Pro Tekken Player","powers":["Armor","Flight"]},{"id":1109,"name":"Iron Man two","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1110,"name":"3","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1111,"name":"Nuevo Personaje #9824","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1112,"name":"Jose Obando 1750435849382","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1114,"name":"Captain America d3cb53","alterego":"All jsi","description":"Superpower","powers":["Teletransportacion","Jugar futbol"]},{"id":1115,"name":"Nombre-2d21ad37-6f9c-4eb1-92bb-f38d4da61760","alterego":"Bruce Wayne","description":"the Dark Knight","powers":["Money","Investment","Martial Arts"]},{"id":1116,"name":"Nombre-a7f42db6-7550-42ce-8e56-d3f7d5946458","alterego":"Bruce Wayne","description":"the Dark Knight","powers":["Money","Investment","Martial Arts"]},{"id":1117,"name":"Nombre-15bec9d5-27af-47ab-b58f-ee54ccbd6084","alterego":"Bruce Wayne","description":"the Dark Knight","powers":["Money","Investment","Martial Arts"]},{"id":1118,"name":"Hombre ara[0xc3][0xb1]a","alterego":"Otro","description":"Otro","powers":["Armor"]},{"id":1119,"name":"Nuevo Personaje #2607","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1120,"name":"Iron Man Superior-2164-111009","alterego":"Tony Stark","description":"Genio, millonario, playboy, fil[0xc3][0xa1]ntropo","powers":["Armadura","Inteligencia"]},{"id":1124,"name":"Iron Man 1 4re455","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1125,"name":"Jose Obando 1750435870292","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1127,"name":"Super Rein b4faa4b3-13d2-44b0-a8c5-5cdfb5449116","alterego":"Rein","description":"Genius billionaire Pro Tekken Player","powers":["Armor","Flight"]},{"id":1128,"name":"Super Rein 508c03ab-b31e-4298-81b0-2bfb01734627","alterego":"Rein","description":"Genius billionaire Pro Tekken Player","powers":["Armor","Flight"]},{"id":1129,"name":"IronMan-831a4736-592c-43cb-8523-4a3c24655cef","alterego":"Santiago Sanchez","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1131,"name":"Captain America 1750435884866","alterego":"Steve Rogers","description":"Super soldier with enhanced strength and agility","powers":["Super Strength","Enhanced Agility","Vibranium Shield"]},{"id":1132,"name":"Prueba Pichinchae2e03dc4-7a1d-4dcc-"
12:08:40.499 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "8d16-f950e6f122ab1502","alterego":"Alt prueba","description":"Prueba des","powers":["Armor","Flight"]},{"id":1133,"name":"Hulk 1750435885462","alterego":"Bruce Banner","description":"Scientist with the ability to transform into a giant green monster","powers":["Super Strength","Regeneration","Durability"]},{"id":1134,"name":"Black Widow 1750435886926","alterego":"Natasha Romanoff","description":"Skilled spy and martial artist","powers":["Combat Expert","Espionage","Tactical Intelligence"]},{"id":1135,"name":"Thor 1750435888605","alterego":"Thor Odinson","description":"God of Thunder from Asgard","powers":["Weather Control","Mjolnir","Superhuman Strength"]},{"id":1136,"name":"Captain America 1750435890278","alterego":"Steve Rogers","description":"Super soldier with enhanced strength and agility","powers":["Super Strength","Enhanced Agility","Vibranium Shield"]},{"id":1137,"name":"Iron Man Infernal Karate -d40d9b46-a7b7-48b5-ba1c-b03a42c016dc","alterego":"Tony Stark","description":"Genius billionaire","powers":"
12:08:40.499 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "["Armor","Flight"]},{"id":1138,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":1139,"name":"Jose Obando 1750435898657","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1140,"name":"Iron Man Rafaelviwn05if","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1141,"name":"Iron Man Rafael55dbqoov","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1142,"name":"Diego Iron Man 7911"
12:08:40.499 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "[\r][\n]"
12:08:40.499 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "2000[\r][\n]"
12:08:40.500 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "","alterego":"Tony Stark Diego Post","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1143,"name":"Captain America","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":1144,"name":"I2_ea6d33db-a484-4793-b428-9947eb7e213d","alterego":"Steve Rogers","description":"Super soldier","powers":["Super Strength","Shield"]},{"id":1146,"name":"Jose Obando 1750435911382","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1149,"name":"DiegoCambiado3 Iron Man","alterego":"Tony Stark Diego","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1150,"name":"FttvFklngc","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1151,"name":"Iron Man 1a01a65f-a13d-4bf6-9283-8297b09956d4","alterego":"Tony Stark tst","description":"Genius billionaire tst4","powers":["Armor tst4","Flight tst4"]},{"id":1152,"name":"Iron Man 9e9e7604-700b-46d8-8056-4fd338b4477d","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1154,"name":"Captain Marvel test8","alterego":"Carol Danvers","description":"the biggest hero in the world","powers":["Flight","Force"]},{"id":1155,"name":"Iron Man","alterego":"Tony Stark X","description":"Updated description","powers":["Armor","Flight"]},{"id":1156,"name":"Iron Man Test 1750435943066","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1158,"name":"Nombre-58b8d2d7-212b-41dc-bee2-e53c0374772a","alterego":"Bruce Wayne","description":"the Dark Knight","powers":["Money","Investment","Martial Arts"]},{"id":1159,"name":"BatMans 2026","alterego":"Bruce Wayne","description":"the Dark Knight in Gotham City","powers":["Money","Investment","Martial Arts","Detective Skills","Gadgets"]},{"id":1162,"name":"nGIosGQXqY","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1163,"name":"IronMan-8968bd7e-8585-47f6-9f2b-2c98ce1e4059","alterego":"Santiago Sanchez","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1164,"name":"Iron Man 7cfd0920-6978-4ca4-b184-d9376ba4559e","alterego":"Tony Stark tst","description":"Genius billionaire tst4","powers":["Armor tst4","Flight tst4"]},{"id":1167,"name":"Iron Witch be8d82","alterego":"All jsi","description":"Superpower","powers":["Teletransportacion","Jugar futbol"]},{"id":1168,"name":"Super Atom Eve","alterego":"Evelin","description":"Crea materia","powers":["Xray","Flight"]},{"id":1169,"name":"Castleman_3","alterego":"Super castle_3","description":"Genius Dev_3","powers":["dev_3","qa_3"]},{"id":1171,"name":"Capit[0xc3][0xa1]n Marvel","alterego":"Carol Danvers","description":"Hero[0xc3][0xad]na c[0xc3][0xb3]smica actualizada","powers":["Vuelo","Energ[0xc3][0xad]a","Superfuerza"]},{"id":1172,"name":"Iron Man-826600bd-964a-468f-8c53-1636f6bf010b","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1173,"name":"Capitan America-a0c1af29-ad1f-47a3-a885-7baf335e2d59","alterego":"Steve Rogers","description":"Super soldier","powers":["Shield"]},{"id":1174,"name":"Captain America 1750436007197","alterego":"Steve Rogers","description":"Super soldier with enhanced strength and agility","powers":["Super Strength","Enhanced Agility","Vibranium Shield"]},{"id":1175,"name":"Thor Strange f68f9e","alterego":"All jsi","description":"Superpower","powers":["Teletransportacion","Jugar futbol"]},{"id":1176,"name":"Hulk 1750436008045","alterego":"Bruce Banner","description":"Scientist with the ability to transform into a giant green monster","powers":["Super Strength","Regeneration","Durability"]},{"id":1177,"name":"Black Widow 1750436009546","alterego":"Natasha Romanoff","description":"Skilled spy and martial artist","powers":["Combat Expert","Espionage","Tactical Intelligence"]},{"id":1178,"name":"Thor 1750436011524","alterego":"Thor Odinson","description":"God of Thunder from Asgard","powers":["Weather Control","Mjolnir","Superhuman Strength"]},{"id":1179,"name":"Captain America 1750436013150","alterego":"Steve Rogers","description":"Super soldier with enhanced strength and agility","powers":["Super Strength","Enhanced Agility","Vibranium Shield"]},{"id":1180,"name":"IronMan-181c10c6-8875-4443-a41f-9d7d4dd0004c","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1181,"name":"Super Rein 6128655f-cd52-496c-9c1d-ea3f6f4d1745","alterego":"Rein","description":"Genius billionaire Pro Tekken Player","powers":["Armor","Flight"]},{"id":1182,"name":"Jose Obando 1750436035150","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1183,"name":"Iron Man 2234","alterego":"Tony Stark 2234","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1184,"name":"Iron Man f6f810c8-e6e5-4743-8f21-6507cb253737","alterego":"Tony Stark tst","description":"Genius billionaire tst4","powers":["Armor tst4","Flight tst4"]},{"id":1185,"name":"error500","alterego":"Tony Stark 2234","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1187,"name":"Iron Man1111","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1188,"name":"Iron Man Infernal Karate -f79eefe3-8864-40ad-a45d-ffa9e7e19fc5","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1189,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":1191,"name":"Jose Obando 1750436049611","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1194,"name":"Iron Man Test 1750436056434","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1196,"name":"Castleman_4","alterego":"Super castle_4","description":"Genius Dev_4","powers":["dev_4","qa_4"]},{"id":1198,"name":"Jose Obando 1750436064363","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1200,"name":"Iron Man test - aandino","alterego":"Tony Stark aandino","description":"Genius billionaire - aandino","powers":["Armor","Flight","unity","c#"]},{"id":1202,"name":"Silvana Bentacourt v1-1750436070985","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1203,"name":"CAPULINA _1","alterego":"mz","description":"MZ","powers":["fury","EAT"]},{"id":1206,"name":"Nombre-82ea5e18-1f10-4512-bba7-1f5d8300507f","alterego":"Bruce Wayne","description":"the Dark Knight","powers":["Money","Investment","Martial Arts"]},{"id":1207,"name":"BatMans 2026","alterego":"Bruce Wayne","description":"the Dark Knight in Gotham City","powers":["Money","Investment","Martial Arts","Detective Skills","Gadgets"]},{"id":1209,"name":"IronMan-5e255b9f-b537-42a1-a567-7121fa8e9b2b","alterego":"Santiago Sanchez","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1211,"name":"Heroe BP","alterego":"Developer","description":"Genio developer","powers":["Testing","Coding"]},{"id":1213,"name":"Jose Obando 1750436097345","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1214,"name":"Hero_edd03de4","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1216,"name":"Iron Man Rafaelv7wlxq55","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1217,"name":"Nuevo Personaje #1647","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1219,"name":"Jose Obando 1750436108636","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1220,"name":"Henry Moreno","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1221,"name":"Hulk 11750435885462","alterego":"Bruce Banner","description":"Scientist with the ability to transform into a giant green monster","powers":["Super Strength","Regeneration","Durability"]},{"id":1222,"name":"Doctor Strange 4421b8","alterego":"All jsi","description":"Superpower","powers":["Teletransportacion","Jugar futbol"]},{"i"
12:08:40.500 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "d":1224,[\r][\n]"
12:08:40.500 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "2000[\r][\n]"
12:08:40.500 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << ""name":"CohetePlus10","alterego":"Cohete Plus","description":"Cohetito Plus","powers":["Armors","Flight"]},{"id":1225,"name":"Deadpool jusimban312","alterego":"Wade Winston Wilson","description":"Mercenario, supervillano[0xe2][0x80][0x8b][0xe2][0x80][0x8b] y antih[0xc3][0xa9]roe","powers":["Immortality","Regeneration","Superhuman strength"]},{"id":1227,"name":"I2_35899795-4f6d-4b57-98e0-f0efca8f8a20","alterego":"Steve Rogers","description":"Super soldier","powers":["Super Strength","Shield"]},{"id":1228,"name":"Marvel Gold Goblin","alterego":"Boby Osborn","description":"Student","powers":["Armor","Speed"]},{"id":1229,"name":"Iron Man Rafaelq108vy9u","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1232,"name":"Thor Hero d5ab3a","alterego":"All jsi","description":"Superpower","powers":["Teletransportacion","Jugar futbol"]},{"id":1233,"name":"Iron Man Rafaelnwjg9787","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1234,"name":"Super Hero Test 6061","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":1236,"name":"Super Hero Test 3459","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":1237,"name":"jhazapat","alterego":"Jhonny Zapata","description":"Genius informatician and hacker","powers":["Hacking","Programming","Cybersecurity"]},{"id":1239,"name":"Iron Man four","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1240,"name":"CAPULINA _2","alterego":"mz","description":"MZ","powers":["fury","EAT"]},{"id":1241,"name":"Edulima 3","alterego":"Edu Lima","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1242,"name":"Jose Obando 1750436179254","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1243,"name":"Spider-Man 336","alterego":"Peter Parker","description":"El amigable vecino Spider-Man","powers":["Sentido ar[0xc3][0xa1]cnido","Trepar paredes","Lanzar telara[0xc3][0xb1]as"]},{"id":1245,"name":"Iron Man Rafael3mmjn0c2","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1246,"name":"I2_1e999e6f-910d-406d-8117-566ee130cd80","alterego":"Steve Rogers","description":"Super soldier","powers":["Super Strength","Shield"]},{"id":1248,"name":"Dario Jimenez","alterego":"Fresco","description":"Genius billionaire","powers":["Super Strength","Flight"]},{"id":1250,"name":"Nuevo Personaje #7602","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1253,"name":"Iron Man 22345","alterego":"Tony Stark 22345","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1255,"name":"Iron Man Rafaelzcc0bgm3","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1257,"name":"El pepes","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1260,"name":"Test User 555bd231-8482-441f-b0d8-cd5271b2a461","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1262,"name":"Character-5b78817d","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1264,"name":"Character-1b14c2c9","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1266,"name":"Iron Maiden 5","alterego":"Tony Mayor","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1267,"name":"Character-986b2129","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1268,"name":"Iron Man-9ee08370-fada-4dff-98f3-62374a39d806","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1269,"name":"Freddy Tacuri","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1270,"name":"chilindrina","alterego":"mz","description":"MZ","powers":["fury","EAT"]},{"id":1271,"name":"Iron Man-94e992b9-d4e1-43f6-9291-b3cf8ca1f954","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1272,"name":"Capitan America-198ffc37-5aaf-4c8f-989e-9c11a0104c1c","alterego":"Steve Rogers","description":"Updated description","powers":["Shield","Leadership"]},{"id":1273,"name":"Iron Man","alterego":"Tony Stark X","description":"Updated description","powers":["Armor","Flight"]},{"id":1275,"name":"Character-2ae7316f","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":1276,"name":"Error","alterego":"Error","description":"Error","powers":["Error"]},{"id":1278,"name":"Jose Obando 1750436255862","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1279,"name":"Nuevo Personaje #1365","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1281,"name":"Black Panther 0bba45bc-fb53-45aa-b275-c44a0ded2b70","alterego":"T'Challa","description":"Rey de Wakanda","powers":["Fuerza","Tecnolog[0xc3][0xad]a"]},{"id":1282,"name":"Chleona3","alterego":"Leons","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1283,"name":"Black Panther d6be0872-7e26-4373-b303-e3cec93ffb70","alterego":"T'Challa","description":"Actualizado desde Karate Pro","powers":["Fuerza","Tecnolog[0xc3][0xad]a"]},{"id":1284,"name":"Iron Man 4b400a30-fc3e-4db4-b3ba-973fd2d278ce","alterego":"Tony Stark tst","description":"Genius billionaire tst4","powers":["Armor tst4","Flight tst4"]},{"id":1287,"name":"qnNAZGzSWh","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1288,"name":"#(name)","alterego":"#(alterego)","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1289,"name":"nameRandom","alterego":"anamcias","description":"Developer","powers":["Angular","Karate"]},{"id":1290,"name":"Chleona4","alterego":"Leons","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1291,"name":"Spider-Manew","alterego":"Peter Parker","description":"Superh[0xc3][0xa9]roe ar[0xc3][0xa1]cnido de Marvel","powers":["Agilidad","Sentido ar[0xc3][0xa1]cnido","Trepar muros"]},{"id":1292,"name":"Anderson Morrillo DEV # 60c81113-e829-4172-941d-964a3eb233a0","alterego":"Worst Automatizator ever","description":"El Dev Humilde","powers":["JAVA","NET"]},{"id":1295,"name":"Captain America 1750436297497","alterego":"Steve Rogers","description":"Super soldier with enhanced strength and agility","powers":["Super Strength","Enhanced Agility","Vibranium Shield"]},{"id":1296,"name":"Hulk 1750436298248","alterego":"Bruce Banner","description":"Scientist with the ability to transform into a giant green monster","powers":["Super Strength","Regeneration","Durability"]},{"id":1298,"name":"Black Widow 1750436299811","alterego":"Natasha Romanoff","description":"Skilled spy and martial artist","powers":["Combat Expert","Espionage","Tactical Intelligence"]},{"id":1299,"name":"Thor 1750436301519","alterego":"Thor Odinson","description":"God of Thunder from Asgard","powers":["Weather Control","Mjolnir","Superhuman Strength"]},{"id":1300,"name":"Captain America 1750436303220","alterego":"Steve Rogers","description":"Super soldier with enhanced strength and agility","powers":["Super Strength","Enhanced Agility","Vibranium Shield"]},{"id":1302,"name":"Prueba Pichinchaa2d854e2-e4f9-4f94-885b-efcb7b4c4eac5836","alterego":"Alt prueba","description":"Prueba des","powers":["Armor","Flight"]},{"id":1303,"name":"Iron Man8888","alterego":"Otro","description":"Otro","powers":["Armor"]},{"id":1305,"name":"Iron Man-7104bc90-f6be-4118-9e0a-88bde90adfd3","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1306,"name":"Iron Man-b92a87a2-76a0-47f3-b85b-101c152fb5b9","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1307,"name":"Capitan America-5c2be5bb-ce14-4672-9b22-d460bfb7bf2d","alterego":"Steve Rogers","description":"Updated description","powers":["Shield","Leadership"]},{"id":1308,"name":"Iron Man five","alterego":"Tony Stark",""
12:08:40.500 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "description":"Ge[\r][\n]"
12:08:40.500 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "2000[\r][\n]"
12:08:40.500 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "nius billionaire","powers":["Armor","Flight"]},{"id":1309,"name":"IronMan-760ef4ff-ff4d-4fad-be51-fa741ef28c42","alterego":"Santiago Sanchez","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1310,"name":"Jose Obando 1750436332592","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1311,"name":"Iron Man_12d0076b-8547-4da8-a12a-027440918f23","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1312,"name":"wVDNiCqyfr","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1315,"name":"Diego Iron Man 8347","alterego":"Tony Stark Diego Post","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1316,"name":"Iron Man88888","alterego":"Otro","description":"Otro","powers":["Armor"]},{"id":1321,"name":"Nuevo Personaje #4192","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1322,"name":"Prueba Pichincha55d72aa8-ce43-4aab-8342-0c1a777269a79919","alterego":"Alt prueba","description":"Prueba des","powers":["Armor","Flight"]},{"id":1324,"name":"Iron Man Cambiado por DiegoF","alterego":"Tony Stark Diego","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1325,"name":"Iron Man888888","alterego":"Otro","description":"Otro","powers":["Armor"]},{"id":1326,"name":"IronMan-30014040-40b3-4357-8131-835a25cacb43","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1327,"name":"globalName","alterego":"Otro","description":"Otro","powers":["Armor"]},{"id":1330,"name":"Iron Man eca5a6be-6275-4ae7-8966-e1e9517c5c36","alterego":"Tony Stark tst","description":"Genius billionaire tst4","powers":["Armor tst4","Flight tst4"]},{"id":1332,"name":"Super Hero Test 4977","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":1333,"name":"Super Hero Test 5990","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":1335,"name":"Super Hero Test 8050","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":1336,"name":"Jose Obando 1750436371589","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1338,"name":"Diego Iron Man 5950","alterego":"Tony Stark Diego Post","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1339,"name":"Iron Man c115eed6-9993-48c1-8bc7-85c85a8f10d7","alterego":"Tony Stark tst","description":"Genius billionaire tst4","powers":["Armor tst4","Flight tst4"]},{"id":1341,"name":"Character_1750436400790","alterego":"Jhonny Zapata","description":"Genius informatician and hacker","powers":["Hacking","Programming","Cybersecurity"]},{"id":1343,"name":"Diego Iron Man 312","alterego":"Tony Stark Diego Put","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1344,"name":"Nombre-40980860-67f2-4164-856b-886eb56c23af","alterego":"Bruce Wayne","description":"the Dark Knight","powers":["Money","Investment","Martial Arts"]},{"id":1345,"name":"BatMans 2026","alterego":"Bruce Wayne","description":"the Dark Knight in Gotham City","powers":["Money","Investment","Martial Arts","Detective Skills","Gadgets"]},{"id":1348,"name":"Iron Man_e06abffa-f93b-4ad0-899d-75eb870ee4dc","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1352,"name":"Super Hero Test 6910","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":1353,"name":"Super Hero Test 8267","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":1355,"name":"Super Hero Test 4230","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":1356,"name":"Nombre-f6b66165-4cfa-4692-818c-55b8011433e4","alterego":"Bruce Wayne","description":"the Dark Knight","powers":["Money","Investment","Martial Arts"]},{"id":1357,"name":"Iron Man_f2decac0-b687-444c-916d-4f1ca470c3c1","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1359,"name":"BatMans 2026","alterego":"Bruce Wayne","description":"the Dark Knight in Gotham City","powers":["Money","Investment","Martial Arts","Detective Skills","Gadgets"]},{"id":1361,"name":"Alexis Name 11 Updated","alterego":"Alexis Alterego 1 Updated","description":"Alexis Description 1 Updated","powers":["Armor","Flight"]},{"id":1362,"name":"Deadpool jusimban313","alterego":"Wade Winston Wilson","description":"Mercenario, supervillano[0xe2][0x80][0x8b][0xe2][0x80][0x8b] y antih[0xc3][0xa9]roe","powers":["Immortality","Regeneration","Superhuman strength"]},{"id":1363,"name":"Diego Iron Man 5988","alterego":"Tony Stark Diego Post","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1365,"name":"Alexis Name 21 Updated","alterego":"Alexis Alterego 2 Updated","description":"Alexis Description 2 Updated","powers":["Armor","Flight"]},{"id":1366,"name":"PnxfrAUkzU","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1367,"name":"Iron Man344","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1368,"name":"Iron Man Cambiado por DiegoF","alterego":"Tony Stark Diego Put","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1369,"name":"Nuevo Personaje #1053","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1371,"name":"Alexis Name 31 Updated","alterego":"Alexis Alterego 3 Updated","description":"Alexis Description 3 Updated","powers":["Armor","Flight"]},{"id":1372,"name":"Iron Man-4e12bd59-907b-459d-b1de-576154477fbc","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1373,"name":"Capitan America-57112e67-65b8-47bd-b531-442462a8110a","alterego":"Steve Rogers","description":"Updated description","powers":["Shield","Leadership"]},{"id":1375,"name":"ERROR_TRIGGER","alterego":"Peter Parker","description":"Superh[0xc3][0xa9]roe ar[0xc3][0xa1]cnido de Marvel","powers":["Agilidad","Sentido ar[0xc3][0xa1]cnido","Trepar muros"]},{"id":1376,"name":"Iron Man","alterego":"Tony Stark X","description":"Updated description","powers":["Armor","Flight"]},{"id":1377,"name":"Matrix","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1380,"name":"JC Castle","alterego":"Super Dev","description":"Super Backend developer Updated","powers":["Java","WebFlux","Spring Boot","Kotlin","PostgreSQL","Redis","Docker","Kubernetes"]},{"id":1381,"name":"Iron Man Infernal Karate -cba5f334-5d4f-499f-a6ad-02c1d96d672e","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1382,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":1385,"name":"ObiWa Man","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1387,"name":"Captain America 1750436514108","alterego":"Steve Rogers","description":"Super soldier with enhanced strength and agility","powers":["Super Strength","Enhanced Agility","Vibranium Shield"]},{"id":1388,"name":"Hulk 1750436514838","alterego":"Bruce Banner","description":"Scientist with the ability to transform into a giant green monster","powers":["Super Strength","Regeneration","Durability"]},{"id":1389,"name":"Stan Ford","alterego":"Uncle Stan","description":"Genius","powers":["Super Intelligence","Flight"]},{"id":1390,"name":"Iron Man","alterego":"Tony Stark X","description":"Updated description","powers":["Armor","Flight"]},{"id":1391,"name":"Black Widow 1750436520351","alterego":"Natasha Romanoff","description":"Skilled spy and martial artist","powers":["Combat Expert","Espionage","Tactical Intelligence"]},{"id":1393,"name":"Jose Obando 1750436525942",""
12:08:40.501 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "alterego":"Tony Stark","[\r][\n]"
12:08:40.501 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "2000[\r][\n]"
12:08:40.501 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1395,"name":"Thor 1750436526065","alterego":"Thor Odinson","description":"God of Thunder from Asgard","powers":["Weather Control","Mjolnir","Superhuman Strength"]},{"id":1398,"name":"Captain America 1750436531778","alterego":"Steve Rogers","description":"Super soldier with enhanced strength and agility","powers":["Super Strength","Enhanced Agility","Vibranium Shield"]},{"id":1399,"name":"jzapata_1750436535878","alterego":"Jhonny Zapata","description":"Genius informatician and hacker","powers":["Hacking","Programming","Cybersecurity"]},{"id":1401,"name":"Iron Man Rafaeli1w7qfjj","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1402,"name":"Hero_bb402c38","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1403,"name":"Silvana Bentacourt v1-1750436537854","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1404,"name":"Iron Man Test 1750436544363","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1405,"name":"Iron Man Test 1750436570336","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1406,"name":"Jose Obando 1750436571114","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1407,"name":"Alexis Name 11","alterego":" Alexis Alterego 1","description":" Alexis Description 1","powers":["Armor","Flight"]},{"id":1408,"name":"Alexis Name 21","alterego":" Alexis Alterego 2","description":" Alexis Description 2","powers":["Armor","Flight"]},{"id":1409,"name":"IronMan-50612d54-d3c7-4f9b-9e8f-2fb7090411ca","alterego":"Santiago Sanchez","description":"Ge"
12:08:40.507 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "nius billionaire","powers":["Armor","Flight"]},{"id":1410,"name":"Alexis Name 31","alterego":" Alexis Alterego 3","description":" Alexis Description 3","powers":["Armor","Flight"]},{"id":1412,"name":"Silvana Bentacourt v1-1750436571015","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1413,"name":"Nombre de prueba","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1414,"name":"Iron Man c191645a-3218-492c-985b-c855bdaf51e6","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1415,"name":"Iron Man ab618b58-a6df-4000-8efd-22e96eee2c64","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1416,"name":"Iron Man ca6d24b1-962b-4073-932c-41bed9888ac1","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1417,"name":"Iron Man c86756c9-9579-4b51-b1c9-f77f4deec97c","alterego":"Tony Stark","description":"Genius "
12:08:40.508 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "billionaire","powers":["Armor","Flight"]},{"id":1418,"name":"Iron Man 0f0fe82d-0cab-4294-b622-545485a24e00","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1419,"name":"Iron Man 26703c82-0639-4505-bb7f-1adfcd9e4b3e","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1420,"name":"Iron Man ff7c111c-e27d-4c1f-b58f-747922a852c6","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1421,"name":"Iron Man 98f2a55a-6ee2-4671-8c02-972007d477ce","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1423,"name":"Iron Man bf85a8c5-892c-46ef-ab88-0b263ffbf6b8","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1424,"name":"Iron Man Rafael3pr28qao","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1426,"name":"Iron Man-dd70ea9b-ef66-4af6-834e-c4c2d59023a7","alterego":"To"
12:08:40.508 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "ny Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1427,"name":"Iron Man Test 1750436590806","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1428,"name":"Capitan America-3fa92d1d-d2eb-4507-bf27-2afbe692a796","alterego":"Steve Rogers","description":"Updated description","powers":["Shield","Leadership"]},{"id":1430,"name":"Iron Man Rafael4323ez36","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1432,"name":"jzapata_1750436624387","alterego":"Jhonny Zapata","description":"Genius informatician and hacker","powers":["Hacking","Programming","Cybersecurity"]},{"id":1433,"name":"Iron Man","alterego":"Tony Stark X","description":"Updated description","powers":["Armor","Flight"]},{"id":1434,"name":"I2_815eb3d0-3574-40ea-a2c1-3d32c2f0fb0f","alterego":"Steve Rogers","description":"Super soldier","powers":["Super Strength","Shield"]},{"id":1437,"name":"Iron Maiden 4","alterego":"Tony Stark","description"
12:08:40.508 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "":"Genius billionaire","powers":["Armor","Flight"]},{"id":1438,"name":"Iron Man 1c153f5f-ee7c-48e0-b695-f22fb9f1c0c1","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1439,"name":"Iron Man d6b0d798-2d3e-4ba1-9604-419697388e2b","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1440,"name":"Super Hero Test 8826","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":1441,"name":"Iron Man 3d87490a-e78f-48d9-862c-63ce107bfde1","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1442,"name":"Iron Man 77be1415-e0e0-42a1-8c45-f31ce2131522","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1443,"name":"Iron Man bff6411b-a0c9-4783-8281-c0f13372f923","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1445,"name":"Ir"
12:08:40.508 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "on Man 224dc2a2-9802-4203-a07f-5e14e1132d22","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1446,"name":"Iron Man b7d12b9e-87a8-4ded-a326-e7c364a9b45c","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1447,"name":"Iron Man e759307c-7a7e-4a64-a33f-1513d518aefc","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1448,"name":"Iron Man c01be999-e57c-4d5c-ad6d-23e00a8b23ae","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1449,"name":"Super Hero Test 8764","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":1450,"name":"Iron Man Rafael21rl5dc6","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1451,"name":"Jose Obando 1750436656812","alterego":"Tony Stark","description":"Genius billionaire","powers":[""
12:08:40.508 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "Armor","Flight"]},{"id":1453,"name":"Gabo R","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1454,"name":"Iron Man","alterego":"Tony Stark X","description":"Updated description","powers":["Armor","Flight"]},{"id":1455,"name":"jzapata_1750436674171","alterego":"Jhonny Zapata","description":"Genius informatician and hacker","powers":["Hacking","Programming","Cybersecurity"]},{"id":1457,"name":"Iron Man Rafaelnaqn1s1k","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1458,"name":"Nuevo Personaje #4920","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1460,"name":"Spider-Man yyyy","alterego":"Peter Parker","description":"Superh[0xc3][0xa9]roe ar[0xc3][0xa1]cnido de Marvel","powers":["Agilidad","Sentido ar[0xc3][0xa1]cnido","Trepar muros"]},{"id":1462,"name":"Sonic-8a9d55ac-7a2d-41f0-97ea-2f5a6a03444a","alterego":"Super sonico","description":"Erizo azul con super velocidad","powers":["velocidad","agilidad","re"
12:08:40.508 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "sistencia"]},{"id":1463,"name":"Blue Ranger","alterego":"Billy","description":"Blue Power Ranger","powers":["Intelligence","Technology"]},{"id":1464,"name":"Iron Man Rafaelqfbg6ugx","alterego":"Tony Stark","description":"Genius billionaire","powers":["Ar[\r][\n]"
12:08:40.508 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "2000[\r][\n]"
12:08:40.508 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "mor","Flight"]},{"id":1465,"name":"Spider-Man-Dev","alterego":"Peter Parker","description":"Superh[0xc3][0xa9]roe ar[0xc3][0xa1]cnido de Marvel","powers":["Agilidad","Sentido ar[0xc3][0xa1]cnido","Trepar muros"]},{"id":1466,"name":"Iron Man Infernal Karate -1f279f80-367d-4966-97bf-8e7f397738df","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1467,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":1468,"name":"mario almeida","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1470,"name":"Travis Scott","alterego":"Cactus Jack","description":"Genius","powers":["Super Intelligence"]},{"id":1471,"name":"IronMan-666081ee-7add-467b-ac2e-b7c6b39c01e9","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1472,"name":"#(nameData)","alterego":"Otro","description":"Otro","powers":["Armor"]},{"id":1473,"name":"Sonic-27be9aa0-0728-4125-a5bc-587168de6748","alterego":"Super sonico","description":"Erizo azul con super velocidad","powers":["velocidad","agilidad","resistencia"]},{"id":1474,"name":"Super Girl - TM","alterego":"Tony Clack Kent","description":"Strong woman","powers":["Armor","Flight"]},{"id":1475,"name":"dCeXACNjkn","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1477,"name":"Super Hero Test 1729","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":1478,"name":"Super Hero Test 9898","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":1482,"name":"Super Hero Test 1751","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":1484,"name":"Iron Man Test 1750436736433","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1485,"name":"Iron Man","alterego":"Tony Stark X","description":"Updated description","powers":["Armor","Flight"]},{"id":1486,"name":"Iron Man Test 1750436743691","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1487,"name":"Sonic-53f432ff-811b-470e-9182-2d6955dcebfe","alterego":"Super sonico","description":"Erizo azul con super velocidad","powers":["velocidad","agilidad","resistencia"]},{"id":1488,"name":"Iron Maiden 6","alterego":"Tony Mayor","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1489,"name":"jzapata_1750436752963","alterego":"Jhonny Zapata","description":"Genius informatician and hacker","powers":["Hacking","Programming","Cybersecurity"]},{"id":1491,"name":"Franklin Gomez Cabrera","alterego":"Foundation","description":"Genius Power Single","powers":["Dev","soft-skills","Frontend"]},{"id":1492,"name":"Iron Man1","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1493,"name":"Freddy Tacuri1","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1494,"name":"Kramerx1","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1495,"name":"Sonic-c2602c70-eaf4-479b-a2de-88d7222afe31","alterego":"Super sonico","description":"Erizo azul con super velocidad","powers":["velocidad","agilidad","resistencia"]},{"id":1496,"name":"Iron Man","alterego":"Tony Stark X","description":"Updated description","powers":["Armor","Flight"]},{"id":1497,"name":"Iron Man-1957303c-fab2-463b-a2c9-9657fa36310a","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1499,"name":"Capitan America-dacb902f-b9a6-48fd-baca-8e9eec80c213","alterego":"Steve Rogers","description":"Updated description","powers":["Shield","Leadership","Dev"]},{"id":1502,"name":"Sonic-e0f9a38e-797c-4f5c-8755-9f8b2dc42da9","alterego":"Super sonico","description":"Erizo azul con super velocidad","powers":["velocidad","agilidad","resistencia"]},{"id":1503,"name":"Freddy Tacuri12","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1504,"name":"Jose Obando 1750436811930","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1505,"name":"Super Hero Test 9825","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":1506,"name":"Super Hero Test 6353","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":1508,"name":"Super Hero Test 3849","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":1509,"name":"Nuevo Personaje #7508","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1511,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":1513,"name":"I2_ccff54e6-4f73-4f79-814f-5db7ddb11bc7","alterego":"Steve Rogers","description":"Super soldier","powers":["Super Strength","Shield"]},{"id":1514,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":1516,"name":"Capitana Marvel","alterego":"Tony Starker","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1519,"name":"Black panter","alterego":"T Challa","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1520,"name":"Hero-64799","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1521,"name":"Jose Obando 1750436867264","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1523,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":1524,"name":"Hero-55585","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1525,"name":"Character-857a7bda","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1526,"name":"Character-87ecf99c","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1527,"name":"Iron Man-1bcbf309-a820-45b8-b05f-a4c9fc1d9773","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1528,"name":"Capitan America-4d9de111-9326-46f1-abe0-1c1d8afb5c26","alterego":"Steve Rogers","description":"Updated description","powers":["Shield","Leadership","Dev"]},{"id":1530,"name":"Iron Man Rafaelcvf18oip","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1531,"name":"Character-d55a91a5","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1535,"name":"Character-a4d46160","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":1536,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":1538,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":1539,"name":"Kramerx2","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1540,"name":"CohetePlus20","alterego":"Cohete Plus","description":"Cohetito Plus","powers":["Armors","Flight"]},{"id":1541,"name":"Jose Obando 1750436903090","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1542,"name":"Jacqui3","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1543,"name":"Super Hero Test 3737","alterego":"Cristian Ruiz","d"
12:08:40.508 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "escription":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":1544,"name":"Super Hero Test 451","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Mak[\r][\n]"
12:08:40.508 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "2000[\r][\n]"
12:08:40.508 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "e Coffee","Solve Problems"]},{"id":1546,"name":"Super Hero Test 5099","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":1547,"name":"Alexis Name 111","alterego":" Alexis Alterego 1","description":" Alexis Description 1","powers":["Armor","Flight"]},{"id":1548,"name":"Alexis Name 211","alterego":" Alexis Alterego 2","description":" Alexis Description 2","powers":["Armor","Flight"]},{"id":1549,"name":"Alexis Name 311","alterego":" Alexis Alterego 3","description":" Alexis Description 3","powers":["Armor","Flight"]},{"id":1551,"name":"Gabo R ","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1553,"name":"Diego Iron Man 3390","alterego":"Tony Stark Diego Post","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1555,"name":"Iron Man six","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1556,"name":"Iron Man Cambiado por DiegoF","alterego":"Tony Stark Diego Put","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1558,"name":"Spider-Man-aa808c6c-874a-4f40-a274-66dff08e3ffe","alterego":"Peter Parker","description":"Friendly neighborhood Spider-Man","powers":["Wall-crawling","Spider-sense"]},{"id":1559,"name":"Edulima 4","alterego":"Edu Lima","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1561,"name":"Iron Man - e6da2216","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1563,"name":"Marvel Green Goblin","alterego":"Boby","description":"Student","powers":["Armor","Flight"]},{"id":1564,"name":"Spider-Man 208","alterego":"Peter Parker","description":"El amigable vecino Spider-Man","powers":["Sentido ar[0xc3][0xa1]cnido","Trepar paredes","Lanzar telara[0xc3][0xb1]as"]},{"id":1565,"name":"Franz Hermans","alterego":"Max Verstappen","description":"F1 driver","powers":["Armor","Flight"]},{"id":1566,"name":"Nuevo Personaje #8214","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1568,"name":"Captain America 1750436981625","alterego":"Steve Rogers","description":"Super soldier with enhanced strength and agility","powers":["Super Strength","Enhanced Agility","Vibranium Shield"]},{"id":1569,"name":"Iron Man #8962","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1570,"name":"Hulk 1750436982428","alterego":"Bruce Banner","description":"Scientist with the ability to transform into a giant green monster","powers":["Super Strength","Regeneration","Durability"]},{"id":1571,"name":"Spider-Man #3772","alterego":"Peter Parker","description":"Friendly neighborhood","powers":["Agility","Spider Sense"]},{"id":1572,"name":"Captain Marvel #1636","alterego":"Carol Danvers","description":"Cosmic powers","powers":["Energy Blasts","Flight"]},{"id":1573,"name":"Jose Obando 1750436986733","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1574,"name":"Black Widow 1750436983895","alterego":"Natasha Romanoff","description":"Skilled spy and martial artist","powers":["Combat Expert","Espionage","Tactical Intelligence"]},{"id":1575,"name":"UpdateTest_fd6c4aa5_Updated","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":1576,"name":"Hero_362e2238","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1577,"name":"Captain America 1750436987323","alterego":"Steve Rogers","description":"Super soldier with enhanced strength and agility","powers":["Super Strength","Enhanced Agility","Vibranium Shield"]},{"id":1578,"name":"Iron Man - 501d18ba","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1579,"name":"rMtqpneQmC","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1581,"name":"I2_b6ca27b5-1c38-438d-a9b1-5a6ab9d6f292","alterego":"Steve Rogers","description":"Super soldier","powers":["Super Strength","Shield"]},{"id":1583,"name":"Nuevo Personaje #6815","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1585,"name":"Iron Man #7781","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1586,"name":"Spider-Man #5722","alterego":"Peter Parker","description":"Friendly neighborhood","powers":["Agility","Spider Sense"]},{"id":1587,"name":"Captain Marvel #6581","alterego":"Carol Danvers","description":"Cosmic powers","powers":["Energy Blasts","Flight"]},{"id":1589,"name":"Iron Man Rafaeluadk4kep","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1592,"name":"Nova","alterego":"Richard Rider","description":"Miembro del Nova Corps","powers":["Vuelo","Superfuerza","Energ[0xc3][0xad]a"]},{"id":1593,"name":"Spider-Man","alterego":"Peter Parker","description":"Otro intento duplicado","powers":["Agilidad"]},{"id":1594,"name":"Iron Man Rafaelppn7jhc2","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1596,"name":"Super Rein 1e2ffb83-9c33-4e39-8311-66e09e56ab11","alterego":"Rein","description":"Genius billionaire Pro Tekken Player","powers":["Armor","Flight"]},{"id":1597,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":1599,"name":"Captain Marvel test12","alterego":"Carol Danvers","description":"the biggest hero in the world","powers":["Flight","Force"]},{"id":1600,"name":"Jose Obando 1750437038770","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1601,"name":"Super Hero Test 153","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":1602,"name":"Super Hero Test 2196","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":1604,"name":"Iron Man Infernal Karate -44ec2ea2-9d89-4a47-bca8-d5976c1d316c","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1605,"name":"Super Hero Test 407","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":1606,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":1608,"name":"Character-1815","alterego":"Alter-9045","description":"Description-4623","powers":["Power-3284"]},{"id":1609,"name":"Sonic-2f9def7b-78e0-4ff2-a3fa-0b403a918403","alterego":"Super sonico","description":"Erizo azul con super velocidad","powers":["velocidad","agilidad","resistencia"]},{"id":1611,"name":"Jose Obando 1750437074994","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1612,"name":"Nuevo Personaje #3638","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1614,"name":"Blue Beetle #6883","alterego":"Jaime Reyes","description":"Teen fused with alien tech","powers":["Scarab Armor","Energy Blasts"]},{"id":1615,"name":"Spider-Man #2326","alterego":"Peter Parker","description":"Friendly neighborhood","powers":["Agility","Spider Sense"]},{"id":1616,"name":"Captain Marvel #1923","alterego":"Carol Danvers","description":"Cosmic powers","powers":["Energy Blasts","Flight"]},{"id":1617,"name":"Edulima 5","alterego":"Edu Lima","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1618,"name":"Data1 Data2","alterego":"Cactus Jack","description":"Genius","powers":["Super Intelligence"]},{"id":1619,"name":"Vision America 5f9b41","alterego":"All jsi","description":"Superpower","powers":["Teletransportacion","Jugar futbol"]},{"id":1620,"name":"Iron Man "
12:08:40.508 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "Test 1750437089396","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1621,"name":"Jose Obando 1750437094507","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1622,"name":"Iron Man [\r][\n]"
12:08:40.508 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "2000[\r][\n]"
12:08:40.509 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "seven","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1623,"name":"IronMan-c144768d-4653-49ce-ab8b-834a9dc8f678","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1624,"name":"IronMan-25742a1a-661a-465e-8ad2-bf859922bd1a","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1625,"name":"AEflKVdyGB","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1626,"name":"ASD","alterego":"Peter Parker","description":"Superh[0xc3][0xa9]roe ar[0xc3][0xa1]cnido de Marvel","powers":["Agilidad","Sentido ar[0xc3][0xa1]cnido","Trepar muros"]},{"id":1627,"name":"IronMan-59782c49-091c-40a1-a804-0339790bba4c","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1628,"name":"Diego Iron Man 9682","alterego":"Tony Stark Diego Post","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1629,"name":"IronMan-6b324968-2f8f-4962-9509-4e98fafe8c76","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1630,"name":"IronMan-7f4d3b62-6c8d-4193-8fe3-15a0c8bce849","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1631,"name":"IronMan-8590621c-a897-4542-8520-eee5c179b8bd","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1633,"name":"IronMan-b8ed93fb-b0b9-4e9f-836c-fbf5b6a25db0","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1634,"name":"IronMan-02db8c77-56fb-41af-bd20-fc30a603219c","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1635,"name":"IronMan-3d104fb0-f0f6-4743-b362-4b3b17563f59","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1636,"name":"IronMan-684b8a48-c821-4ef1-b51c-6fb941180e0b","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1637,"name":"Iron Man 7c85852a-3566-452f-9e18-fdefe61553ab","alterego":"Tony Stark tst","description":"Genius billionaire tst4","powers":["Armor tst4","Flight tst4"]},{"id":1638,"name":"IronMan-14b6b4b2-a59d-4c8c-b103-668fbc96d101","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1639,"name":"Iron Man Cambiado por DiegoF","alterego":"Tony Stark Diego Put","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1640,"name":"IronMan-c58e5a51-fe43-48ce-b910-d4b3382342ac","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1642,"name":"Iron Man3443","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1643,"name":"Iron Man 393e3499-60e2-4850-9dc1-9a24dad04ab3","alterego":"Tony Stark tst","description":"Genius billionaire tst4","powers":["Armor tst4","Flight tst4"]},{"id":1645,"name":"Iron Man - 925e4cbb","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1646,"name":"Nuevo Personaje #1638","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1648,"name":"Blue Beetle #3529","alterego":"Jaime Reyes","description":"Teen fused with alien tech","powers":["Scarab Armor","Energy Blasts"]},{"id":1649,"name":"Spider-Man #8433","alterego":"Peter Parker","description":"Friendly neighborhood","powers":["Agility","Spider Sense"]},{"id":1650,"name":"Captain Marvel #2046","alterego":"Carol Danvers","description":"Cosmic powers","powers":["Energy Blasts","Flight"]},{"id":1651,"name":"Captain America 1750437122271","alterego":"Steve Rogers","description":"Super soldier with enhanced strength and agility","powers":["Super Strength","Enhanced Agility","Vibranium Shield"]},{"id":1652,"name":"Hulk 1750437122940","alterego":"Bruce Banner","description":"Scientist with the ability to transform into a giant green monster","powers":["Super Strength","Regeneration","Durability"]},{"id":1653,"name":"Ghost Rider JC2","alterego":"Ghost Rider JC2","description":"Demon","powers":["Fire","Punishing gaze"]},{"id":1654,"name":"Ghost Rider JC Updated","alterego":"Ghost Rider JC Updated","description":"Demon Updated","powers":["Fire","Punishing gaze"]},{"id":1655,"name":"Black Widow 1750437124381","alterego":"Natasha Romanoff","description":"Skilled spy and martial artist","powers":["Combat Expert","Espionage","Tactical Intelligence"]},{"id":1657,"name":"Thor 1750437126035","alterego":"Thor Odinson","description":"God of Thunder from Asgard","powers":["Weather Control","Mjolnir","Superhuman Strength"]},{"id":1659,"name":"Captain America 1750437127690","alterego":"Steve Rogers","description":"Super soldier with enhanced strength and agility","powers":["Super Strength","Enhanced Agility","Vibranium Shield"]},{"id":1661,"name":"Jose Obando 1750437136613","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1662,"name":"Iron Man 56f36a76-f229-45cf-b2ba-4214b1d438fb","alterego":"Tony Stark tst","description":"Genius billionaire tst4","powers":["Armor tst4","Flight tst4"]},{"id":1664,"name":"Character-7495","alterego":"Alter-8421","description":"Description-9261","powers":["Power-8871"]},{"id":1665,"name":"UpdateTest_26c8645c","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1666,"name":"Iron Man 8050de98-ac7d-4992-8e7a-3df4755a1632","alterego":"Tony Stark tst","description":"Genius billionaire tst4","powers":["Armor tst4","Flight tst4"]},{"id":1668,"name":"Hero_40008c77","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1669,"name":"UpdateTest_937a5fc4","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1670,"name":"DeleteTest_b7e67979","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1671,"name":"Franzs Hermans","alterego":"Max Verstappenn","description":"F1 driver","powers":["Armor","Flight"]},{"id":1672,"name":"Super Hero Test 654","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":1674,"name":"I2_f41d8261-4ff7-4e4e-a01f-91f1164d23d9","alterego":"Steve Rogers","description":"Super soldier","powers":["Super Strength","Shield"]},{"id":1675,"name":"IronMan","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":1677,"name":"Andres P","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1678,"name":"Jose Obando 1750437223504","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1679,"name":"Sonic-409432e0-fd6b-45a6-ab12-2626b448b1c0","alterego":"Super sonico","description":"Erizo azul con super velocidad","powers":["velocidad","agilidad","resistencia"]},{"id":1680,"name":"Character-4417","alterego":"Alter-9809","description":"Description-1207","powers":["Power-9351"]},{"id":1681,"name":"Super Hero Test 3958","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":1682,"name":"Super Hero Test 8206","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":1684,"name":"Sonic-3e6849ed-9ac0-4615-83f2-c3064b7d6d9d","alterego":"Super sonico","description":"Erizo azul con super velocidad","powers":["velocidad","agilidad","resistencia"]},{"id":1685,"name":"Super Hero Test 405","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":1686,"name":"Iron Man b1571f4c-f911-4570-8730-dd31c59461ff","alterego""
12:08:40.509 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << ":"Tony Stark tst","description":"Genius billionaire tst4","powers":["Armor tst4","Flight tst4"]},{"id":1688,"name":"Iron Man f75f3dd9-6e4e-43b6-bd76-accfb6577dbf","alterego":"Tony Stark tst","description":"Genius billionaire tst4","powers":["Armor tst4","Flight tst4"]},{"id":16[\r][\n]"
12:08:40.509 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "2000[\r][\n]"
12:08:40.509 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "91,"name":"Captain Marvel test13","alterego":"Carol Danvers","description":"Updated description","powers":["Flight","Force"]},{"id":1692,"name":"Iron Woman 85f14a","alterego":"All jsi","description":"Superpower","powers":["Teletransportacion","Jugar futbol"]},{"id":1693,"name":"Iron Man 87","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1696,"name":"Iron Man 434c3e6f-66e4-490b-b555-0d75a9df584b","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1697,"name":"Iron Man - a4c7b37c","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1698,"name":"Kramerx3","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1699,"name":"Captain America 1750437265922","alterego":"Steve Rogers","description":"Super soldier with enhanced strength and agility","powers":["Super Strength","Enhanced Agility","Vibranium Shield"]},{"id":1700,"name":"Hulk 1750437266634","alterego":"Bruce Banner","description":"Scientist with the ability to transform into a giant green monster","powers":["Super Strength","Regeneration","Durability"]},{"id":1701,"name":"Black Widow 1750437268076","alterego":"Natasha Romanoff","description":"Skilled spy and martial artist","powers":["Combat Expert","Espionage","Tactical Intelligence"]},{"id":1702,"name":"Thor 1750437269717","alterego":"Thor Odinson","description":"God of Thunder from Asgard","powers":["Weather Control","Mjolnir","Superhuman Strength"]},{"id":1703,"name":"Ghost Rider JC 0b749e11-83a2-4437-a584-f0a51668e77e","alterego":"Ghost Rider JC2","description":"Demon","powers":["Fire","Punishing gaze"]},{"id":1704,"name":"Ghost Rider JC Updated","alterego":"Ghost Rider JC Updated","description":"Demon Updated","powers":["Fire","Punishing gaze"]},{"id":1706,"name":"Captain America 1750437271333","alterego":"Steve Rogers","description":"Super soldier with enhanced strength and agility","powers":["Super Strength","Enhanced Agility","Vibranium Shield"]},{"id":1707,"name":"Iron Manxx","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1708,"name":"Super Rein a41df5ef-99f2-47e1-adb7-08d113c6e42a","alterego":"Rein","description":"Genius billionaire Pro Tekken Player","powers":["Armor","Flight"]},{"id":1709,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":1710,"name":"Sonic-82612ddf-0cfe-4cc7-a21d-ddfdf79116df","alterego":"Super sonico","description":"Erizo azul con super velocidad","powers":["velocidad","agilidad","resistencia"]},{"id":1711,"name":"Sonic-8734668d-d635-4d2e-8ef4-45039e8cc7a6","alterego":"Super sonico","description":"Erizo azul con super velocidad","powers":["velocidad","agilidad","resistencia"]},{"id":1712,"name":"Super Rein 8f339dc1-9543-434b-bc55-037ccd86b70a","alterego":"Rein","description":"Genius billionaire Pro Tekken Player","powers":["Armor","Flight"]},{"id":1713,"name":"Edulima 6","alterego":"Edu Lima","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1714,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":1716,"name":"Iron Man 75666779-545f-46e0-b340-c8a808b84919","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1717,"name":"Nuevo Personaje #4809","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1719,"name":"Iron Man445333","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1720,"name":"Blue Beetle #7284","alterego":"Jaime Reyes","description":"Teen fused with alien tech","powers":["Scarab Armor","Energy Blasts"]},{"id":1721,"name":"Sonic-782ab37b-c993-4514-8ce8-c13cc58e3398","alterego":"Super sonico","description":"Erizo azul con super velocidad","powers":["velocidad","agilidad","resistencia"]},{"id":1722,"name":"Spider-Man #3996","alterego":"Peter Parker","description":"Friendly neighborhood","powers":["Agility","Spider Sense"]},{"id":1723,"name":"Captain Marvel #5928","alterego":"Carol Danvers","description":"Cosmic powers","powers":["Energy Blasts","Flight"]},{"id":1724,"name":"Sonic-5a92196a-b017-4640-9f55-baf107cfc022","alterego":"Super sonico","description":"Erizo azul con super velocidad","powers":["velocidad","agilidad","resistencia"]},{"id":1726,"name":"Silvana Bentacourt v1-1750437317025","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1727,"name":"Edulima 7","alterego":"Edu Lima","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1728,"name":"Personaje actualizado-1750437320829","alterego":"Tony Stark","description":"Genius billionaire test","powers":["Armor","Flight"]},{"id":1729,"name":"Captain America 1750437330762","alterego":"Steve Rogers","description":"Super soldier with enhanced strength and agility","powers":["Super Strength","Enhanced Agility","Vibranium Shield"]},{"id":1731,"name":"I2_68ae7d95-954e-4be1-a5e0-01573fdeb515","alterego":"Steve Rogers","description":"Super soldier","powers":["Super Strength","Shield"]},{"id":1732,"name":"Hulk 1750437331373","alterego":"Bruce Banner","description":"Scientist with the ability to transform into a giant green monster","powers":["Super Strength","Regeneration","Durability"]},{"id":1733,"name":"I2_65ca6ae9-dd35-49fa-b36e-3063484c8a1f","alterego":"Steve Rogers","description":"Super soldier","powers":["Super Strength","Shield"]},{"id":1734,"name":"Black Widow 1750437332788","alterego":"Natasha Romanoff","description":"Skilled spy and martial artist","powers":["Combat Expert","Espionage","Tactical Intelligence"]},{"id":1735,"name":"Nuevo Personaje #1757","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1736,"name":"Thor 1750437334392","alterego":"Thor Odinson","description":"God of Thunder from Asgard","powers":["Weather Control","Mjolnir","Superhuman Strength"]},{"id":1739,"name":"Captain America 1750437335832","alterego":"Steve Rogers","description":"Super soldier with enhanced strength and agility","powers":["Super Strength","Enhanced Agility","Vibranium Shield"]},{"id":1740,"name":"Super Hero Test 9944","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":1741,"name":"Blue Beetle #2581","alterego":"Jaime Reyes","description":"Teen fused with alien tech","powers":["Scarab Armor","Energy Blasts"]},{"id":1742,"name":"Super Hero Test 8999","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":1743,"name":"Spider-Man #2034","alterego":"Peter Parker","description":"Friendly neighborhood","powers":["Agility","Spider Sense"]},{"id":1744,"name":"Captain Marvel #6701","alterego":"Carol Danvers","description":"Cosmic powers","powers":["Energy Blasts","Flight"]},{"id":1745,"name":"Super Hero Test 5377","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":1747,"name":"Super Hero Test 7554","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":1748,"name":"Atom Eve 350272","alterego":"Eva","description":"Inmortal","powers":["Armor","Flight"]},{"id":1749,"name":"Super Girl - TM 1750437343378","alterego":"Tony Clack Kent","description":"Strong woman","powers":["Armor","Flight"]},{"id":1751,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":1752,"name":"Iron Man2","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1754,"name":"
12:08:40.509 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << ""Iron Man Rafaelwha4ungq","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1756,"name":"Data12 Data23","alterego":"Cactus Jack","description":"Genius","powers":["Super Intelligence"]},{"id":1758,"name":"Iron Man Test 1750437375792","alterego[\r][\n]"
12:08:40.509 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "2000[\r][\n]"
12:08:40.509 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1759,"name":"Nombre-8a60d6c9-3d82-4a4d-9125-bca724ab5b74","alterego":"Bruce Wayne","description":"the Dark Knight","powers":["Money","Investment","Martial Arts"]},{"id":1760,"name":"BatMans 2026","alterego":"Bruce Wayne","description":"the Dark Knight in Gotham City","powers":["Money","Investment","Martial Arts","Detective Skills","Gadgets"]},{"id":1761,"name":"Iron Man Test 1750437382971","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1763,"name":"Super Hero Test 8932","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":1764,"name":"Super Hero Test 8209","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":1765,"name":"Super Hero Test 1029","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":1766,"name":"Hero-39484","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1767,"name":"Super Hero Test 7196","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":1768,"name":"Iron Manco","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1769,"name":"#(textoRandom)","alterego":"anamcias","description":"Developer","powers":["Angular","Karate"]},{"id":1770,"name":"Jose Obando 1750437428305","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1775,"name":"createdName","alterego":"Otro","description":"Otro","powers":["Armor"]},{"id":1776,"name":"Iron Man 2000","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1778,"name":"Spider Strange 0abf1e","alterego":"All jsi","description":"Superpower","powers":["Teletransportacion","Jugar futbol"]},{"id":1779,"name":"Silvana Bentacourt v1-1750437452969","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1780,"name":"Iron Man Test 1750437460873","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1781,"name":"Personaje actualizado-1750437456735","alterego":"Tony Stark","description":"Genius billionaire test","powers":["Armor","Flight"]},{"id":1782,"name":"Diego Iron Man 9573","alterego":"Tony Stark Diego Post","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1783,"name":"Iron Man_76a27991-1edb-4216-a6bd-ac9233d29961","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1785,"name":"Iron Man Test 1750437467910","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1787,"name":"Super Rein bd835364-f571-4ccc-af4c-d87b0f34e8a9","alterego":"Rein","description":"Genius billionaire Pro Tekken Player","powers":["Armor","Flight"]},{"id":1789,"name":"Iron Man Cambiado por DiegoF","alterego":"Tony Stark Diego Put","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1790,"name":"Sonic-06653699-8ceb-4ffd-bcf0-90e67dd844be","alterego":"Super sonico","description":"Erizo azul con super velocidad","powers":["velocidad","agilidad","resistencia"]},{"id":1791,"name":"User_0f3a5a37","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1792,"name":"User_6e82c7bd","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1793,"name":"User_aa7299f6","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":1794,"name":"Iron Man Test 1750437481487","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1796,"name":"Iron Man geod1","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1797,"name":"Atom Eve 181259","alterego":"Eva","description":"Inmortal","powers":["Armor","Flight"]},{"id":1800,"name":"Iron Man Test 1750437489397","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1801,"name":"IronMan-34cc6284-256f-488c-ab62-409c7cdd500b","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1802,"name":"Nombre-5effe1c0-cc2c-4868-b661-6c27da7a5049","alterego":"Bruce Wayne","description":"the Dark Knight","powers":["Money","Investment","Martial Arts"]},{"id":1803,"name":"Iron Manass","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1804,"name":"BatMans 2026","alterego":"Bruce Wayne","description":"the Dark Knight in Gotham City","powers":["Money","Investment","Martial Arts","Detective Skills","Gadgets"]},{"id":1806,"name":"Thor Lord 311435","alterego":"All jsi","description":"Superpower","powers":["Teletransportacion","Jugar futbol"]},{"id":1807,"name":"Iron Man test - aa","alterego":"Tony Stark aa","description":"Genius billionaire - aa","powers":["Armor","Flight","unity"]},{"id":1808,"name":"Iron Marck85003","alterego":"Marco Jativa","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1810,"name":"Sonic-7e395f4b-8b4d-4c03-8215-f1fff41a96ee","alterego":"Super sonico","description":"Erizo azul con super velocidad","powers":["velocidad","agilidad","resistencia"]},{"id":1812,"name":"Iron Man - ed8fc526","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1813,"name":"Iron Manaa","alterego":"Otro","description":"Otro","powers":["Armor"]},{"id":1814,"name":"Iron Man New","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1815,"name":"Iron Man Infernal Karate -3f3355f5-b5d1-4d72-8b08-bd266869c222","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1816,"name":"Super Hero Test 3776","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":1817,"name":"Super Hero Test 1799","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":1818,"name":"Super Hero Test 1922","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":1819,"name":"Iron Man Infernal Karate -e505b9a8-c86a-4592-8448-a02ce35dbf29","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1820,"name":"Super Hero Test 9097","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":1821,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":1823,"name":"Iron Man Test 1750437554401","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1824,"name":"Personaje/Test b9ff5375-8cde-4832-8e61-7b4caa0074e1","alterego":"bcarrill","description":"Test","powers":["Armor","Flight"]},{"id":1825,"name":"Wonder Soldier 0e41a0","alterego":"All jsi","description":"Superpower","powers":["Teletransportacion","Jugar futbol"]},{"id":1826,"name":"mSkRCzogyj","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1828,"name":"gILbJf7sa8ef","alterego":"anamcias","description":"Developer","powers":["Angular","Karate"]},{"id":1829,"name":"GxLh5zp0xXWg","alterego":"anamcias","description":"Developer","powers":["Angular","Karate"]},{"id":1830,"name":"Iron Man_5998769d-358f-4e41-b2"
12:08:40.509 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "1d-eea0bf5df34c","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1833,"name":"Iron Man_aa3f814f-6f16-4689-bc2b-1ccec322b40f","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1835,"name":"Super Hero Test [\r][\n]"
12:08:40.509 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "2000[\r][\n]"
12:08:40.509 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "782","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":1836,"name":"Super Hero Test 459","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":1838,"name":"Super Hero Test 2636","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":1839,"name":"Iron Man Test 1750437580554","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1841,"name":"I2_f7c36899-a78f-43b5-9f84-d23379e83d62","alterego":"Steve Rogers","description":"Super soldier","powers":["Super Strength","Shield"]},{"id":1843,"name":"I2_5d7f7dfa-999a-49d1-8aa9-4bfca2f54630","alterego":"Steve Rogers","description":"Super soldier","powers":["Super Strength","Shield"]},{"id":1844,"name":"Iron Man44533331","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1845,"name":"Iron Man - 004c2dea","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1846,"name":"Super Hero Test 6389","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":1848,"name":"Super Hero Test 6408","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":1849,"name":"Captain America 1750437605601","alterego":"Steve Rogers","description":"Super soldier with enhanced strength and agility","powers":["Super Strength","Enhanced Agility","Vibranium Shield"]},{"id":1850,"name":"Hulk 1750437606252","alterego":"Bruce Banner","description":"Scientist with the ability to transform into a giant green monster","powers":["Super Strength","Regeneration","Durability"]},{"id":1851,"name":"Black Widow 1750437607692","alterego":"Natasha Romanoff","description":"Skilled spy and martial artist","powers":["Combat Expert","Espionage","Tactical Intelligence"]},{"id":1852,"name":"Iron Man 99999","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1853,"name":"Thor 1750437609373","alterego":"Thor Odinson","description":"Updated description for testing","powers":["Weather Control","Mjolnir","Superhuman Strength"]},{"id":1855,"name":"Diego Iron Man 6564","alterego":"Tony Stark Diego Post","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1856,"name":"updated1","alterego":"Mark Grayson","description":"Human","powers":["String","Flight"]},{"id":1858,"name":"Character-1203","alterego":"Alter-1160","description":"Description-3717","powers":["Power-8057"]},{"id":1859,"name":"Hero-14897","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1861,"name":"Iron Man Cambiado por DiegoF","alterego":"Tony Stark Diego Put","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1862,"name":"IronMan-a86f642d-f20e-49ec-a7b1-a5bd8f41ecd2","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1863,"name":"Sonic-b8128d10-6cb2-4e76-8ac4-ac4abf719658","alterego":"Super sonico","description":"Erizo azul con super velocidad","powers":["velocidad","agilidad","resistencia"]},{"id":1864,"name":"Personaje/Test 0193cb68-050f-4963-9e58-8cbe3149e96f","alterego":"bcarrill","description":"Test","powers":["Armor","Flight"]},{"id":1865,"name":"Andres P2","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1866,"name":"Iron Man222","alterego":"Tony Stark222","description":"Genius billionaire222","powers":["Armor","Flight"]},{"id":1868,"name":"Iron Man Test 1750437632562","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1869,"name":"Hulk Woman df0668","alterego":"All jsi","description":"Superpower","powers":["Teletransportacion","Jugar futbol"]},{"id":1871,"name":"Iron Man asd","alterego":"Tony Stark asd","description":"Genio, millonario, playboy, fil[0xc3][0xa1]ntropo","powers":["Armadura","Inteligencia"]},{"id":1872,"name":"Atom Eve 575588","alterego":"Eva","description":"Inmortal","powers":["Armor","Flight"]},{"id":1873,"name":"Doraemon","alterego":"Doraemon","description":"Genius billionaire","powers":["Armor","Flight","Magic pocket"]},{"id":1874,"name":"Iron Marck85004","alterego":"Marco Jativa","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1875,"name":"Iron Man123456789ae","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":1876,"name":"CohetePlus21","alterego":"Cohete Plus","description":"Cohetito Plus","powers":["Armors","Flight"]},{"id":1877,"name":"Black panter 1 68","alterego":"T Challa 1 68","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1878,"name":"Black panter 1 2","alterego":"T Challa 1 2","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1880,"name":"Black panter 1 67","alterego":"T Challa 1 67","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1881,"name":"Iron Man-ae757f44-0753-4cbb-b312-36c10b34223d","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1882,"name":"Iron Man 41","alterego":"Tony Stark 41","description":"Updated description","powers":["Armor","Flight"]},{"id":1883,"name":"Iron Man-4ca1bea3-6b10-4716-b66e-0eb6c89868f3","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":1886,"name":"Iron Man Test 1750437667767","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1887,"name":"Super Hero Test 4146","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":1889,"name":"Super Hero Test 5300","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":1891,"name":"Nombre-52646393-a534-4453-8088-57f3cce841a9","alterego":"Bruce Wayne","description":"the Dark Knight","powers":["Money","Investment","Martial Arts"]},{"id":1892,"name":"Sonic-0f5df7c5-2e1e-4d03-b7be-e02a0ca19f8f","alterego":"Super sonico","description":"Erizo azul con super velocidad","powers":["velocidad","agilidad","resistencia"]},{"id":1894,"name":"Hero-6f7d9c0d-180b-4cfb-a8a5-60075e0ac020","alterego":"anamcias","description":"Developer","powers":["Angular","Karate"]},{"id":1895,"name":"Hero-e408638f-de3d-41f5-8f33-0219ba5091c5","alterego":"anamcias","description":"Developer","powers":["Angular","Karate"]},{"id":1896,"name":"Nombre-570948b8-c16f-4625-b633-27106930bb86","alterego":"Bruce Wayne","description":"the Dark Knight","powers":["Money","Investment","Martial Arts"]},{"id":1897,"name":"Super Hero Test 5010","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":1898,"name":"BatMans 2026","alterego":"Bruce Wayne","description":"the Dark Knight in Gotham City","powers":["Money","Investment","Martial Arts","Detective Skills","Gadgets"]},{"id":1901,"name":"Thors3","alterego":"Rayo Man","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1902,"name":"Super Hero Test 7349","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":1903,"name":"Iron Man fgdhfghfgh","alterego":"Tony Stark fghfgh","description":"Genio, millonario, playboy, fil[0xc3][0xa1]ntropo","powers":["Armadura","Inteligencia"]},{"id":1904,"name":"Iron Man nnn","alterego":"Otro","description":"Otro","powers":["Armor"]},{""
12:08:40.510 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "id":1906,"name":"Iron Widow 034587","alterego":"All jsi","description":"Superpower","powers":["Teletransportacion","Jugar futbol"]},{"id":1908,"name":"Super Rein 16972425-ade4-4e9f-81c4-8befa76a41fd","alterego":"Rein","description":"Genius billionaire Pro Tekken Player","powers":["Armor","Flight"]},{"[\r][\n]"
12:08:40.510 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "2000[\r][\n]"
12:08:40.510 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "id":1909,"name":"Super Rein a563d478-f08b-49e0-9ccd-95b2d88baa57","alterego":"Rein","description":"Genius billionaire Pro Tekken Player","powers":["Armor","Flight"]},{"id":1910,"name":"Character-4999","alterego":"Alter-9566","description":"Description-760","powers":["Power-5345"]},{"id":1911,"name":"Iron Man_7a31bb45-8ac8-4755-89d0-92e2cef8aef9","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1914,"name":"Hero_3062586c","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1915,"name":"Super Rein 2c7844d0-b9a8-4938-b2dd-63b4b004127f","alterego":"Rein","description":"Genius billionaire Pro Tekken Player","powers":["Armor","Flight"]},{"id":1916,"name":"Iron Man test - aandino52823","alterego":"Tony Stark aandino","description":"Genius billionaire - aandino","powers":["Armor","Flight","unity","c#"]},{"id":1917,"name":"Iron Man test - aandino41006","alterego":"Tony Stark aandino","description":"Genius billionaire - aandino","powers":["Armor","Flight","unity","c#"]},{"id":1918,"name":"Iron Man Infernal Karate -0912b02e-0aa0-4b74-b52e-34349110f983","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1920,"name":"I2_4ce765e0-5be5-4e3f-8844-5b0751099f6f","alterego":"Steve Rogers","description":"Super soldier","powers":["Super Strength","Shield"]},{"id":1921,"name":"I2_ecd2f193-0b9e-410c-a889-ff9418cfebbc","alterego":"Steve Rogers","description":"Super soldier","powers":["Super Strength","Shield"]},{"id":1922,"name":"Iron Man Infernal Karate -821e68ee-34ea-4823-b5b3-a9db8591441b","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1923,"name":"Character to Delete","alterego":"Delete Test","description":"Character for DELETE test","powers":["Delete Power"]},{"id":1924,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":1928,"name":"Atom Eve 253007","alterego":"Eva","description":"Inmortal","powers":["Armor","Flight"]},{"id":1929,"name":"Diego Iron Man 4425","alterego":"Tony Stark Diego Post","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1931,"name":"Iron Man Cambiado por DiegoF","alterego":"Tony Stark Diego Put","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1932,"name":"Iron Man44533332","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1933,"name":"Captain America 1750437762997","alterego":"Steve Rogers","description":"Super soldier with enhanced strength and agility","powers":["Super Strength","Enhanced Agility","Vibranium Shield"]},{"id":1934,"name":"Hulk 1750437763617","alterego":"Bruce Banner","description":"Scientist with the ability to transform into a giant green monster","powers":["Super Strength","Regeneration","Durability"]},{"id":1935,"name":"Black Widow 1750437765061","alterego":"Natasha Romanoff","description":"Skilled spy and martial artist","powers":["Combat Expert","Espionage","Tactical Intelligence"]},{"id":1936,"name":"Thor 1750437766744","alterego":"Thor Odinson","description":"Updated description for testing","powers":["Weather Control","Mjolnir","Superhuman Strength"]},{"id":1938,"name":"Super Hero Test 482","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":1940,"name":"Super Hero Test 1609","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":1941,"name":"Iron Man Test 1750437786304","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1943,"name":"Iron Man 2222","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1945,"name":"Black panter 1 71","alterego":"T Challa 1 71","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1946,"name":"Black panter 1 10","alterego":"T Challa 1 10","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1947,"name":"Black panter 1 78","alterego":"T Challa 1 78","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1948,"name":"Iron Man 39","alterego":"Tony Stark 39","description":"Updated description","powers":["Armor","Flight"]},{"id":1950,"name":"Atom Eve 337763","alterego":"Eva","description":"Inmortal","powers":["Armor","Flight"]},{"id":1951,"name":"Edulima 8","alterego":"Edu Lima","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1953,"name":"Diego Iron Man 5051","alterego":"Tony Stark Diego Post","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1955,"name":"Character-191","alterego":"Alter-82","description":"Description-3622","powers":["Power-4798"]},{"id":1957,"name":"Iron Man Cambiado por DiegoF","alterego":"Tony Stark Diego Put","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1958,"name":"Iron Man geod2","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1961,"name":"nombreUnico","alterego":"Peter Parker","description":"Superh[0xc3][0xa9]roe ar[0xc3][0xa1]cnido de Marvel","powers":["Agilidad","Sentido ar[0xc3][0xa1]cnido","Trepar muros"]},{"id":1962,"name":"IronMan-3dc07b68-3247-46ff-8868-9b7693b52e28","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1965,"name":"Sonic-635bac38-1b1c-464c-ab0a-86642467ec54","alterego":"Super sonico","description":"Erizo azul con super velocidad","powers":["velocidad","agilidad","resistencia"]},{"id":1966,"name":"Iron Man 222332","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1967,"name":"Captain America 1750437845563","alterego":"Steve Rogers","description":"Super soldier with enhanced strength and agility","powers":["Super Strength","Enhanced Agility","Vibranium Shield"]},{"id":1968,"name":"Hulk 1750437846541","alterego":"Bruce Banner","description":"Scientist with the ability to transform into a giant green monster","powers":["Super Strength","Regeneration","Durability"]},{"id":1969,"name":"Iron Man 68455","alterego":"Tony Stark fghfgh","description":"Genio, millonario, playboy, fil[0xc3][0xa1]ntropo","powers":["Armadura","Inteligencia"]},{"id":1970,"name":"Atom Eve 329435","alterego":"Eva","description":"Inmortal","powers":["Armor","Flight"]},{"id":1971,"name":"Black Widow 1750437848061","alterego":"Natasha Romanoff","description":"Skilled spy and martial artist","powers":["Combat Expert","Espionage","Tactical Intelligence"]},{"id":1972,"name":"Thor 1750437849838","alterego":"Thor Odinson","description":"Updated description for testing","powers":["Weather Control","Mjolnir","Superhuman Strength"]},{"id":1976,"name":"Super Rein 4d0ceb4f-9d59-472f-9836-5ed5459ced10","alterego":"Rein","description":"Genius billionaire Pro Tekken Player","powers":["Armor","Flight"]},{"id":1977,"name":"Goku","alterego":"Kakaroto","description":"Personaje de DBZ","powers":["Flight"]},{"id":1979,"name":"Super Rein c931fb79-df64-4644-a679-91d05e2c32e4","alterego":"Rein","description":"Genius billionaire Pro Tekken Player","powers":["Armor","Flight"]},{"id":1980,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":1981,"name":"Spider-Man-847d4afc-993c-42e8-a383-2b0eb7abf9da","alterego":"Peter Parker","description":"Friendly neighborhood Spider-Man","powers":["Wall-crawling","Spider-sense"]},{"id":1983,"name":"Iron Man - 4f5f52cf","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1984,"name":"Hero-30258","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1986,"name":"Super Rein 45bca603-2942-451c-b299-531d9bffd846","alterego":"Rein","descri"
12:08:40.510 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "ption":"Genius billionaire Pro Tekken Player","powers":["Armor","Flight"]},{"id":1987,"name":"Hero_361cb3ac","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1988,"name":"Frank Bernal1234","alterego":"Peter Parker","description":"Superh[0xc3][0xa9]roe ar[0xc3][0xa1]cnido de Marvel","p[\r][\n]"
12:08:40.510 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "2000[\r][\n]"
12:08:40.510 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "owers":["Agilidad","Sentido ar[0xc3][0xa1]cnido","Trepar muros"]},{"id":1989,"name":"Iron Man 684551","alterego":"Tony Stark","description":"Genio, millonario, playboy, fil[0xc3][0xa1]ntropo","powers":["Armadura","Inteligencia"]},{"id":1990,"name":"Iron Man Infernal Karate -c18bd3c5-6a40-4223-94e7-c92187bcc857","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1992,"name":"Iron Man Infernal Karate -8c08986d-f28e-45d2-83c4-d00d76c99dba","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1993,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":1994,"name":"Character-2050","alterego":"Alter-1044","description":"Description-2090","powers":["Power-7623"]},{"id":1996,"name":"Hero-63574","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1997,"name":"Iron Man 2223332","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1998,"name":"Thor Woman b03c71","alterego":"All jsi","description":"Superpower","powers":["Teletransportacion","Jugar futbol"]},{"id":1999,"name":"Iron Man Test 1750437915998","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2001,"name":"Nuevo Personaje #5471","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2003,"name":"Blue Beetle #5321","alterego":"Jaime Reyes","description":"Teen fused with alien tech","powers":["Scarab Armor","Energy Blasts"]},{"id":2004,"name":"Spider-Man #376","alterego":"Peter Parker","description":"Friendly neighborhood","powers":["Agility","Spider Sense"]},{"id":2005,"name":"Captain Marvel #9555","alterego":"Carol Danvers","description":"Cosmic powers","powers":["Energy Blasts","Flight"]},{"id":2006,"name":"Iron Manso","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2007,"name":"Nomb"
12:08:40.579 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "re-98c506c8-f8af-4b2a-8d3f-130a29f60d8a","alterego":"Bruce Wayne","description":"the Dark Knight","powers":["Money","Investment","Martial Arts"]},{"id":2008,"name":"Iron Marck85002","alterego":"Marco Jativa","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2009,"name":"BatMans 2026","alterego":"Bruce Wayne","description":"the Dark Knight in Gotham City","powers":["Money","Investment","Martial Arts","Detective Skills","Gadgets"]},{"id":2011,"name":"Super Hero Test 4577","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":2013,"name":"Super Hero Test 2696","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":2014,"name":"Super Hero Test 3648","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":2016,"name":"Super Re"
12:08:40.580 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "in 56b3e0b9-25ac-4869-a337-076f63a816f3","alterego":"Rein","description":"Genius billionaire Pro Tekken Player","powers":["Armor","Flight"]},{"id":2017,"name":"Hero-41853","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2019,"name":"I2_e8223fcd-b227-4a3d-909c-26046ef944d7","alterego":"Steve Rogers","description":"Super soldier","
12:08:40.582 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << ""powers":["Super Strength","Shield"]},{"id":2021,"name":"I2_4fd09f7b-866c-4c9a-bc1d-ef7292d0d9df","alterego":"Steve Rogers","description":"Super soldier","powers":["Super Strength","Shield"]},{"id":2023,"name":"CHESPIRITO_1","alterego":"roberto","description":"Personaje actualizado","powers":["comedia","ingenio"]},{"id":2024,"name":"Atom Eve 789331","alterego":"Eva","description":"Inmortal","powers":["Armor","Flight"]},{"id":2025,"name":"Iron Man Infernal Karate -dcfbf37d-bb63-4667-9eae-0c9dd14978ec","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2026,"name":"CohetePlus22","alterego":"Cohete Plus","description":"Cohetito Plus","powers":["Armors","Flight"]},{"id":2027,"name":"Iron Man Infernal Karate -102b1094-43ee-46b0-955d-e828725b172a","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2028,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":2029,"name":"Iron"
12:08:40.582 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << " Man-1a4adce0-5dfa-4e07-9b66-a63242eebe6b","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2030,"name":"Capitan America-ca745523-5078-4db1-8e68-732ab9b52079","alterego":"Steve Rogers","description":"Updated description","powers":["Shield","Leadership","Dev"]},{"id":2032,"name":"Iron Man test - aandino - 20182","alterego":"Tony Stark aandino","description":"Genius billionaire - aandino","powers":["Armor","Flight","unity","c#"]},{"id":2035,"name":"Iron Man test - aandino - 64465","alterego":"Tony Stark aandino","description":"Genius billionaire - aandino","powers":["Armor","Flight","unity","c#"]},{"id":2036,"name":"Wonder Widow 9e3c41","alterego":"All jsi","description":"Superpower","powers":["Teletransportacion","Jugar futbol"]},{"id":2039,"name":"HeroeConsulta_4e3db093-eafe-4493-87a8-4370a7ddd835","alterego":"AlteregoConsulta","description":"Consulta","powers":["Consulta"]},{"id":2040,"name":"Hero_11d0afdc-3a66-41cd-b1d9-ed8f89143b72","alterego":"Nuevo Alterego",""
12:08:40.582 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "description":"Nuevo personaje","powers":["Poder1"]},{"id":2041,"name":"Hero_9d3efa83-f67e-4730-9637-db4725a5e87f","alterego":"Otro","description":"Otro","powers":["Poder2"]},{"id":2042,"name":"HeroeActualizado","alterego":"AlteregoActualizado","description":"Actualizado","powers":["PoderActualizado"]},{"id":2044,"name":"I2_b36cd424-4776-4bb5-98dc-cd0dd2a9e797","alterego":"Steve Rogers","description":"Super soldier","powers":["Super Strength","Shield"]},{"id":2045,"name":"Iron Man 2","alterego":"Tony Stark 3","description":"Genius billionaire 3","powers":["Armor","Flight"]},{"id":2046,"name":"I2_8951ff2b-abbd-4750-a7be-35b40605147e","alterego":"Steve Rogers","description":"Super soldier","powers":["Super Strength","Shield"]},{"id":2054,"name":"Iron Man - 178077cc","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2055,"name":"Super Mam[0xc3][0xa1]","alterego":"Luz Toaquiza","description":"Puede hacer varias cosas a la vez","powers":["Amor","Comprensi[0xc3][0xb3]n"]},{"id":2056,"name":"B"
12:08:40.582 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "lack Widow 1750438011964","alterego":"Natasha Romanoff","description":"Skilled spy and martial artist","powers":["Combat Expert","Espionage","Tactical Intelligence"]},{"id":2057,"name":"Thor 1750438013654","alterego":"Thor Odinson","description":"Updated description for testing","powers":["Weather Control","Mjolnir","Superhuman Strength"]},{"id":2059,"name":"Hero-3101","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2060,"name":"Super Hero Test 1786","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":2062,"name":"Super Hero Test 6407","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":2065,"name":"XX","alterego":"Cohete Plus","description":"Cohetito Plus","powers":["Armors","Flight"]},{"id":2066,"name":"Iron Man MK 69009","alterego":"Tony Stark MK 30440","description":"Genius b"
12:08:40.582 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "illionaire","powers":["Armor","Flight"]},{"id":2067,"name":"Jose Antonio Alvear","alterego":"Jose Man","description":"Developer billionaire","powers":["Java","Angular"]},{"id":2068,"name":"Spider-Man-2851f37c-ead9-4b25-aaf8-7e5894e8d41a","alterego":"Peter Parker","description":"Friendly neighborhood Spider-Man","powers":["Wall-crawling","Spider-sense"]},{"id":2069,"name":"Iron Man geod3","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2071,"name":"Iron Man Rafaels8hvhl61","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2073,"name":"apIeNoSoje","alterego":"Tony Stark","description":"Genius billionaire",""
12:08:40.582 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "[\r][\n]"
12:08:40.582 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "2000[\r][\n]"
12:08:40.583 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "powers":["Armor","Flight"]},{"id":2074,"name":"Iron Mansoi","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2075,"name":"mario almeida1","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2077,"name":"Hero-f57e7f97-b9d9-44bb-bb68-30afd8186d05","alterego":"anamcias","description":"Developer","powers":["Angular","Karate"]},{"id":2078,"name":"Hero-d09665cb-14a1-47f9-bdaf-607257cfce7f","alterego":"anamcias","description":"Developer","powers":["Angular","Karate"]},{"id":2079,"name":"Frank Bernal1234567","alterego":"Peter Parker","description":"Superh[0xc3][0xa9]roe ar[0xc3][0xa1]cnido de Marvel","powers":["Agilidad","Sentido ar[0xc3][0xa1]cnido","Trepar muros"]},{"id":2080,"name":"jzapata_1750438072188","alterego":"Jhonny Zapata","description":"Genius informatician and hacker","powers":["Hacking","Programming","Cybersecurity"]},{"id":2081,"name":"Iron Man - dc2bf25b","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2082,"name":"Captain America 1750438070280","alterego":"Steve Rogers","description":"Super soldier with enhanced strength and agility","powers":["Super Strength","Enhanced Agility","Vibranium Shield"]},{"id":2083,"name":"Hulk 1750438070922","alterego":"Bruce Banner","description":"Scientist with the ability to transform into a giant green monster","powers":["Super Strength","Regeneration","Durability"]},{"id":2084,"name":"Iron Man Rafaelsj8g0321","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2085,"name":"Black Widow 1750438072405","alterego":"Natasha Romanoff","description":"Skilled spy and martial artist","powers":["Combat Expert","Espionage","Tactical Intelligence"]},{"id":2089,"name":"Edulima 9","alterego":"Edu Lima","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2091,"name":"Atom Eve 204461","alterego":"Eva","description":"Inmortal","powers":["Armor","Flight"]},{"id":2094,"name":"Super Rein aedfe6ee-b379-43c2-ba6e-cd71a0f637ec","alterego":"Rein","description":"Genius billionaire Pro Tekken Player","powers":["Armor","Flight"]},{"id":2095,"name":"Super Rein d63395c2-12a8-4667-a418-e7446c9da2bc","alterego":"Rein","description":"Genius billionaire Pro Tekken Player","powers":["Armor","Flight"]},{"id":2098,"name":"Super Rein c1c3e15f-d4a9-43dc-8bb9-b7f795a97b7e","alterego":"Rein","description":"Genius billionaire Pro Tekken Player","powers":["Armor","Flight"]},{"id":2099,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":2101,"name":"Hero-069c9ae2-e06e-41ae-aa6f-9c4c61c631ac","alterego":"anamcias","description":"Developer","powers":["Angular","Karate"]},{"id":2102,"name":"Super Rein f26112c0-5b19-4000-9254-c1630a248152","alterego":"Rein","description":"Genius billionaire Pro Tekken Player","powers":["Armor","Flight"]},{"id":2103,"name":"Hero-148fe4f7-8d75-458c-b81b-ad75b9d68c3d","alterego":"anamcias","description":"Developer","powers":["Angular","Karate"]},{"id":2105,"name":"Super Rein 591ecffc-2d6e-4458-b7b6-327992415fcd","alterego":"Rein","description":"Genius billionaire Pro Tekken Player","powers":["Armor","Flight"]},{"id":2108,"name":"Super Rein 5831e5d3-49a2-4e77-9132-c88aaf23bbbb","alterego":"Rein","description":"Genius billionaire Pro Tekken Player","powers":["Armor","Flight"]},{"id":2109,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":2110,"name":"Captain America 1750438123058","alterego":"Steve Rogers","description":"Super soldier with enhanced strength and agility","powers":["Super Strength","Enhanced Agility","Vibranium Shield"]},{"id":2111,"name":"Hulk 1750438123663","alterego":"Bruce Banner","description":"Scientist with the ability to transform into a giant green monster","powers":["Super Strength","Regeneration","Durability"]},{"id":2112,"name":"mario almeida2","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2113,"name":"Black Widow 1750438125085","alterego":"Natasha Romanoff","description":"Skilled spy and martial artist","powers":["Combat Expert","Espionage","Tactical Intelligence"]},{"id":2114,"name":"Atom Eve 853104","alterego":"Eva","description":"Inmortal","powers":["Armor","Flight"]},{"id":2116,"name":"Thor 1750438126752","alterego":"Thor Odinson","description":"Updated description for testing","powers":["Weather Control","Mjolnir","Superhuman Strength"]},{"id":2118,"name":"Iron Man 22233332","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2119,"name":"Iron Man Rafaelo03kpc2f","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2122,"name":"Super Rein 16d24936-1b4d-4347-860c-8e6e8640051e","alterego":"Rein","description":"Genius billionaire Pro Tekken Player","powers":["Armor","Flight"]},{"id":2124,"name":"Super Rein a62a74bb-8651-4bc5-9c28-bbc4f6f41729","alterego":"Rein","description":"Genius billionaire Pro Tekken Player","powers":["Armor","Flight"]},{"id":2125,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":2126,"name":"CohetePlus23","alterego":"Cohete Plus","description":"Cohetito Plus","powers":["Armors","Flight"]},{"id":2128,"name":"IronMan-25f6a1ae-b113-45d6-8f74-ed543d0aeeb2","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2129,"name":"Gaia","alterego":"Gaia Zapata","description":"Genius informatician and hacker","powers":["Hacking","Programming","Cybersecurity"]},{"id":2130,"name":"Super Rein b5d655a5-0a62-4876-ab85-ce7d609e3c50","alterego":"Rein","description":"Genius billionaire Pro Tekken Player","powers":["Armor","Flight"]},{"id":2132,"name":"Super Rein 661ea302-2687-435a-bebb-d1c827862dbc","alterego":"Rein","description":"Genius billionaire Pro Tekken Player","powers":["Armor","Flight"]},{"id":2133,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":2134,"name":"anmacias","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":2135,"name":"mario almeida3","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2136,"name":"Hero-19793","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":2137,"name":"Ant Man 2","alterego":"Scott Lang","description":"Normal","powers":["Small","Giant"]},{"id":2138,"name":"Hero_332dd340","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2141,"name":"Spider-Man 3","alterego":"Peter Parker 3","description":"Friendly neighborhood hero 3","powers":["Agility","Spider-Sense","Wall-Crawling"]},{"id":2142,"name":"Iron Man 222233332","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2143,"name":"Hero-70022","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2144,"name":"Captain Marvel test16","alterego":"Carol Danvers","description":"Updated description","powers":["Flight","Force"]},{"id":2146,"name":"Frank Bernal12345671","alterego":"Peter Parker","description":"Superh[0xc3][0xa9]roe ar[0xc3][0xa1]cnido de Marvel","powers":["Agilidad","Sentido ar[0xc3][0xa1]cnido","Trepar muros"]},{"id":2147,"name":"I2_cbf1312f-74ed-46c0-95ae-7e2085890552","alterego":"Steve Rogers","description":"Super soldier","powers":["Super Strength","Shield"]},{"id":2149,"name":"Hero-37480","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2152,"name":"Iron Man Infernal Karate -515ff99d-845d-4cc3-84c2-09db555ba1fd","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2153,"name":"Iron Man Infernal Karate -d2371c76-7184-4226-8783-186f20ad1267","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2154,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":2156,"name":"Scarlet Hero 2f7988","alterego":"All "
12:08:40.583 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "jsi","de[\r][\n]"
12:08:40.583 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "2000[\r][\n]"
12:08:40.583 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "scription":"Superpower","powers":["Teletransportacion","Jugar futbol"]},{"id":2157,"name":"Spider-Man 494","alterego":"Peter Parker","description":"El amigable vecino Spider-Man","powers":["Sentido ar[0xc3][0xa1]cnido","Trepar paredes","Lanzar telara[0xc3][0xb1]as"]},{"id":2158,"name":"Iron Marck85050","alterego":"Marco Jativa","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2159,"name":"Hero-18780","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":2160,"name":"Iron Man Rafaelfnxbeuf0","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2162,"name":"Iron Man 2222233332","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2163,"name":"Hero-54834","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2165,"name":"Iron Man Rafaeljosi5x5j","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2166,"name":"name","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2167,"name":"Hero-7d3b0939-d7fd-4cd2-a754-bd3446b3be06","alterego":"anamcias","description":"Developer","powers":["Angular","Karate"]},{"id":2168,"name":"Hero-96081","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2170,"name":"Iron Man Test Chapter Validation","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2171,"name":"Hero-aa47b53d-366a-4d06-b364-6bd7815c2419","alterego":"anamcias","description":"Developer","powers":["Angular","Karate"]},{"id":2172,"name":"Iron Man Infernal Karate -3f6f3f74-6ee7-4451-9fed-853e502a1784","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2173,"name":"IronMan-83eb10f6-1647-4b32-94cc-e56a420f9227","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2174,"name":"Iron Man Infernal Karate -cff02a81-de86-4298-a216-e5fdd4d5fb40","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2175,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":2178,"name":"Iron Man'; DROP TABLE users;--","alterego":"Super Dev","description":"Super Backend developer","powers":["Java","WebFlux"]},{"id":2179,"name":"Hero-18252","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":2180,"name":"Iron Man 6845512","alterego":"Tony Stark","description":"Genio, millonario, playboy, fil[0xc3][0xa1]ntropo","powers":["Armadura","Inteligencia"]},{"id":2181,"name":"Hero-27832","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2182,"name":"Thunder Seer 2586e334-e38a-423b-ada1-afc77b58bbac","alterego":"Kai Storm","description":"Armored mage warrior","powers":["Tech Suit","Flight"]},{"id":2183,"name":"Mystic Blade 7d13315c-3421-432c-84a3-d92977c8fea5","alterego":"Kai Storm","description":"Armored mage warrior","powers":["Tech Suit","Flight"]},{"id":2184,"name":"Shadow Brute 548c285a-b1a4-484c-991c-02bcd276f7df","alterego":"Bran Nok","description":"Dark energy powerhouse","powers":["Strength"]},{"id":2185,"name":"Captain Prism 458d7a5c-32eb-4b67-9f5d-22fed1c5dd9d","alterego":"Nova Hale","description":"Upgraded prism tactics","powers":["Prism Shield","Tactical Mind"]},{"id":2187,"name":"Iron Marck85007","alterego":"Marco Jativa","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2188,"name":"Iron Man Test 1750438282761","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2190,"name":"I2_1a0e8ec4-e196-4d2d-94aa-908eb8d352a3","alterego":"Steve Rogers","description":"Super soldier","powers":["Super Strength","Shield"]},{"id":2192,"name":"Iron Marck85008","alterego":"Marco Jativa","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2193,"name":"I2_1537e541-8702-479d-a325-9e0882ae1c20","alterego":"Steve Rogers","description":"Super soldier","powers":["Super Strength","Shield"]},{"id":2194,"name":"Hero-57950","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":2196,"name":"Hero-5155","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2197,"name":"Iron Man MK 34173","alterego":"Tony Stark MK 72802","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2198,"name":"Hero-82213","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2200,"name":"Atom Eve 136788","alterego":"Eva","description":"Inmortal","powers":["Armor","Flight"]},{"id":2201,"name":"Atom Eve 700100","alterego":"Eva","description":"Inmortal","powers":["Armor","Flight"]},{"id":2203,"name":"Iron Marck85051","alterego":"Marco Jativa","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2204,"name":"Iron Mansoio","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2205,"name":"Hero_f6171de9","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2206,"name":"Frank Bernal123456712","alterego":"Peter Parker","description":"Superh[0xc3][0xa9]roe ar[0xc3][0xa1]cnido de Marvel","powers":["Agilidad","Sentido ar[0xc3][0xa1]cnido","Trepar muros"]},{"id":2207,"name":"Super Rein 29950c5b-649c-480c-8a06-c4fb577df8cd","alterego":"Rein","description":"Genius billionaire Pro Tekken Player","powers":["Armor","Flight"]},{"id":2208,"name":"Hero-792","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":2209,"name":"Joccasti'; DROP TABLE users;--","alterego":"Tony Stark","description":"Intento de inyecci[0xc3][0xb3]n SQL","powers":["Armor"]},{"id":2211,"name":"Super Rein 9d7c1be3-8393-42dd-a7de-7dfb14958a09","alterego":"Rein","description":"Genius billionaire Pro Tekken Player","powers":["Armor","Flight"]},{"id":2212,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":2214,"name":"Hero-21987","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2215,"name":"Hero-2501","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2216,"name":"Iron Man Infernal Karate -a9a3f313-6c7f-4a4c-8b26-2fb68b3f1bdc","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2217,"name":"Scarlet Panther f2fb07","alterego":"All jsi","description":"Superpower","powers":["Teletransportacion","Jugar futbol"]},{"id":2219,"name":"Iron Man Infernal Karate -fb049c88-a8cb-41f8-add3-5d364b61bd77","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2220,"name":"Iron Man-8e8ddc95-436f-466d-9c5a-9bef0ad65533","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2221,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":2223,"name":"Iron Man geod5","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2224,"name":"Hero-66346","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2225,"name":"Iron Man MK 55956","alterego":"Tony Stark MK 89103","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2226,"name":"IronMan-87e67683-462e-418c-88b5-496d04a59d0c","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2227,"name":"Thunder Seer 7b4f9abf-2da3-4a33-9cc3-0791dee1b3b9","alterego":"Kai Storm","description":"Armored mage warrior","powers":["Tech Suit","Flight"]},{"id":2229,"name":"I2_ee9012ae-1732-4177-9839-3a5faebbf2c0","alterego":"Steve Rogers","description":"Super soldier","powers":["Super Strength","Shield"]},{"id":2230,"name":"Mystic Blade 61d979bf-3260-441c-807c-62e9403d4cd9","alterego":"Kai Storm","description":"Armored mage warrior","powers":["Tech Suit","Flight"]},{"id":2231,"name":"Shadow Brute 59b24f5d-e3e0-4ad6-a577-"
12:08:40.583 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "36469075fbdf","a[\r][\n]"
12:08:40.583 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "2000[\r][\n]"
12:08:40.584 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "lterego":"Bran Nok","description":"Dark energy powerhouse","powers":["Strength"]},{"id":2232,"name":"Captain Prism 3172b291-a81f-4dad-8abc-3139ad9f8f00","alterego":"Nova Hale","description":"Upgraded prism tactics","powers":["Prism Shield","Tactical Mind"]},{"id":2233,"name":"I2_593d318c-8836-40f8-920c-b5c52d1f14d0","alterego":"Steve Rogers","description":"Super soldier","powers":["Super Strength","Shield"]},{"id":2235,"name":"Hero-22279","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":2236,"name":"Hero-3935","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2238,"name":"Hero-13706","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2239,"name":"Hero-64811","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2242,"name":"Spider-Man 123","alterego":"Peter Parker","description":"El amigable vecino Spider-Man","powers":["Sentido ar[0xc3][0xa1]cnido","Trepar paredes","Lanzar telara[0xc3][0xb1]as"]},{"id":2243,"name":"Hero_49b2308d","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2244,"name":"Atom Eve 334591","alterego":"Eva","description":"Inmortal","powers":["Armor","Flight"]},{"id":2245,"name":"Atom Eve 264116","alterego":"Eva","description":"Inmortal","powers":["Armor","Flight"]},{"id":2249,"name":"Frank Bernal1234567123","alterego":"Peter Parker","description":"Superh[0xc3][0xa9]roe ar[0xc3][0xa1]cnido de Marvel","powers":["Agilidad","Sentido ar[0xc3][0xa1]cnido","Trepar muros"]},{"id":2250,"name":"CohetePlus24","alterego":"Cohete Plus","description":"Cohetito Plus","powers":["Armors","Flight"]},{"id":2251,"name":"a6280ac7-438e-45bf-ae56-5e7c85c25c8d","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2252,"name":"Hero-87354","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":2253,"name":"Hero-87401","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2254,"name":"IronMan-c502be18-98ec-4a09-a883-b1a9a41530b4","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2255,"name":"Iron Man geod6","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2256,"name":"Iron Man test - aandino - 99872","alterego":"Tony Stark aandino","description":"Genius billionaire - aandino","powers":["Armor","Flight","unity","c#"]},{"id":2257,"name":"Hero-76581","alterego":"Tony Stark","description":""
12:08:40.584 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "Genius billionaire","powers":["Armor","Flight"]},{"id":2258,"name":"Captain Witch 097662","alterego":"All jsi","description":"Superpower","powers":["Teletransportacion","Jugar futbol"]},{"id":2259,"name":"Hero-36820","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2260,"name":"Atom Eve 770389","alterego":"Eva","description":"Inmortal","powers":["Armor","Flight"]},{"id":2262,"name":"Iron Man-f0f25cb4-d3ab-439b-83a6-6fb95bceeab3","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2264,"name":"I2_cd331bc4-4997-421b-bd22-f16a5107696e","alterego":"Steve Rogers","description":"Super soldier","powers":["Super Strength","Shield"]},{"id":2265,"name":"I2_09d862c3-0682-4299-b76c-e5cb8332d05a","alterego":"Steve Rogers","description":"Super soldier","powers":["Super Strength","Shield"]},{"id":2267,"name":"Character-58a218c8","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2268,"name":"Char"
12:08:40.584 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "acter-6004dd74","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2269,"name":"Character-8b08795b","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2271,"name":"Iron Man Infernal Karate -d32c00ee-fc2b-41df-af27-3b5338793357","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2272,"name":"Character-ce7c7552","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":2273,"name":"Spider-Man 168","alterego":"Peter Parker","description":"El amigable vecino Spider-Man","powers":["Sentido ar[0xc3][0xa1]cnido","Trepar paredes","Lanzar telara[0xc3][0xb1]as"]},{"id":2274,"name":"Iron Man Infernal Karate -5d679375-97da-4857-ab14-ea4524da4028","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2276,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":2278,"name":"Iron Man t"
12:08:40.584 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "est - aandino - 66244","alterego":"Tony Stark aandino","description":"Genius billionaire - aandino","powers":["Armor","Flight","unity","c#"]},{"id":2279,"name":"Iron Man test - aandino - 20861","alterego":"Tony Stark aandino","description":"Genius billionaire - aandino","powers":["Armor","Flight","unity","c#"]},{"id":2280,"name":"milmoral7","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2281,"name":"Frank Bernal12345671234","alterego":"Peter Parker","description":"Superh[0xc3][0xa9]roe ar[0xc3][0xa1]cnido de Marvel","powers":["Agilidad","Sentido ar[0xc3][0xa1]cnido","Trepar muros"]},{"id":2282,"name":"Iron Man Test 1750438539662","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2284,"name":"New Character again","alterego":"Emiya Shirou","description":"King of Babylon, and friend of Enkidou","powers":["Full Attack","Unlimited Blades","Final Hit"]},{"id":2285,"name":"Hero-98338","alterego":"Tony Stark","description":"Updated description","powers":["A"
12:08:40.584 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "rmor","Flight"]},{"id":2286,"name":"Hero-55529","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2287,"name":"Thunder Seer 5e552fde-de10-4436-8b01-deefae1587fd","alterego":"Kai Storm","description":"Armored mage warrior","powers":["Tech Suit","Flight"]},{"id":2288,"name":"Mystic Blade 78317cf8-fdde-495b-b6f8-896d8b68ca6a","alterego":"Kai Storm","description":"Armored mage warrior","powers":["Tech Suit","Flight"]},{"id":2289,"name":"Shadow Brute f7c8dcdd-cca6-41c7-907a-29a88eebf9ad","alterego":"Bran Nok","description":"Dark energy powerhouse","powers":["Strength"]},{"id":2290,"name":"randomName","alterego":"Jose Man","description":"Developer billionaire","powers":["Java","Angular"]},{"id":2291,"name":"Iron Man 778","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2292,"name":"Captain Prism 9ce74ce5-a06d-4f7b-9626-977dfaf8a0d4","alterego":"Nova Hale","description":"Upgraded prism tactics","powers":["Prism Shield","Tactical"
12:08:40.584 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << " Mind"]},{"id":2293,"name":"Iron Man 595","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2295,"name":"Iron Man 367","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2296,"name":"Iron Man 21","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2297,"name":"nombre","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":2298,"name":"Hero-51817","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2299,"name":"Iron Man 266","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2301,"name":"Iron Man 431","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2303,"name":"Iron Man Infernal Karate -e1661fea-f675-474f-adb9-7292452d91c3","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id""
12:08:40.584 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << ":2304,"name":"Iron Marck85052","alterego":"Marco Jativa","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2305,"name":"Spider-Man-6b005732-2e4c-4886-b3f1-583c1b82d9bc","alterego":"Peter Parker","description":"Friendly neighborhood Spider-Man","powers":["Wall-crawling","Spider-sense"]},{"id":2306,"name":"Iron Man Infernal Karate -83cb77dc-f183-4d22-81e3-1c75247c6b56","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},[\r][\n]"
12:08:40.585 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "2000[\r][\n]"
12:08:40.585 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "{"id":2307,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":2308,"name":"mario almeida4","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2310,"name":"Atom Eve 588072","alterego":"Eva","description":"Inmortal","powers":["Armor","Flight"]},{"id":2312,"name":"Iron Man-bbd2cfbd-c1a1-4ec8-a2ae-76c1e626619f","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2313,"name":"Hero-89095","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":2314,"name":"Hero-17733","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2315,"name":"Hero-20378","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2317,"name":"I2_0adda5c4-8992-4d72-9ba6-76741558fd45","alterego":"Steve Rogers","description":"Super soldier","powers":["Super Strength","Shield"]},{"id":2320,"name":"I2_7326b852-7ff1-484e-a81c-d146f3aa2024","alterego":"Steve Rogers","description":"Super soldier","powers":["Super Strength","Shield"]},{"id":2321,"name":"Hero-47657","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2322,"name":"!@#$%^&*()_+|~=`{}[]:\";'<>?,./","alterego":"Tony Stark","description":"Prueba caracteres especiales","powers":["Armor"]},{"id":2323,"name":"TbgcNTaDfg","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2324,"name":"Iron Man Updated","alterego":"Tony Stark","description":"Updated description Jose","powers":["Armor","Flight","Genius"]},{"id":2326,"name":"Hero-23207","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":2327,"name":"Hero-99194","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2328,"name":"Hero-7537","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2329,"name":"Hawkeye","alterego":"Clint Barton","description":"Expert archer","powers":["Archery","Martial Arts"]},{"id":2330,"name":"Iron Man geod8","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2331,"name":"Character-0b0b4597","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2332,"name":"IronMan-0f016528-5c3e-458a-80d0-4342609bffaa","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2333,"name":"Character-4b1d35b1","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2334,"name":"Super Girl - TM 1750438633806","alterego":"Tony Clack Kent","description":"Stron"
12:08:40.588 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "g woman","powers":["Armor","Flight"]},{"id":2335,"name":"Hero-67381","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":2336,"name":"Super Girl - TM 1750438635539","alterego":"Tony Clack Kent","description":"Strong woman","powers":["Armor","Flight"]},{"id":2337,"name":"Character-3fd3291d","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2338,"name":"Spider-Man-d266fdeb-4543-42b3-a94d-b50e3683069e","alterego":"Peter Parker","description":"Friendly neighborhood Spider-Man","powers":["Wall-crawling","Spider-sense"]},{"id":2339,"name":"Hero-23480","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2340,"name":"Character-259f3a92","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":2341,"name":"Hero-17808","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2343,"name":"Iron Man - Created21","alterego"
12:08:40.588 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2345,"name":"Thunder Seer 3e07d98a-077f-4c5b-944f-9e5e0a74da45","alterego":"Kai Storm","description":"Armored mage warrior","powers":["Tech Suit","Flight"]},{"id":2346,"name":"Iron Man Test-d0d78dfc","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2347,"name":"Mystic Blade c1763f22-50e7-4567-b192-a3c006a7b0b2","alterego":"Kai Storm","description":"Armored mage warrior","powers":["Tech Suit","Flight"]},{"id":2348,"name":"Shadow Brute 5014af01-87dd-4571-8562-8ca0c710c7d1","alterego":"Bran Nok","description":"Dark energy powerhouse","powers":["Strength"]},{"id":2349,"name":"Captain Prism eff575b3-0fcd-41db-97d0-19a930a3f5cd","alterego":"Nova Hale","description":"Upgraded prism tactics","powers":["Prism Shield","Tactical Mind"]},{"id":2350,"name":"Spider-Man 666","alterego":"Peter Parker","description":"El amigable vecino Spider-Man","powers":["Sentido ar[0xc3][0xa1]cnido","Trepar paredes","Lan"
12:08:40.589 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "zar telara[0xc3][0xb1]as"]},{"id":2352,"name":"Iron Man - 09c75d35","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2353,"name":"Hero-52424","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2354,"name":"Iron Man - 740aa3ee","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2356,"name":"I2_f2ae8179-ade4-4960-bf0b-9dd6ede40d3e","alterego":"Steve Rogers","description":"Super soldier","powers":["Super Strength","Shield"]},{"id":2357,"name":"I2_1bf44dd7-71b1-48c8-be44-6a60bfd0d4fe","alterego":"Steve Rogers","description":"Super soldier","powers":["Super Strength","Shield"]},{"id":2359,"name":"CohetePlus25","alterego":"Cohete"
12:08:40.590 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << " Plus","description":"Cohetito Plus","powers":["Armors","Flight"]},{"id":2360,"name":"Character-5b755554","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2361,"name":"Character-81dd763a","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2362,"name":"Thunder Seer 66698165-2117-4c99-bff6-ee8c367dcc5d","alterego":"Kai Storm","description":"Armored mage warrior","powers":["Tech Suit","Flight"]},{"id":2363,"name":"Ronald Mejia","alterego":"Donald","description":"Genius billionaire","powers":["Inteligencia","Sue[0xc3][0xb1]o"]},{"id":2364,"name":"Character-a2fd7b80","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2365,"name":"Mystic Blade 1ade296b-869a-4d48-b7d3-44a2b55fd5db","alterego":"Kai Storm","description":"Armored mage warrior","powers":["Tech Suit","Flight"]},{"id":2366,"name":"Shadow Brute 0e2b8d80-0322-4145-a91d-b3441219ba00","alterego":"Bran Nok","description":"Dark energy powerho"
12:08:40.590 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "use","powers":["Strength"]},{"id":2367,"name":"Captain Prism c2b1b2e3-9c54-460e-bae3-c0025c9668ba","alterego":"Nova Hale","description":"Upgraded prism tactics","powers":["Prism Shield","Tactical Mind"]},{"id":2369,"name":"Character-a20a1369","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":2370,"name":"Personaje/Test 509343a7-d910-4968-aa03-e139bd0f1382","alterego":"bcarrill","description":"Test","powers":["Armor","Flight"]},{"id":2371,"name":"FrankBernal1","alterego":"Peter Parker","description":"Superh[0xc3][0xa9]roe ar[0xc3][0xa1]cnido de Marvel","powers":["Agilidad","Sentido ar[0xc3][0xa1]cnido","Trepar muros"]},{"id":2374,"name":"Iron Man Test-0bb2c6fb","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2375,"name":"Iron Man - 7216d538","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2376,"name":"Iron Man - 18f9375d","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"
12:08:40.590 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << ""]},{"id":2377,"name":"Iron Man - f7424c7f","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2378,"name":"Super Girl - TM 1750438696647","alterego":"Tony Clack Kent","description":"Strong woman","powers":["Armor","Flight"]},{"id":2379,"name":"Super Girl - TM 1750438698500","alterego":"Tony Clack Kent","description":"Strong woman","powers":["Armor","Flight"]},{"id":2380,"name":"d3cc70b4-476b-4e6f-9361-b37ece8716bd","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]}"
12:08:40.590 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "[\r][\n]"
12:08:40.591 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "2000[\r][\n]"
12:08:40.591 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << ",{"id":2381,"name":"Vision Lord 08376f","alterego":"All jsi","description":"Superpower","powers":["Teletransportacion","Jugar futbol"]},{"id":2382,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":2383,"name":"Iron Man #(uuid)","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2384,"name":"jzapata_1750438726536","alterego":"Jhonny Zapata","description":"Genius informatician and hacker","powers":["Hacking","Programming","Cybersecurity"]},{"id":2385,"name":"Gaia","alterego":"Gaia Zapata","description":"Genius informatician and hacker","powers":["Hacking","Programming","Cybersecurity"]},{"id":2389,"name":"Iron Man-4b102d4c-1dcc-4628-af0e-3ae5a4d1300f","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2390,"name":"FrankBernal12","alterego":"Peter Parker","description":"Superh[0xc3][0xa9]roe ar[0xc3][0xa1]cnido de Marvel","powers":["Agilidad","Sentido ar[0xc3][0xa1]cnido","Trepar muros"]},{"id":2391,"name":"Iron Man test - aandino - 86051","alterego":"Tony Stark aandino","description":"Genius billionaire - aandino","powers":["Armor","Flight","unity","c#"]},{"id":2392,"name":"Iron Man test - aandino - 90973","alterego":"Tony Stark aandino","description":"Genius billionaire - aandino","powers":["Armor","Flight","unity","c#"]},{"id":2393,"name":"Spider-Man-c1f80adb-8c29-4676-a350-3d650f0772f6","alterego":"Peter Parker","description":"Friendly neighborhood Spider-Man","powers":["Wall-crawling","Spider-sense"]},{"id":2394,"name":"Iron Man Infernal Karate -54b8ead4-e540-4718-9824-3ade6952c123","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2395,"name":"Iron Man Infernal Karate -06db521a-a171-400d-885d-da4ef2611af9","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2396,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":2398,"name":"Captain Lord 9f54c6","alterego":"All jsi","description":"Superpower","powers":["Teletransportacion","Jugar futbol"]},{"id":2399,"name":"A!@#$%^&*()_+|~=`{}[]:\";'<>?,./","alterego":"Tony Stark","description":"Prueba caracteres especiales","powers":["Armor"]},{"id":2400,"name":"Captain Marvel test20","alterego":"Carol Danvers","description":"the biggest hero in the world","powers":["Flight","Force"]},{"id":2401,"name":"Hero_48b2417a","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2403,"name":"Iron Man MK 10596","alterego":"Tony Stark MK 86170","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2404,"name":"Iron Man - 1b26ff1d","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2405,"name":"Iron Man - 49c7f509","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2406,"name":"Iron Man Infernal Karate -9f71a2cd-8e6b-401a-a12a-aadb8e2ad0a0","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2407,"name":"jzapata_1750438834516","alterego":"Jhonny Zapata","description":"Genius informatician and hacker","powers":["Hacking","Programming","Cybersecurity"]},{"id":2408,"name":"Gaia","alterego":"Gaia Zapata","description":"Genius informatician and hacker","powers":["Hacking","Programming","Cybersecurity"]},{"id":2410,"name":"Iron Man Infernal Karate -e80c0d0e-d006-4323-8fc3-4ff5e933c97d","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2411,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":2413,"name":"Spider-Man 48","alterego":"Peter Parker","description":"El amigable vecino Spider-Man","powers":["Sentido ar[0xc3][0xa1]cnido","Trepar paredes","Lanzar telara[0xc3][0xb1]as"]},{"id":2414,"name":"FrankBernal123","alterego":"Peter Parker","description":"Superh[0xc3][0xa9]roe ar[0xc3][0xa1]cnido de Marvel","powers":["Agilidad","Sentido ar[0xc3][0xa1]cnido","Trepar muros"]},{"id":2415,"name":"Bernal1","alterego":"Peter Parker","description":"Superh[0xc3][0xa9]roe ar[0xc3][0xa1]cnido de Marvel","powers":["Agilidad","Sentido ar[0xc3][0xa1]cnido","Trepar muros"]},{"id":2417,"name":"Iron Man test - aandino - 87653","alterego":"Tony Stark aandino","description":"Genius billionaire - aandino","powers":["Armor","Flight","unity","c#"]},{"id":2418,"name":"Iron Man test - aandino - 70472","alterego":"Tony Stark aandino","description":"Genius billionaire - aandino","powers":["Armor","Flight","unity","c#"]},{"id":2419,"name":"av!@#$%^&*()_+|~=`{}[]:\";'<>?,./","alterego":"Tony Stark","description":"Prueba caracteres especiales","powers":["Armor"]},{"id":2420,"name":"Joccasti_01'; DROP TABLE users;--","alterego":"Tony Stark","description":"Intento de inyecci[0xc3][0xb3]n SQL","powers":["Armor"]},{"id":2421,"name":"Iron Man8711","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2422,"name":"Spider Man","alterego":"Peter Parker","description":"Friendly neighborhood","powers":["Spider sense","Wall climbing"]},{"id":2423,"name":"Iron Man Infernal Karate -7c82df2c-3a50-4fcc-916d-3eac08a15c38","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2424,"name":"Iron Man Infernal Karate -bab85f99-2720-42e0-8919-61527ad5fe38","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2425,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":2427,"name":"Spider-Man-2a76ffd9-ab75-441c-b40a-17051680e952","alterego":"Peter Parker","description":"Friendly neighborhood Spider-Man","powers":["Wall-crawling","Spider-sense"]},{"id":2428,"name":"Iron Manito","alterego":"Tony Starkito","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2429,"name":"milmoral10","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2430,"name":"Thor Man 090a6a","alterego":"All jsi","description":"Superpower","powers":["Teletransportacion","Jugar futbol"]},{"id":2431,"name":"FrankBernal1234","alterego":"Peter Parker","description":"Superh[0xc3][0xa9]roe ar[0xc3][0xa1]cnido de Marvel","powers":["Agilidad","Sentido ar[0xc3][0xa1]cnido","Trepar muros"]},{"id":2433,"name":"Iron Man871124","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2435,"name":"milmoral11","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2437,"name":"coSDIsAvFg","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2438,"name":"Iron Man 456456","alterego":"Tony Stark","description":"Genio, millonario, playboy, fil[0xc3][0xa1]ntropo","powers":["Armadura","Inteligencia"]},{"id":2439,"name":"Iron Man Updated","alterego":"Tony Stark","description":"Updated description Jose","powers":["Armor","Flight","Genius"]},{"id":2440,"name":"Silvana Bentacourt v1-1750438924407","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2442,"name":"Hero_43bb0dcf","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2443,"name":"Super Girl - TM 1750438934407","alterego":"Tony Clack Kent","description":"Strong woman","powers":["Armor","Flight"]},{"id":2444,"name":"Personaje actualizado-1750438928173","alterego":"Tony Stark","description":"Genius billionaire test","powers":["Armor","Flight"]},{"id":2445,"name":"Super Girl - TM 1750438935958","alterego":"Tony Clack Kent","description":"Strong woman","powers":["Armor","Flight"]},{"id":2446,"name":"Iron Man Infernal Karate -6df4c393-3098-4b6f-88af-a656136c578b","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2448,"name":"Iron Man Infernal Karate -928e7d10-c20a-4a74-857d-2f1c4241221a","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2449,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":2451,"name":"prueba","alterego":"prueba","description":"Friendly neighborhood he"
12:08:40.591 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "ro 3","p[\r][\n]"
12:08:40.591 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "2000[\r][\n]"
12:08:40.591 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "owers":["Agility3","Spider-Sense3","Wall-Crawling3"]},{"id":2452,"name":"Captain Marvel test21","alterego":"Carol Danvers","description":"Updated description","powers":["Flight","Force"]},{"id":2453,"name":"FrankBernal12345","alterego":"Peter Parker","description":"Superh[0xc3][0xa9]roe ar[0xc3][0xa1]cnido de Marvel","powers":["Agilidad","Sentido ar[0xc3][0xa1]cnido","Trepar muros"]},{"id":2456,"name":"HeroeConsulta_070a2ec2-22fc-4d09-9e5a-0b72e1431ff4","alterego":"AlteregoConsulta","description":"Consulta","powers":["Consulta"]},{"id":2457,"name":"Hero_69340d70-fead-412c-924d-bd011269f238","alterego":"Nuevo Alterego","description":"Nuevo personaje","powers":["Poder1"]},{"id":2458,"name":"Hero_1bddc37e-e58a-4c7a-ba00-a2903766c092","alterego":"Otro","description":"Otro","powers":["Poder2"]},{"id":2459,"name":"HeroeActualizado","alterego":"AlteregoActualizado","description":"Actualizado","powers":["PoderActualizado"]},{"id":2460,"name":"Iron Fist","alterego":"Danny Rand","description":"Embodies the power of Shou Lao","powers":["Glogin fist","Strenght"]},{"id":2463,"name":"CohetePlus27","alterego":"Cohete Plus","description":"Cohetito Plus","powers":["Armors","Flight"]},{"id":2464,"name":"FrankBernal123456","alterego":"Peter Parker","description":"Superh[0xc3][0xa9]roe ar[0xc3][0xa1]cnido de Marvel","powers":["Agilidad","Sentido ar[0xc3][0xa1]cnido","Trepar muros"]},{"id":2466,"name":"Spider-Man-2afbc72d-dba4-48d0-a9d6-baaa7ac216d6","alterego":"Peter Parker","description":"Friendly neighborhood Spider-Man","powers":["Wall-crawling","Spider-sense"]},{"id":2467,"name":"Doctor Panther e54f52","alterego":"All jsi","description":"Superpower","powers":["Teletransportacion","Jugar futbol"]},{"id":2468,"name":"Super Girl - TM 1750439038083","alterego":"Tony Clack Kent","description":"Strong woman","powers":["Armor","Flight"]},{"id":2469,"name":"Iron Man - 67aba6b8","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2470,"name":"Super Girl - TM 1750439040250","alterego":"Tony Clack Kent","description":"Strong woman","powers":["Armor","Flight"]},{"id":2471,"name":"Iron Man - 02121152","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2473,"name":"Captain Marvel test22","alterego":"Carol Danvers","description":"Updated description","powers":["Flight","Force"]},{"id":2474,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":2476,"name":"Iron Man MK 32126","alterego":"Tony Stark MK 10638","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2479,"name":"Iron Man - 05aa794b","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2480,"name":"Iron Man - 55875907","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2481,"name":"Super Rein 64793abe-cf9c-4cf3-be35-2a473f89432f","alterego":"Rein","description":"Genius billionaire Pro Tekken Player","powers":["Armor","Flight"]},{"id":2483,"name":"Super Rein afd56e0b-d2ce-4551-92b0-0b75f956be96","alterego":"Rein","description":"Genius billionaire Pro Tekken Player","powers":["Armor","Flight"]},{"id":2484,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":2485,"name":"Spider-Man 126","alterego":"Peter Parker","description":"El amigable vecino Spider-Man","powers":["Sentido ar[0xc3][0xa1]cnido","Trepar paredes","Lanzar telara[0xc3][0xb1]as"]},{"id":2487,"name":"Iron Man 01b63a2d-e5c7-4977-a33c-40b4124d4752","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2488,"name":"Iron Man 3d9a75e9-c832-4f75-a4bb-ce488ba93e38","alterego":"Otro","description":"Otro","powers":["Armor"]},{"id":2490,"name":"Hero_6a8a06e6","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2491,"name":"Nombre-16452a6b-d525-498d-8671-552dc8dc3d51","alterego":"Bruce Wayne","description":"the Dark Knight","powers":["Money","Investment","Martial Arts"]},{"id":2492,"name":"prueba1","alterego":"prueba1","description":"Friendly neighborhood hero 3","powers":["Agility3","Spider-Sense3","Wall-Crawling3"]},{"id":2494,"name":"Iron Man - e3d2a234","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2495,"name":"BatMans 2026","alterego":"Bruce Wayne","description":"the Dark Knight in Gotham City","powers":["Money","Investment","Martial Arts","Detective Skills","Gadgets"]},{"id":2497,"name":"Iron Man test - aandino - 74597","alterego":"Tony Stark aandino","description":"Genius billionaire - aandino","powers":["Armor","Flight","unity","c#"]},{"id":2498,"name":"CohetePlus28","alterego":"Cohete Plus","description":"Cohetito Plus","powers":["Armors","Flight"]},{"id":2499,"name":"Iron Man test - aandino - 32288","alterego":"Tony Stark aandino","description":"Genius billionaire - aandino","powers":["Armor","Flight","unity","c#"]},{"id":2500,"name":"Iron Man 319","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2501,"name":"Iron Man 188","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2502,"name":"Iron Man 150","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2503,"name":"Iron Man 376","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2504,"name":"nombre","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":2505,"name":"Iron Man 841","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2506,"name":"FrankBernal12345678","alterego":"Peter Parker","description":"Superh[0xc3][0xa9]roe ar[0xc3][0xa1]cnido de Marvel","powers":["Agilidad","Sentido ar[0xc3][0xa1]cnido","Trepar muros"]},{"id":2509,"name":"Iron Man 251","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2510,"name":"Iron Man 399","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2511,"name":"Iron Man 212","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2512,"name":"Iron Man 227","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2513,"name":"Iron Man 819","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2514,"name":"Iron Man 915","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2516,"name":"Iron Man MK 83497","alterego":"Tony Stark MK 48654","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2519,"name":"Iron Man - 1b4f876a","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2520,"name":"Super Rein 41383588-03d0-4556-aa19-3b09348228cb","alterego":"Rein","description":"Genius billionaire Pro Tekken Player","powers":["Armor","Flight"]},{"id":2521,"name":"gCSNOLiEbl","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2522,"name":"Iron Man Updated","alterego":"Tony Stark","description":"Updated description Jose","powers":["Armor","Flight","Genius"]},{"id":2525,"name":"Eduardo Shigui","alterego":"Edu","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2526,"name":"Super Rein 3865aaa5-45ac-4799-add8-707d0da95f0e","alterego":"Rein","description":"Genius billionaire Pro Tekken Player","powers":["Armor","Flight"]},{"id":2527,"name":"Iron Man geod9","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2528,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":2530,"name":"milmoral8","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2531,"name":"Silvana Bentacourt v1-1750439180895","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2533,"name":"becarjal","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2534,"name":"P"
12:08:40.591 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "ersonaje actuali[\r][\n]"
12:08:40.591 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "c9b[\r][\n]"
12:08:40.591 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "zado-1750439184699","alterego":"Tony Stark","description":"Genius billionaire test","powers":["Armor","Flight"]},{"id":2535,"name":"Iron Man 61f90581-b881-4472-bf30-870d22dc6f43","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2537,"name":"Iron Man 313c244d-edfa-456e-a44c-0696b21b2a09","alterego":"Otro","description":"Otro","powers":["Armor"]},{"id":2539,"name":"Iron Man - 8f426e80","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2540,"name":"Iron Man 222287","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2541,"name":"tnHwEqdJgf","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2542,"name":"Scarlet America 1de22c","alterego":"All jsi","description":"Superpower","powers":["Teletransportacion","Jugar futbol"]},{"id":2543,"name":"Iron Man Updated","alterego":"Tony Stark","description":"Updated description Jose","powers":["Armor","Flight","Genius"]},{"id":2546,"name":"Thor Woman 03d7eb","alterego":"All jsi","description":"Superpower","powers":["Teletransportacion","Jugar futbol"]},{"id":2547,"name":"jzapata_1750439256899","alterego":"Jhonny Zapata","description":"Genius informatician and hacker","powers":["Hacking","Programming","Cybersecurity"]},{"id":2548,"name":"Gaia","alterego":"Gaia Zapata","description":"Genius informatician and hacker","powers":["Hacking","Programming","Cybersecurity"]},{"id":2549,"name":"CohetePlus33","alterego":"Cohete Plus","description":"Cohetito Plus","powers":["Armors","Flight"]},{"id":2551,"name":"Carlos","alterego":"Carlos","description":"Genius billionaire","powers":["Inteligencia","Sue[0xc3][0xb1]o"]},{"id":2552,"name":"Iron Man - 35b4aa5c","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2553,"name":"Thor Strange 2d255f","alterego":"All jsi","description":"Superpower","powers":["Teletransportacion","Jugar futbol"]},{"id":2554,"name":"6fe2e8ef-91b7-4d60-b459-8db3d35249ea","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2555,"name":"Iron Man 2222287","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2556,"name":"Captain America2","alterego":"Steve Rogers2","description":"Super Soldier2","powers":["Shield2","Strength2"]},{"id":2557,"name":"Jose Antonio Alvear2","alterego":"Jose Man","description":"Developer billionaire","powers":["Java","Angular"]},{"id":2559,"name":"Iron Man - d5e6e0b5","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2560,"name":"CohetePlus40","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2561,"name":"Laly","alterego":"Gladys Ronquillo","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2562,"name":"CONDORITO","alterego":"mz","description":"MZ","powers":["fury","EAT"]},{"id":2563,"name":"Iron Man Test Chapter Validation 1588","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2564,"name":"Ariel Arnedo","alterego":"AArnedo","description":"Developer","powers":["Java"]}][\r][\n]"
12:08:40.591 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "0[\r][\n]"
12:08:40.591 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-4 << "[\r][\n]"
12:08:40.591 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection [id: 4][route: {}->http://bp-se-test-cabcd9b246a5.herokuapp.com:80] can be kept alive indefinitely
12:08:40.591 [Test worker] DEBUG org.apache.http.impl.conn.DefaultManagedHttpClientConnection -- http-outgoing-4: set socket timeout to 0
12:08:40.591 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection released: [id: 4][route: {}->http://bp-se-test-cabcd9b246a5.herokuapp.com:80][total available: 1; route allocated: 1 of 5; total allocated: 1 of 10]
12:08:40.591 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection manager is shutting down
12:08:40.591 [Test worker] DEBUG org.apache.http.impl.conn.DefaultManagedHttpClientConnection -- http-outgoing-4: Close connection
12:08:40.591 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection manager shut down
12:08:40.598 [Test worker] DEBUG com.intuit.karate -- response time in milliseconds: 523
1 < 200
1 < Server: Cowboy
1 < Report-To: {"group":"heroku-nel","max_age":3600,"endpoints":[{"url":"https://nel.heroku.com/reports?ts=1750439320&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=YrmB5yVBFdMfgJMsB%2Fe1n75IIN4dHcXUl31IY0ogeSo%3D"}]}
1 < Reporting-Endpoints: heroku-nel=https://nel.heroku.com/reports?ts=1750439320&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=YrmB5yVBFdMfgJMsB%2Fe1n75IIN4dHcXUl31IY0ogeSo%3D
1 < Nel: {"report_to":"heroku-nel","max_age":3600,"success_fraction":0.005,"failure_fraction":0.05,"response_headers":["Via"]}
1 < Connection: keep-alive
1 < Content-Type: application/json
1 < Transfer-Encoding: chunked
1 < Date: Fri, 20 Jun 2025 17:08:40 GMT
1 < Via: 1.1 vegur
[{"id":118,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":119,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":121,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":122,"name":"Test Character 1750432020309","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":123,"name":"Iron Man Full v2","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":125,"name":"Test Character 1750432022197","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":126,"name":"Iron Man 53ca6cc1-a1bd-4f2b-93f9-1633be1aad6b","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":129,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":130,"name":"Thor 2e08893c-7920-498d-90f9-3343b0a54908","alterego":"Thor Odinson","description":"God of Thunder","powers":["Hammer","Lightning"]},{"id":131,"name":"Iron Man ac45fd26-8b98-487d-81c9-f2e9d934384e","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":133,"name":"Santiago Sanchez","alterego":"Santi S","description":"Ingeniero","powers":["Fuerte","Inteligente"]},{"id":134,"name":"mario almeida","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":136,"name":"Iron Man 200","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":137,"name":"Iron Man Eva","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":138,"name":"Test Character 1750432250612","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":139,"name":"Test Character 1750432250854","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":140,"name":"Test Character 1750432251501","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":141,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":143,"name":"Test Character 1750432253388","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":144,"name":"Iron Man 86dcbb11-1522-4457-afd9-398d1c189b8a","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":146,"name":"Hulk eea541c7-2292-4cef-af8c-d19a81e39cb9","alterego":"Bruce Banner","description":"Green giant","powers":["Strength"]},{"id":147,"name":"Thor 6fa4faf3-c0bb-475d-b0c9-1570131ddcc6","alterego":"Thor Odinson","description":"God of Thunder","powers":["Hammer","Lightning"]},{"id":148,"name":"Capitan America de7de8bc-4a24-4313-9cfe-200dfa6d2775","alterego":"Steve Rogers","description":"Updated description","powers":["Shield","Leadership"]},{"id":149,"name":"IronMan-92ac203d-0658-432a-8ebc-e6466d1eb66f","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":151,"name":"Spider-Man-5","alterego":"Peter Parker","description":"Superhéroe arácnido de Marvel","powers":["Agilidad","Sentido arácnido","Trepar muros"]},{"id":152,"name":"Iron Man e354d0ac-a1c2-46aa-be2e-f1d6d8f9b459","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":153,"name":"Hulk e459e8d2-7af9-4bf7-b9d5-22a9f453fffb","alterego":"Bruce Banner","description":"Green giant","powers":["Strength"]},{"id":154,"name":"Thor 2e94238c-4bea-45ec-b042-00ed2e7e8fb3","alterego":"Thor Odinson","description":"God of Thunder","powers":["Hammer","Lightning"]},{"id":155,"name":"Capitan America 9da54d03-62b6-49ac-9b9e-164d80e3c02d","alterego":"Steve Rogers","description":"Updated description","powers":["Shield","Leadership"]},{"id":157,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":159,"name":"Thor 3610678a-d9c8-4848-b133-4c7ebb9b1f6d","alterego":"Thor Odinson","description":"God of Thunder","powers":["Hammer","Lightning"]},{"id":160,"name":"Capitan America 5c6fb5f4-1f84-4149-87d5-f09499cebe3b","alterego":"Steve Rogers","description":"Updated description","powers":["Shield","Leadership"]},{"id":162,"name":"Spider-Man-6","alterego":"Peter Parker","description":"Superhéroe arácnido de Marvel","powers":["Agilidad","Sentido arácnido","Trepar muros"]},{"id":163,"name":"Captain Marvel","alterego":"Carol Danvers","description":"the biggest hero in the world","powers":["Flight","Force"]},{"id":164,"name":"Iron Man dde04cc2-ac24-4eb4-ac77-ab5592d642fc","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":165,"name":"Hulk c06d00b0-f944-432e-8cbe-646bb23e5422","alterego":"Bruce Banner","description":"Green giant","powers":["Strength"]},{"id":166,"name":"Thor e04e9665-ee54-4b9c-baa4-44a41efd1133","alterego":"Thor Odinson","description":"God of Thunder","powers":["Hammer","Lightning"]},{"id":167,"name":"Capitan America 65bfa9f4-efcd-4f20-8f98-a824c7d8eac4","alterego":"Steve Rogers","description":"Updated description","powers":["Shield","Leadership"]},{"id":169,"name":"Test Character 1750432373791","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":170,"name":"Test Character 1750432374022","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":171,"name":"Test Character 1750432374630","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":172,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":174,"name":"Test Character 1750432376433","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":175,"name":"Iron Man #3","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":176,"name":"Iron Man 5580fbb0-f402-4c30-8f00-9c9543cb5a6b","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":178,"name":"Test Character 1750432464491","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":179,"name":"Test Character 1750432465100","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":181,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":184,"name":"Test Character 1750432467117","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":185,"name":"Hulk","alterego":"No  Recuerdo","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":186,"name":"Loki","alterego":"Loki Laufeyson","description":"Dios del engaño","powers":["Magia","Ilusión"]},{"id":187,"name":"Ghost Rider JC","alterego":"Ghost Rider JC","description":"Demon","powers":["Fire","Punishing gaze"]},{"id":188,"name":"IronMan-4e1c6d16-e5ee-42d8-8337-49de7e644f2c","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":189,"name":"Deadpool jusimban3","alterego":"Wade Winston Wilson","description":"Updated description","powers":["Immortality","Regeneration","Superhuman strength"]},{"id":191,"name":"CasaPlus","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":193,"name":"BatMans 2025","alterego":"Bruce Wayne","description":"the Dark Knight","powers":["Money","Investment","Martial Arts"]},{"id":194,"name":"Jose Obando 1750432629445","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":195,"name":"Test Character 1750432656836","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":196,"name":"Test Character 1750432657078","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":197,"name":"Test Character 1750432657714","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":198,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":200,"name":"Jose Obando 1750432659387","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":201,"name":"Test Character 1750432659614","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":202,"name":"Iron Man e0a94dac-e873-4970-bd09-b4203cd66860","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":203,"name":"Chema Venegas","alterego":"José Maria Venegas","description":"Updated description","powers":["Armor","Flight"]},{"id":204,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":208,"name":"Iron Man 8aef9187-dfcf-4c54-92fe-e1833b0159e6","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":209,"name":"Iron Man BP","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":210,"name":"Jose Obando 1750432762927","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":212,"name":"Iron Man","alterego":"Tony Stark v1","description":"Updated description","powers":["Armor","Flight"]},{"id":213,"name":"Diego Iron Man","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":214,"name":"Iron Man 33145b49-a097-4c72-981e-4c57d9a5e88c","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":215,"name":"Hulk ebbc0b5f-1969-403e-a742-67d590a463ae","alterego":"Bruce Banner","description":"Green giant","powers":["Strength"]},{"id":216,"name":"Thor bc05acef-514d-4521-9c92-fc5bde2bbdd8","alterego":"Thor Odinson","description":"God of Thunder","powers":["Hammer","Lightning"]},{"id":217,"name":"Capitan America 51f41353-8527-48a5-9048-1741d044680f","alterego":"Steve Rogers","description":"Updated description","powers":["Shield","Leadership"]},{"id":219,"name":"Jose Obando 1750432788774","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":220,"name":"Capitan America","alterego":"Cris","description":"Muy muy fuertote","powers":["Escudo"]},{"id":221,"name":"Prueba name","alterego":"Alt prueba","description":"Prueba des","powers":["Armor","Flight"]},{"id":222,"name":"Spider-Man-7","alterego":"Peter Parker","description":"Superhéroe arácnido de Marvel","powers":["Agilidad","Sentido arácnido","Trepar muros"]},{"id":225,"name":"Iron Man 1da9babc-0f1b-4ad5-a4e7-06c3c258c68a","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":226,"name":"Jose Obando 1750432896081","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":227,"name":"Prueba name1","alterego":"Alt prueba","description":"Prueba des","powers":["Armor","Flight"]},{"id":228,"name":"Iron Man6","alterego":"Tony Stark6","description":"Genius billionaire6","powers":["Armor6","Flight6"]},{"id":230,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":231,"name":"Iron Man 3244c4dc-b252-4dad-8ca9-5832a0b47887","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":232,"name":"Hulk 965fef05-74b4-4eb7-b0db-05133f03b247","alterego":"Bruce Banner","description":"Green giant","powers":["Strength"]},{"id":233,"name":"Thor 3ddb8a85-f427-4b58-ba84-8de2b7e501e4","alterego":"Thor Odinson","description":"God of Thunder","powers":["Hammer","Lightning"]},{"id":234,"name":"Capitan America b95c1248-8deb-48ea-a31a-058efb0c257e","alterego":"Steve Rogers","description":"Updated description","powers":["Shield","Leadership"]},{"id":235,"name":"Jose Obando 1750432985709","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":237,"name":"Pedro Costa","alterego":"Pedrito Coco","description":"Un costeño buena onda que le gusta la playa","powers":["Reir","Cantar","Bailar"]},{"id":238,"name":"Silvana Bentacourt","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":239,"name":"Iron Man100","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":240,"name":"Iron Man JZ","alterego":"Tony Stark JZ","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":241,"name":"Wolverine","alterego":"James Howlett","description":"Mutante con garras de adamantium y factor de curación","powers":["Regeneración","Garras de adamantium","Sentidos agudos","Longevidad"]},{"id":242,"name":"Iron Man JZZ","alterego":"Otro JZ","description":"Otro","powers":["Armor"]},{"id":243,"name":"Iron Man1900","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":244,"name":"hugo leon","alterego":"Leons","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":246,"name":"Iron Man0","alterego":"Otro","description":"Otro","powers":["Armor"]},{"id":247,"name":"Iron Alexis","alterego":"Tony Alexis","description":"Genius billionaire soccer","powers":["Armor","Flight"]},{"id":248,"name":"Jose Obando 1750433080040","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":249,"name":"Iron Man abf120f1-71fc-4a6e-8458-603dd31e22c0","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":250,"name":"Jose Obando 1750433097032","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":251,"name":"Iron Men","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":252,"name":"Silvana Bentacourt v1","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":253,"name":"Test Character 1750433107277","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":254,"name":"Test Character 1750433107521","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":255,"name":"Test Character 1750433108172","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":256,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":258,"name":"Test Character 1750433110415","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":259,"name":"Anderson Morrillo DEV #","alterego":"Worst Automatizator ever","description":"updated description # 3cbc9b39-6821-47e7-8967-0b323215d9f5","powers":["JAVA","NET"]},{"id":260,"name":"uniqueName","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":261,"name":"Iron Man Infernal 1","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":262,"name":"Iron Man1901","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":263,"name":"Accelerator","alterego":"Emiya Shirou ","description":"King of Babylon, and friend of Enkidou","powers":["Full Attack","Unlimited Blades","Final Hit"]},{"id":265,"name":"IronMan-","alterego":"Otro","description":"Otro","powers":["Armor"]},{"id":266,"name":"Iron Man 20fe3893-3e5e-450b-a582-29e860e97061","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":267,"name":"Hulk d9c79414-8bed-4759-8490-d1626dd0baaa","alterego":"Bruce Banner","description":"Green giant","powers":["Strength"]},{"id":268,"name":"Thor 98acbad0-52a4-41bf-9cfe-ff4e57f25317","alterego":"Thor Odinson","description":"God of Thunder","powers":["Hammer","Lightning"]},{"id":269,"name":"Capitan America 159d7856-e8fc-409e-b072-e76f81547bc6","alterego":"Steve Rogers","description":"Updated description","powers":["Shield","Leadership"]},{"id":271,"name":"Iron Mans","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":273,"name":"TestBP","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":275,"name":"IronFB-","alterego":"Otro","description":"Otro","powers":["Armor"]},{"id":277,"name":"Test Character 1750433288330","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":278,"name":"Test Character 1750433288565","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":279,"name":"Test Character 1750433289216","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":280,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":282,"name":"Test Character 1750433291431","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":283,"name":"Iron Man 43e885e6-1428-4f2e-a2c9-4d3760dfa719","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":284,"name":"Iron Mon","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":285,"name":"Iron 6","alterego":"Tony 6","description":"Genius billionaire6","powers":["Alto6"]},{"id":287,"name":"Thryion Lannister","alterego":"Emiya Shirou ","description":"King of Babylon, and friend of Enkidou","powers":["Full Attack","Unlimited Blades","Final Hit"]},{"id":288,"name":"Iron Man c2cb5987-8855-46f0-b661-9006e15192c6","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":289,"name":"Chris M","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":290,"name":"Iron Man23232","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":291,"name":"Super Hero Test 4746","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":292,"name":"Iron Max","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":295,"name":"Test Character 1750433506400","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":296,"name":"Test Character 1750433506630","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":297,"name":"Test Character 1750433507077","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":298,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":299,"name":"Iron Man 22","alterego":"Tony Stark 22","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":300,"name":"El pepe","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":302,"name":"Test Character 1750433509103","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":303,"name":"Iron Man1902","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":304,"name":"Super Hero Test ","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":305,"name":"IronFB-69d7a1a7-49f9-4cf8-8f24-04ede770aa36","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":308,"name":"Jose Obando 1750433570443","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":310,"name":"Iron Man1903","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":311,"name":"Black Widow","alterego":"Natasha Romanoff","description":"Espía rusa","powers":["Combate","Espionaje"]},{"id":312,"name":"Thor","alterego":"Thor Odinson","description":"Dios del trueno","powers":["Control del rayo","Super fuerza","Mjolnir"]},{"id":313,"name":"Captain America","alterego":"Steve Rogers","description":"Super soldado","powers":["Super fuerza","Escudo de Vibranium"]},{"id":314,"name":"Spider-Man 113189","alterego":"Peter Parker","description":"Superhéroe arácnido de Marvel","powers":["Agilidad","Sentido arácnido","Trepar muros"]},{"id":315,"name":"CohetePlus","alterego":"Cohete Plus","description":"Cohetito Plus","powers":["Armor","Flight"]},{"id":318,"name":"Super Hero Test 123","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":319,"name":"Test Character 1750433582237","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":320,"name":"Test Character 1750433582455","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":321,"name":"Test Character 1750433583360","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":322,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":323,"name":"max versatapen","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":325,"name":"Test Character 1750433585661","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":326,"name":"Iron Man 0a790bc9-1ee6-41f5-8a31-706d23a56f87","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":328,"name":"Deadpool jusimban","alterego":"Wade Winston Wilson","description":"Mercenario, supervillano​​ y antihéroe","powers":["Immortality","Regeneration","Superhuman strength"]},{"id":329,"name":"Test Character 1750433618842","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":330,"name":"Test Character 1750433619055","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":331,"name":"Test Character 1750433619974","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":332,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":334,"name":"Test Character 1750433622270","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":335,"name":"GatunoNeptuno","alterego":"Naranjoso","description":"Crazy cat","powers":["Meow","Cry in desperation"]},{"id":336,"name":"Test Character 1750433629991","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":337,"name":"Test Character 1750433630210","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":338,"name":"Test Character 1750433630809","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":339,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":341,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":342,"name":"Iron Man tst","alterego":"Tony Stark tst","description":"Genius billionaire tst","powers":["Armor tst","Flight tst"]},{"id":343,"name":"CohetePlus1","alterego":"Cohete Plus","description":"Cohetito Plus","powers":["Armors","Flight"]},{"id":344,"name":"Iron Man God","alterego":"Tony Stark","description":"Genio, millonario, playboy, filántropo","powers":["Armadura","Inteligencia"]},{"id":347,"name":"Spider-Man1","alterego":"Peter Parker1","description":"Friendly neighborhood Spider-Man falso","powers":["Wall-crawling","Spider-sense"]},{"id":348,"name":"CasaPlus1","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":349,"name":"Test Character 1750433708796","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":350,"name":"Test Character 1750433709031","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":351,"name":"UpdateTest_71299deb_Updated","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":352,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":354,"name":"Test Character 1750433710980","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":355,"name":"Iron Man Infernal Karate -e2462451-d7f9-4eb5-9502-2f202828f715","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":356,"name":"Test Character 1750433733222","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":357,"name":"Test Character 1750433733461","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":358,"name":"Test Character 1750433733906","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":359,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":362,"name":"Jose Obando 1750433737747","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":365,"name":"Deadpool jusimban2","alterego":"Wade Winston Wilson","description":"Mercenario, supervillano​​ y antihéroe","powers":["Immortality","Regeneration","Superhuman strength"]},{"id":366,"name":"Iron Man Superior","alterego":"Tony Stark","description":"Genio, millonario, playboy, filántropo","powers":["Armadura","Inteligencia"]},{"id":367,"name":"Test Character 1750433753944","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":368,"name":"Test Character 1750433754176","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":369,"name":"Test Character 1750433754632","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":370,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":372,"name":"Test Character 1750433756102","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":373,"name":"Iron Man d53f8847-99c4-4496-a60d-7fb3e7c9c9a9","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":374,"name":"Iron Man 4711","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":375,"name":"Test Character 1750433774349","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":376,"name":"Iron Manchs","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":377,"name":"Test Character 1750433774586","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":378,"name":"Test Character 1750433775033","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":379,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":381,"name":"Test Character 1750433776511","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":382,"name":"Iron Man1904","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":383,"name":"Deadpool jusimban3","alterego":"Wade Winston Wilson","description":"Mercenario, supervillano​​ y antihéroe","powers":["Immortality","Regeneration","Superhuman strength"]},{"id":384,"name":"CohetePlus2","alterego":"Cohete Plus","description":"Cohetito Plus","powers":["Armors","Flight"]},{"id":385,"name":"Jose Obando 1750433795597","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":386,"name":"Iron Man 2e68e284-dd9d-4435-80b2-6481d8e5bac8","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":387,"name":"Iron Man Infernal Karate -5ba06ebc-c345-4fce-98d3-59ef4568efce","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":388,"name":"Test Character 1750433797315","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":389,"name":"Test Character 1750433797554","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":390,"name":"Test Character 1750433798007","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":391,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":393,"name":"Test Character 1750433799483","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":394,"name":"Iron Man tst2","alterego":"Tony Stark tst","description":"Genius billionaire tst","powers":["Armor tst","Flight tst"]},{"id":395,"name":"Man","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":396,"name":"Iron Man TestBP","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":398,"name":"Diego2 Iron Man","alterego":"Tony Stark Diego","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":399,"name":"Iron Man test - aandino","alterego":"Tony Stark aandino","description":"Genius billionaire - aandino","powers":["Armor","Flight","unity","c#"]},{"id":401,"name":"Test Character 1750433836144","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":402,"name":"Test Character 1750433836374","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":403,"name":"Test Character 1750433836808","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":404,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":406,"name":"Test Character 1750433838281","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":407,"name":"Test Character 1750433845402","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":408,"name":"Test Character 1750433845637","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":409,"name":"Test Character 1750433846080","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":410,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":411,"name":"Spider-Man1-cb88af9d-9e1d-4965-9a89-77df954d9e16","alterego":"Peter Parker1","description":"Friendly neighborhood Spider-Man falso","powers":["Wall-crawling","Spider-sense"]},{"id":413,"name":"Test Character 1750433847614","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":414,"name":"CohetePlus3","alterego":"Cohete Plus","description":"Cohetito Plus","powers":["Armors","Flight"]},{"id":415,"name":"Spiderman Test Karate","alterego":"Peter Parker","description":"Héroe arácnido de Marvel","powers":["agilidad","sentido arácnido","trepar paredes"]},{"id":416,"name":"Test Character 1750433855427","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":417,"name":"Iron Manchss","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":418,"name":"Test Character 1750433855662","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":419,"name":"Test Character 1750433856281","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":420,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":422,"name":"Test Character 1750433858961","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":423,"name":"ACC","alterego":"AGCC","description":"Genius billionaire and philanthropist","powers":["Armor","Flight"]},{"id":424,"name":"Iron Man Infernal Karate -1e7b39d2-3f63-4df9-8c8b-a8122365e368","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":425,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":426,"name":"Iron Man1905","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":428,"name":"Anderson Morrillo DEV # 54ce83f6-bbcb-4137-bffe-78aefa52fe40","alterego":"Worst Automatizator ever","description":"El Dev Humilde","powers":["JAVA","NET"]},{"id":429,"name":"IronFbb5a60f02-3e76-4d54-8277-5e0841ef8b8f","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":430,"name":"Iron Man66","alterego":"Otro","description":"Otro","powers":["Armor"]},{"id":432,"name":"Test Character 1750433899423","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":433,"name":"Test Character 1750433899666","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":434,"name":"Test Character 1750433900743","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":435,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":437,"name":"Test Character 1750433903439","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":438,"name":"Carmita","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":439,"name":"Iron Man1906","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":440,"name":"Anderson Morrillo DEV # 3969a194-06d5-49a9-9092-733f4e1c8281","alterego":"Worst Automatizator ever","description":"El Dev Humilde","powers":["JAVA","NET"]},{"id":441,"name":"Ghost Rider JC Updated","alterego":"Ghost Rider JC Updated","description":"Demon Updated","powers":["Fire","Punishing gaze"]},{"id":442,"name":"Jose Obando 1750433957284","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":443,"name":"Iron Man Rafael","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":444,"name":"Iron Marco","alterego":"Marco Jativa","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":446,"name":"Javier Simbana","alterego":"All","description":"Superpower","powers":["Teletransportacion","Jugar futbol"]},{"id":448,"name":"Iron Man a63bcaa0-8085-4566-b0cf-8f5e1b0c5c6c","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":449,"name":"Iron Man 7631688d","alterego":"Tony Stark","description":"Genius, billionaire, playboy, philanthropist. Wears a suit of armor.","powers":["Armor","Flight"]},{"id":450,"name":"Iron Man eb0e8d97","alterego":"Tony Stark","description":"Genius, billionaire, playboy, philanthropist. Wears a suit of armor.","powers":["Armor","Flight"]},{"id":451,"name":"Iron Man cb1b3f87","alterego":"Tony Stark","description":"Genius, billionaire, playboy, philanthropist. Wears a suit of armor.","powers":["Armor","Flight"]},{"id":452,"name":"Iron Man 1df3c71a","alterego":"Tony Stark","description":"Genius, billionaire, playboy, philanthropist. Wears a suit of armor.","powers":["Armor","Flight"]},{"id":453,"name":"Green Goblin","alterego":"Ned","description":"Student","powers":["Armor","Flight"]},{"id":454,"name":"Diana1750433951","alterego":"kcatucuamba","description":"A genius programmer and a superhero","powers":["PHP","JAVA"]},{"id":455,"name":"Iron Man Infernal Karate -41787326-1671-4354-95fb-5b06971d3883","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":458,"name":"Iron Man Test","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":459,"name":"Iron Man 4678f266-a460-48f1-ae8e-d927dad2bd16","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":460,"name":"Iron Man #(randomNum)","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":461,"name":"Alexis Name 3 Updated","alterego":"Alexis Alterego 3 Updated","description":"Alexis Description 3 Updated","powers":["Armor","Flight"]},{"id":463,"name":"Iron Man1907","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":464,"name":"Spider-Man-fda525ee-03b4-4a9a-bac2-b5b69f49e7a3","alterego":"Peter Parker","description":"Friendly neighborhood Spider-Man","powers":["Wall-crawling","Spider-sense"]},{"id":465,"name":"spiderman.name","alterego":"Otro","description":"Otro","powers":["Armor"]},{"id":466,"name":"IronFb57bd5b58-ae3d-4373-acfa-2919bd800e0e","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":467,"name":"Iron Man b6d81","alterego":"Otro","description":"Otro","powers":["Armor"]},{"id":468,"name":"Javier Simbana 1","alterego":"All jsi","description":"Superpower","powers":["Teletransportacion","Jugar futbol"]},{"id":469,"name":"Iron Man4","alterego":"Otro","description":"Otro","powers":["Armor"]},{"id":470,"name":"Bob1750434058","alterego":"kcatucuamba","description":"A genius programmer and a superhero","powers":["PHP","JAVA"]},{"id":471,"name":"IronMan_072abe9d-e0a2-4650-88bf-273284a64666","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":472,"name":"Chris M1","alterego":"Christian Muyon","description":"Programmer and Karate enthusiast","powers":["Intelligence","String"]},{"id":473,"name":"Iron Man 4c592141-80e1-4206-9a8b-06c0bcc1b363","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":474,"name":"Green Goblin 2","alterego":"Ned","description":"Student","powers":["Armor","Flight"]},{"id":475,"name":"Iron Man1908","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":476,"name":"Iron Man 56","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":478,"name":"Iron Man tst23","alterego":"Tony Stark tst","description":"Genius billionaire tst","powers":["Armor tst","Flight tst"]},{"id":479,"name":"Iron Man Infernal Karate -b4bb865d-a131-4ddd-b275-d6a0554308a5","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":481,"name":"Iron Mansanchez","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":482,"name":"DiegoCambiado3 Iron Man","alterego":"Tony Stark Diego","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":483,"name":"Character-ef2c4b87","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":484,"name":"Character-e9d66f0e","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":485,"name":"Character-ad7b4a88","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":486,"name":"Character-ac632283","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":487,"name":"IronFba388ed7d-d28b-4d08-b9c2-6834d477af00","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":488,"name":"Iron Man9","alterego":"Otro","description":"Otro","powers":["Armor"]},{"id":490,"name":"Iron Man 91e6d9ac","alterego":"Tony Stark","description":"Genius, billionaire, playboy, philanthropist. Wears a suit of armor.","powers":["Armor","Flight"]},{"id":491,"name":"Iron Man 0f671a8a","alterego":"Tony Stark","description":"Genius, billionaire, playboy, philanthropist. Wears a suit of armor.","powers":["Armor","Flight"]},{"id":492,"name":"Iron Man 35a2388e","alterego":"Tony Stark","description":"Genius, billionaire, playboy, philanthropist. Wears a suit of armor.","powers":["Armor","Flight"]},{"id":493,"name":"Iron Man 32ebadfa","alterego":"Tony Stark","description":"Genius, billionaire, playboy, philanthropist. Wears a suit of armor.","powers":["Armor","Flight"]},{"id":494,"name":"Anderson Morrillo DEV # aee869ff-edc7-4235-96a3-a3bd18fe402a","alterego":"Worst Automatizator ever","description":"El Dev Humilde","powers":["JAVA","NET"]},{"id":495,"name":"Anderson Morrillo DEV #","alterego":"Worst Automatizator ever","description":"El Dev Humilde","powers":["JAVA","NET"]},{"id":497,"name":"Iron Man 5a56b4d8","alterego":"Tony Stark","description":"Genius, billionaire, playboy, philanthropist. Wears a suit of armor.","powers":["Armor","Flight"]},{"id":498,"name":"Iron Man 2f038a75","alterego":"Tony Stark","description":"Genius, billionaire, playboy, philanthropist. Wears a suit of armor.","powers":["Armor","Flight"]},{"id":499,"name":"Iron Man 5454745d","alterego":"Tony Stark","description":"Genius, billionaire, playboy, philanthropist. Wears a suit of armor.","powers":["Armor","Flight"]},{"id":504,"name":"Super Madre","alterego":"Luz Toaquiza","description":"Puede hacer varias cosas","powers":["Amor","Comprensión"]},{"id":505,"name":"DiegoCambiado3 Iron Man","alterego":"Tony Stark Diego","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":506,"name":"Captain America 1750434216603","alterego":"Steve Rogers","description":"Super soldier with enhanced strength and agility","powers":["Super Strength","Enhanced Agility","Vibranium Shield"]},{"id":507,"name":"Hulk Supremo 1723463053 1750434217197","alterego":"Bruce Banner","description":"Scientist with the ability to transform into a giant green monster","powers":["Super Strength","Regeneration","Durability"]},{"id":508,"name":"Black Widow 1750434217635","alterego":"Natasha Romanoff","description":"Skilled spy and martial artist","powers":["Combat Expert","Espionage","Tactical Intelligence"]},{"id":509,"name":"Iron Man tst233","alterego":"Tony Stark tst","description":"Genius billionaire tst","powers":["Armor tst","Flight tst"]},{"id":510,"name":"Thor 1750434218264","alterego":"Thor Odinson","description":"God of Thunder from Asgard","powers":["Weather Control","Mjolnir","Superhuman Strength"]},{"id":511,"name":"Captain America 1750434218953","alterego":"Steve Rogers","description":"Super soldier with enhanced strength and agility","powers":["Super Strength","Enhanced Agility","Vibranium Shield"]},{"id":512,"name":"Spider-Man-02368906-8b2b-4e16-80b0-71dd5d2f5c4d","alterego":"Peter Parker","description":"Friendly neighborhood Spider-Man","powers":["Wall-crawling","Spider-sense"]},{"id":513,"name":"Iron Man 7fc9b5b3-d7c2-462b-a1ee-116cef0932da","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":516,"name":"Chris Muyon xd","alterego":"Christian Muyon","description":"Programmer and Karate enthusiast","powers":["Intelligence","String"]},{"id":517,"name":"DiegoCambiado3 Iron Man","alterego":"Tony Stark Diego","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":518,"name":"Iron Man1909","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":519,"name":"Iron Man58","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":520,"name":"Ironasdsadsa Man","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":521,"name":"Iron Man 9619","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":523,"name":"Iron Man 3378","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":524,"name":"Iron Man 5092","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":525,"name":"Iron Man 563","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":526,"name":"Iron Man 2753","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":527,"name":"Iron Man 202","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":529,"name":"Iron Man 9862","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":530,"name":"the winter soldier","alterego":"Stalin Condolo","description":"Un soldado del invierno","powers":["Brazo de hierro","metralladora"]},{"id":531,"name":"Iron ManSanchez2","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":532,"name":"Jose Obando 1750434296881","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":533,"name":"Sonic-27e58e7b-aee1-43d5-b47f-31b79ab9ef7a","alterego":"Super sonico","description":"Erizo azul con super velocidad","powers":["velocidad","agilidad","resistencia"]},{"id":534,"name":"Iron Man 9ce51371-d1a9-4d09-9549-f286b5e8dc82","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":536,"name":"Silvana Bentacourt v1-1750434339544","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":537,"name":"Personaje actualizado-1750434343376","alterego":"Tony Stark","description":"Genius billionaire test","powers":["Armor","Flight"]},{"id":539,"name":"Iron Man Superior-794","alterego":"Tony Stark","description":"Genio, millonario, playboy, filántropo","powers":["Armadura","Inteligencia"]},{"id":540,"name":"Hero_eb7fb2b3-489f-435d-8977-06daf4295252","alterego":"Nuevo Alterego","description":"Nuevo personaje","powers":["Poder1"]},{"id":541,"name":"Hero_98d318cb-59d0-4154-9032-ebe5943ae31a","alterego":"Otro","description":"Otro","powers":["Poder2"]},{"id":542,"name":"Iron Man TestBP1","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":543,"name":"Iron Man 18ca4000-009f-4d19-9c87-fc0de9768e13","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":545,"name":"Alexis Name 2 Updated","alterego":"Alexis Alterego 2 Updated","description":"Alexis Description 2 Updated","powers":["Armor","Flight"]},{"id":546,"name":"Iron Man1910","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":547,"name":"Alexis Name 3","alterego":" Alexis Alterego 3","description":" Alexis Description 3","powers":["Armor","Flight"]},{"id":550,"name":"nombreCreate","alterego":"Alt prueba","description":"Prueba des","powers":["Armor","Flight"]},{"id":551,"name":"Character","alterego":"Hero","description":"A character","powers":["strength"]},{"id":552,"name":"Jose Obando 1750434393499","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":554,"name":"jchuldeb","alterego":"Fernando Chulde","description":"Editar descripción","powers":["Armor","Flight"]},{"id":555,"name":"Iron Man 1750434398028","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":556,"name":"Iron Man Test3 1750434398378","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":557,"name":"Iron Man Test5 1750434399272","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":558,"name":"Iron Man Test7 1750434400132","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":560,"name":"Spider-Man Test11 1750434402397","alterego":"Peter Parker","description":"Superhéroe arácnido","powers":["Agilidad","Sentido arácnido","Trepar muros"]},{"id":561,"name":"Captain America Test11 1750434402397","alterego":"Steve Rogers","description":"Súper soldado","powers":["Fuerza","Escudo","Liderazgo"]},{"id":563,"name":"IronMan-1f93da34-ad9a-4dfa-bb94-45ae015cb268","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":564,"name":"Iron Man1911","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":565,"name":"Iron Man 9597c7ae-c86a-4a19-8070-00c9aeabd823","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":566,"name":"Iron Man aa60b152-bc11-4c5f-8de9-7db12708385b","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":567,"name":"Iron Maiden 3","alterego":"Tony Mayor","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":568,"name":"Iron Marco1","alterego":"Marco Jativa","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":569,"name":"Iron Man-3a282d5c-35e9-4f74-94f4-22d383a00024","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":570,"name":"Iron Man 982e99df-678a-47e0-88fa-637de0b6d649","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":571,"name":"XIron ManX","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":572,"name":"Iron Man 16897711","alterego":"Tony Stark","description":"Genius, billionaire, playboy, philanthropist. Wears a suit of armor.","powers":["Armor","Flight"]},{"id":573,"name":"Iron Man 83ed4d75","alterego":"Tony Stark","description":"Genius, billionaire, playboy, philanthropist. Wears a suit of armor.","powers":["Armor","Flight"]},{"id":574,"name":"Iron Man 3904c383","alterego":"Tony Stark","description":"Genius, billionaire, playboy, philanthropist. Wears a suit of armor.","powers":["Armor","Flight"]},{"id":575,"name":"Iron Man abf03b68","alterego":"Tony Stark","description":"Genius, billionaire, playboy, philanthropist. Wears a suit of armor.","powers":["Armor","Flight"]},{"id":577,"name":"Spider-Man-5e6c5350-ad12-41f5-9358-687c73bd9279","alterego":"Peter Parker","description":"Friendly neighborhood Spider-Man","powers":["Wall-crawling","Spider-sense"]},{"id":579,"name":"milmoral9","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":580,"name":"Iron Man 63","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":581,"name":"Iron Man 4731","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":582,"name":"Iron Man 2233","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":583,"name":"Iron Man 363","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":584,"name":"nombre","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":585,"name":"Iron Man 8265","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":591,"name":"Iron Marck","alterego":"Marco Jativa","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":592,"name":"Chris Muyon 42146","alterego":"Christian Muyon","description":"Programmer and Karate enthusiast","powers":["Intelligence","String"]},{"id":594,"name":"Capitan America Negrito 2","alterego":"Un nombre Random","description":"Personaje para prueba temporal","powers":["Red","Blue"]},{"id":595,"name":"Iron Man 30865d8b-f4d1-4d3a-8da9-61065a3d9e1b","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":597,"name":"Iron Man 1195","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":598,"name":"Iron Man 2555","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":599,"name":"Iron Man 226","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":600,"name":"Iron Man 3826","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":602,"name":"Iron Man 2839","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":605,"name":"Kramerx","alterego":"Updated Hero","description":"Updated description","powers":["updated power"]},{"id":606,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":607,"name":"I2","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":608,"name":"Silvana Bentacourt v1-1750434549919","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":609,"name":"Jose Castle","alterego":"Super Pichincha","description":"Genius Developer","powers":["Armor","Flight","Super Strength","Intelligence"]},{"id":610,"name":"UpdateTest_c31bf866_Updated","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":611,"name":"jose","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":613,"name":"Iron Man-1e2ab87a-d0d2-4656-913a-c4279d3bfa6f","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":614,"name":"Iron Man 5d59a582-166c-4720-b20d-cec95d9982f0","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":615,"name":"Jose Obando 1750434583471","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":616,"name":"milmoral2","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":617,"name":"milmoral3","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":618,"name":"Iron Man Superior-4235","alterego":"Tony Stark","description":"Genio, millonario, playboy, filántropo","powers":["Armadura","Inteligencia"]},{"id":621,"name":"Iron Man v2","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":623,"name":"IronMan-e279bc88-b3e5-4731-9a82-0fbce36ad6e3","alterego":"Santiago Sanchez","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":624,"name":"Test Character 1750434618","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":627,"name":"CohetePlus6","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":629,"name":"Spider-Man-New","alterego":"Peter Parker","description":"Superhéroe arácnido de Marvel","powers":["Agilidad","Sentido arácnido","Trepar muros"]},{"id":630,"name":"Captain America 1750434654993","alterego":"Steve Rogers","description":"Super soldier with enhanced strength and agility","powers":["Super Strength","Enhanced Agility","Vibranium Shield"]},{"id":631,"name":"Hulk Supremo 1723463053 1750434655581","alterego":"Bruce Banner","description":"Scientist with the ability to transform into a giant green monster","powers":["Super Strength","Regeneration","Durability"]},{"id":632,"name":"Black Widow 1750434655839","alterego":"Natasha Romanoff","description":"Skilled spy and martial artist","powers":["Combat Expert","Espionage","Tactical Intelligence"]},{"id":633,"name":"Thor 1750434656329","alterego":"Thor Odinson","description":"God of Thunder from Asgard","powers":["Weather Control","Mjolnir","Superhuman Strength"]},{"id":634,"name":"Captain America 1750434656777","alterego":"Steve Rogers","description":"Super soldier with enhanced strength and agility","powers":["Super Strength","Enhanced Agility","Vibranium Shield"]},{"id":635,"name":"Iron Man dea5b9c1-049a-4cc7-93b0-f46351816106","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":636,"name":"Iron Man fd4eebef-5bc2-440d-aaab-761cf21cfb05","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":637,"name":"Iron Marck10","alterego":"Marco Jativa","description":"Genius Multi billionaire","powers":["Armor","Flight"]},{"id":641,"name":"Iron Man-e60af0ac-255a-4fe3-bfb4-438b4aa31007","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":642,"name":"Iron Man Superior-3419","alterego":"Tony Stark","description":"Genio, millonario, playboy, filántropo","powers":["Armadura","Inteligencia"]},{"id":643,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":645,"name":"IronFbb697fe07-575a-4809-be2c-5a8ca55a9e42","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":646,"name":"Silvana Bentacourt v1-1750434702372","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":649,"name":"HeroeConsulta_5dc7aabc-c03f-48f8-a0c5-dcac3b97293c","alterego":"AlteregoConsulta","description":"Consulta","powers":["Consulta"]},{"id":651,"name":"Hero_5bc6275a-7bcd-4c58-8c4d-e5b5ffa7e8ca","alterego":"Nuevo Alterego","description":"Nuevo personaje","powers":["Poder1"]},{"id":652,"name":"Hero_f5cfbdf0-c152-402f-8af1-13f5843bfe6f","alterego":"Otro","description":"Otro","powers":["Poder2"]},{"id":653,"name":"HeroeActualizado","alterego":"AlteregoActualizado","description":"Actualizado","powers":["PoderActualizado"]},{"id":654,"name":"Vision Woman 221b89","alterego":"All jsi","description":"Superpower","powers":["Teletransportacion","Jugar futbol"]},{"id":655,"name":"anamcias","alterego":"anamcias","description":"Developer","powers":["Angular","Karate"]},{"id":657,"name":"Captain America 1750434732444","alterego":"Steve Rogers","description":"Super soldier with enhanced strength and agility","powers":["Super Strength","Enhanced Agility","Vibranium Shield"]},{"id":658,"name":"Hulk 1750434733011","alterego":"Bruce Banner","description":"Scientist with the ability to transform into a giant green monster","powers":["Super Strength","Regeneration","Durability"]},{"id":659,"name":"Black Widow 1750434733259","alterego":"Natasha Romanoff","description":"Skilled spy and martial artist","powers":["Combat Expert","Espionage","Tactical Intelligence"]},{"id":660,"name":"Thor 1750434733714","alterego":"Thor Odinson","description":"God of Thunder from Asgard","powers":["Weather Control","Mjolnir","Superhuman Strength"]},{"id":661,"name":"Captain America 1750434734194","alterego":"Steve Rogers","description":"Super soldier with enhanced strength and agility","powers":["Super Strength","Enhanced Agility","Vibranium Shield"]},{"id":662,"name":"Silvana Bentacourt v1-1750434738344","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":663,"name":"Black Panther","alterego":"T'Challa","description":"Rey de Wakanda","powers":["Fuerza","Tecnología"]},{"id":664,"name":"Thanor","alterego":"Jack Doson","description":"Genius Power","powers":["Armor","Flight"]},{"id":665,"name":"Iron Man Test 1750434749684","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":666,"name":"Iron Man-ca8ae162-fa01-4994-97a8-b917491af703","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":668,"name":"Blue Marvel","alterego":"Adán Bernard Brashear","description":"Cientifico","powers":["living reactor"]},{"id":669,"name":"Iron Man Superior-8548","alterego":"Tony Stark","description":"Genio, millonario, playboy, filántropo","powers":["Armadura","Inteligencia"]},{"id":670,"name":"JaHcOiADzl","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":671,"name":"IronMan-1ef5b5f9-7c9c-4fe1-b28b-6762a589fe27","alterego":"Santiago Sanchez","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":672,"name":"Iron Man 8ad91d8d-f4ae-4470-a041-dbbc9fc9291d","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":673,"name":"Carlos Arcentales","alterego":"Developer","description":"Computer 24/7","powers":["Sitting all day"]},{"id":674,"name":"Spider-Man Test NN","alterego":"Peter Parker","description":"Superhéroe arácnido de Marvel","powers":["Agilidad","Sentido arácnido","Trepar muros"]},{"id":675,"name":"andres calamaro","alterego":"calamardo","description":"cantante","powers":["aaaa","Flibbbbbght"]},{"id":676,"name":"Sonic-f30f3f75-0ae5-47b5-9cf2-65616ca4502b","alterego":"Super sonico","description":"Erizo azul con super velocidad","powers":["velocidad","agilidad","resistencia"]},{"id":678,"name":"CohetePlus4","alterego":"Cohete Plus","description":"Cohetito Plus","powers":["Armors","Flight"]},{"id":680,"name":"Iron Man d06400bc-3bbf-48eb-89e5-32ab928e76b7","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":681,"name":"Iron Marck11","alterego":"Marco Jativa","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":682,"name":"Spider-Man-New-1","alterego":"Peter Parker","description":"Superhéroe arácnido de Marvel","powers":["Agilidad","Sentido arácnido","Trepar muros"]},{"id":683,"name":"Anderson Morrillo DEV # 7fe66a00-8ffd-4853-9c96-a274c6067884","alterego":"Worst Automatizator ever","description":"El Dev Humilde","powers":["JAVA","NET"]},{"id":684,"name":"Iron Man Superior-7098","alterego":"Tony Stark","description":"Genio, millonario, playboy, filántropo","powers":["Armadura","Inteligencia"]},{"id":688,"name":"Sonic-bf563f0f-fb4b-4254-8cf8-0ab44728b0c8","alterego":"Super sonico","description":"Erizo azul con super velocidad","powers":["velocidad","agilidad","resistencia"]},{"id":689,"name":"Silver surfer","alterego":"Silver","description":"Humanoid Alien","powers":["volar","fuerza"]},{"id":690,"name":"I2_73a3f8a4-94ff-4ff2-8a56-a4132bca6948","alterego":"Steve Rogers","description":"Super soldier","powers":["Super Strength","Shield"]},{"id":691,"name":"Iron Man1913","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":692,"name":"Jose Obando 1750434857758","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":693,"name":"Anderson Morrillo DEV # a8d0f72e-508f-4c00-afc1-0d416e911fec","alterego":"Worst Automatizator ever","description":"El Dev Humilde","powers":["JAVA","NET"]},{"id":695,"name":"Iron Man-1750434870231","alterego":"Tony Stark","description":"Updated description 1750434871868","powers":["Armor","Flight"]},{"id":696,"name":"Iron Man-1750434873814","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":697,"name":"Wonder Lord 45cc01","alterego":"All jsi","description":"Superpower","powers":["Teletransportacion","Jugar futbol"]},{"id":698,"name":"Iron Man-1750434877435","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":699,"name":"\"; DROP TABLE characters; --","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":701,"name":"Iron Man Infernal Karate -c83db201-9f36-4ffa-8b65-69cf1ed417fd","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":702,"name":"Iron Man 1750434916663","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":703,"name":"CohetePlus7","alterego":"Cohete Plus","description":"Cohetito Plus","powers":["Armors","Flight"]},{"id":705,"name":"Iron Man 71cc6bdc","alterego":"Tony Stark","description":"Genius, billionaire, playboy, philanthropist. Wears a suit of armor.","powers":["Armor","Flight"]},{"id":706,"name":"Iron Man abc73c30","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":708,"name":"Iron Man 10b8e6d2","alterego":"Tony Stark","description":"Genius, billionaire, playboy, philanthropist. Wears a suit of armor.","powers":["Armor","Flight"]},{"id":709,"name":"Spider-Man-fi","alterego":"Peter Parker","description":"Superhéroe arácnido de Marvel","powers":["Agilidad","Sentido arácnido","Trepar muros"]},{"id":710,"name":"Iron Man 7ebf883d-acd4-49ab-90f9-80925b6eb69c","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":711,"name":"Captain Strange bbd0f3","alterego":"All jsi","description":"Superpower","powers":["Teletransportacion","Jugar futbol"]},{"id":712,"name":"Castleman","alterego":"Super castle","description":"Genius Dev","powers":["dev","qa"]},{"id":713,"name":"dSAROzEjqI","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":714,"name":"Iron Man_ebde376d-72ed-44a9-80e7-3c09ac314089","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":715,"name":"Iron Marck13","alterego":"Marco Jativa","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":716,"name":"Iron Man 1750434961700","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":717,"name":"Iron Man Superior-2063","alterego":"Tony Stark","description":"Genio, millonario, playboy, filántropo","powers":["Armadura","Inteligencia"]},{"id":719,"name":"I2_73a3f8a4-94ff-4ff2-8a56-a4132bca6949","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":720,"name":"Iron Man Test Armando","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":721,"name":"ErrorServer500","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":722,"name":"Iron Man Test 1750434992629","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":723,"name":"Carlos Arcentales1","alterego":"Developer","description":"Computer 24/7","powers":["Sitting all day"]},{"id":724,"name":"Jose Obando ","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":728,"name":"Hero_a6ddccea-e0b1-44a9-a3ca-71e19ebb4ee5","alterego":"Nuevo Alterego","description":"Nuevo personaje","powers":["Poder1"]},{"id":729,"name":"Hero_17ea9470-e103-4144-a4ca-000ff8bcde5f","alterego":"Otro","description":"Otro","powers":["Poder2"]},{"id":731,"name":"Test Character 1750435001668","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":732,"name":"HeroeActualizado","alterego":"AlteregoActualizado","description":"Actualizado","powers":["PoderActualizado"]},{"id":733,"name":"Test Character 1750435001909","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":735,"name":"Test Character 1750435002972","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":736,"name":"Iron Man-1750435002424","alterego":"Tony Stark","description":"Updated description 1750435003911","powers":["Armor","Flight"]},{"id":737,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":739,"name":"Test Character 1750435005711","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":740,"name":"Iron Man d79feef5-ee40-47d4-a3e0-ce8335d60fb6","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":741,"name":"Super Hero Test 4181","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":742,"name":"Iron Man-1750435005758","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":743,"name":"Jose Obando 1750435006315","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":744,"name":"UIFLGPKgwd","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":745,"name":"Super Hero Test 9203","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":746,"name":"Black Widow e0cecd","alterego":"All jsi","description":"Superpower","powers":["Teletransportacion","Jugar futbol"]},{"id":747,"name":"Iron Man-1750435009457","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":749,"name":"Iron Man ac65cd4e-f8ee-4e20-af62-807e7c6438cf","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":750,"name":"Chris Muyon 91518","alterego":"Christian Muyon","description":"Programmer and Karate enthusiast","powers":["Intelligence","String"]},{"id":751,"name":"kramerx","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":753,"name":"Capitan America Negrito 3","alterego":"Un nombre Random para el negrito 3","description":"Personaje para prueba temporal No me borren porfas","powers":["Red","Blue"]},{"id":754,"name":"Spiderman","alterego":"Peter Parker","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":755,"name":"Iron Manson","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":756,"name":"Iron Man Infernal Karate -d1835d5f-3cbd-43e6-bd76-dc54277ae3d1","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":757,"name":"Thor aaf428f9-7f59-4314-b8dd-b2c8285ef0c4","alterego":"Thor","description":"Dios del trueno,","powers":["Speed","Strength"]},{"id":758,"name":"Iron Man Superior-7283-105634","alterego":"Tony Stark","description":"Genio, millonario, playboy, filántropo","powers":["Armadura","Inteligencia"]},{"id":760,"name":"Iron Man 04f157cd-fed9-42db-8154-452dfee7878c","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":762,"name":"Test Character 1750435051243","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":763,"name":"Test Character 1750435051489","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":764,"name":"Test Character 1750435052509","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":765,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":766,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":768,"name":"Test Character 1750435055188","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":769,"name":"Iron Man 1750435054915","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":770,"name":"I2_af1ef636-6b7a-4753-9c3c-3193eddc46ce","alterego":"Steve Rogers","description":"Super soldier","powers":["Super Strength","Shield"]},{"id":771,"name":"Iron Man ebbcd79c-585d-4589-a191-41738c3092dd","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":772,"name":"Spider Boby 2","alterego":"Boby","description":"Student","powers":["Armor","Flight"]},{"id":773,"name":"Iron Man-8448985f-b485-41e9-a251-30c84c558927","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":774,"name":"Iron Man-1750435078065","alterego":"Tony Stark","description":"Updated description 1750435079527","powers":["Armor","Flight"]},{"id":776,"name":"Iron Man-1750435081593","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":777,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":779,"name":"Iron Man-1750435085457","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":781,"name":"IronFb60a86288-3a35-4318-8c1e-073df5c90941","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":782,"name":"Iron Man_4238bc3a-d63a-42d6-8efd-4bfe2dad81d5","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":783,"name":"Iron Man Test 1750435097303","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":786,"name":"Jose Obando 1750435106152","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":787,"name":"Test Character 1750435106752","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":788,"name":"Test Character 1750435106996","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":789,"name":"Test Character 1750435108042","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":790,"name":"Super Hero Test 9086","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":791,"name":"Spider Boby 3","alterego":"Boby","description":"Student","powers":["Armor","Flight"]},{"id":792,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":793,"name":"IronMan-126b29a8-0b98-4414-9242-f2b3202ad522","alterego":"Santiago Sanchez","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":794,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":796,"name":"Test Character 1750435110732","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":798,"name":"Bryan Carrillo","alterego":"bcarrill","description":"Test","powers":["Armor","Flight"]},{"id":800,"name":"mario almeida4","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":802,"name":"Captain America 1750435170454","alterego":"Steve Rogers","description":"Super soldier with enhanced strength and agility","powers":["Super Strength","Enhanced Agility","Vibranium Shield"]},{"id":803,"name":"Hulk 1750435171053","alterego":"Bruce Banner","description":"Scientist with the ability to transform into a giant green monster","powers":["Super Strength","Regeneration","Durability"]},{"id":804,"name":"Black Widow 1750435171297","alterego":"Natasha Romanoff","description":"Skilled spy and martial artist","powers":["Combat Expert","Espionage","Tactical Intelligence"]},{"id":805,"name":"Thor 1750435171760","alterego":"Thor Odinson","description":"God of Thunder from Asgard","powers":["Weather Control","Mjolnir","Superhuman Strength"]},{"id":806,"name":"Captain America 1750435172222","alterego":"Steve Rogers","description":"Super soldier with enhanced strength and agility","powers":["Super Strength","Enhanced Agility","Vibranium Shield"]},{"id":807,"name":"Test Character 1750435187058","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":808,"name":"Test Character 1750435187307","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":809,"name":"Test Character 1750435188383","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":810,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":812,"name":"Test Character 1750435191161","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":813,"name":"Sonic-84ccc118-4255-43fe-b0df-aa0aa7e2030f","alterego":"Super sonico","description":"Erizo azul con super velocidad","powers":["velocidad","agilidad","resistencia"]},{"id":814,"name":"Franky","alterego":"Frank  Gómez","description":"Genius Power","powers":["Dev","soft-skills"]},{"id":815,"name":"Iron Man ca034017-2379-40d2-9abd-b3c4ebd65e3d","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":816,"name":"Iron Man1915","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":817,"name":"Test Character 1750435202583","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":819,"name":"Test Character 1750435203924","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":820,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":822,"name":"Test Character 1750435206724","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":823,"name":"Test Character 1750435219684","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":824,"name":"Test Character 1750435219930","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":825,"name":"Test Character 1750435221013","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":826,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":828,"name":"IronMan-93bc5862-b995-4936-a2af-6fc972ea6781","alterego":"Santiago Sanchez","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":829,"name":"Test Character 1750435223803","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":831,"name":"Iron Man 7721ce9c-78ee-4e05-ba5a-60e804794866","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":832,"name":"Sonic-d82cc6b3-cf99-4ba1-8f74-565a3d43d021","alterego":"Super sonico","description":"Erizo azul con super velocidad","powers":["velocidad","agilidad","resistencia"]},{"id":833,"name":"chleona","alterego":"Leons","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":834,"name":"Edulima","alterego":"Edu Lima","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":835,"name":"Captain America 1750435236281","alterego":"Steve Rogers","description":"Super soldier with enhanced strength and agility","powers":["Super Strength","Enhanced Agility","Vibranium Shield"]},{"id":836,"name":"Hulk 1750435236908","alterego":"Bruce Banner","description":"Scientist with the ability to transform into a giant green monster","powers":["Super Strength","Regeneration","Durability"]},{"id":837,"name":"Black Widow 1750435237144","alterego":"Natasha Romanoff","description":"Skilled spy and martial artist","powers":["Combat Expert","Espionage","Tactical Intelligence"]},{"id":838,"name":"Thor 1750435237605","alterego":"Thor Odinson","description":"God of Thunder from Asgard","powers":["Weather Control","Mjolnir","Superhuman Strength"]},{"id":839,"name":"Captain America 1750435238033","alterego":"Steve Rogers","description":"Super soldier with enhanced strength and agility","powers":["Super Strength","Enhanced Agility","Vibranium Shield"]},{"id":840,"name":"Iron Man_R1","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":841,"name":"Doctor Woman 3ba7c0","alterego":"All jsi","description":"Superpower","powers":["Teletransportacion","Jugar futbol"]},{"id":843,"name":"Franky2 Gómez C","alterego":"Frank  Gómez 2","description":"Foundation Power","powers":["Dev","soft-skills","QA"]},{"id":844,"name":"Rein Batman","alterego":"Rein","description":"Genius billionaire Pro Tekken Player","powers":["Armor","Flight"]},{"id":845,"name":"Iron Man 3281ece1-88b7-4831-8871-d15bcc2f324c","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":846,"name":"Test Character 1750435267087","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":847,"name":"Test Character 1750435267352","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":848,"name":"Test Character 1750435268438","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":849,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":851,"name":"Test Character 1750435271239","alterego":"Test Alter Ego","description":"Test Description","powers":["Test Power 1","Test Power 2"]},{"id":852,"name":"Iron Maidens","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":854,"name":"Iron Man Rafael6yysg6ot","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":856,"name":"Iron Man Rafael5nbh0li3","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":857,"name":"iMaMgUYCAQ","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":858,"name":"Iront Man tstttttt","alterego":"Tony Stark tst4","description":"Genius billionaire tst4","powers":["Armor tst4","Flight tst4"]},{"id":859,"name":"CHAPULIN COLORADO","alterego":"mz","description":"MZ","powers":["fury","EAT"]},{"id":861,"name":"Iron Man 11223","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":863,"name":"Sonic-2096ccde-28e7-4c6e-b795-dc18b7c693f1","alterego":"Super sonico","description":"Erizo azul con super velocidad","powers":["velocidad","agilidad","resistencia"]},{"id":864,"name":"Iron Man-5e71719b-7c06-4e73-abd7-895d8d16ee1c","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":865,"name":"Rein Batman 1","alterego":"Rein","description":"Genius billionaire Pro Tekken Player","powers":["Armor","Flight"]},{"id":866,"name":"Iron Man #9015","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":867,"name":"Prueba Pichincha0dcd3e56-9121-4274-bbe9-3cd421c4e7a7781","alterego":"Alt prueba","description":"Prueba des","powers":["Armor","Flight"]},{"id":868,"name":"Black America b95dfc","alterego":"All jsi","description":"Superpower","powers":["Teletransportacion","Jugar futbol"]},{"id":869,"name":"Iron Man 1750435332795","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":870,"name":"Iron Man #2090","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":871,"name":"Iron Man 1750435334408","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":873,"name":"Iron Man","alterego":"Tony Stark X","description":"Updated description","powers":["Armor","Flight"]},{"id":874,"name":"Iron Man Rafaelps49a20y","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":875,"name":"IronMan-e9dc335f-2cb5-4994-b31b-b45479436c30","alterego":"Santiago Sanchez","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":876,"name":"Iron Man Infernal Karate -1b349934-1c76-4789-93ed-86df94b3bab6","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":877,"name":"Super Hero Test 500","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":878,"name":"1Iron Man_r1","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":879,"name":"Iron Man Infernal Karate -5dbe5bd6-1ad7-4c94-91f2-53b8e16f3080","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":880,"name":"Super Hero Test 1069","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":881,"name":"Iron Man Rafael6y96my8l","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":882,"name":"Iron Man f6e38507-5f82-49ef-95c3-8e3b4cab62eb","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":883,"name":"Iron Man e75d7000-77dd-4ddc-acfd-f64ecaf5b277","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":884,"name":"Iron Man f168694c-c735-4e5d-a858-a741c71a5b33","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":885,"name":"Iron Man ee9f8afc-2391-4396-b7b6-7b9135876080","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":886,"name":"Iron Man e24e3542-c156-4d4e-a6e6-4c7a3bbfe9ce","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":887,"name":"Iron Man 89f5ee02-debd-4ea9-bcf7-90527151df4f","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":888,"name":"Iron Man f62165cd-b4f6-4f1d-a4f8-d9ba01fb3854","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":889,"name":"Iron Man effa79f7-455e-47ac-97fc-248c26e51f84","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":890,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":892,"name":"Iron Man_c8c4114f-954a-4157-b3d6-1f96d47000c0","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":894,"name":"I2_5a9b1ce5-1928-4df3-9a33-6feff687d6be","alterego":"Steve Rogers","description":"Super soldier","powers":["Super Strength","Shield"]},{"id":895,"name":"Iron Marck14","alterego":"Marco Jativa","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":897,"name":"2Iron Man_R1","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":898,"name":"Captain America 1750435378758","alterego":"Steve Rogers","description":"Super soldier with enhanced strength and agility","powers":["Super Strength","Enhanced Agility","Vibranium Shield"]},{"id":899,"name":"Hulk 1750435379415","alterego":"Bruce Banner","description":"Scientist with the ability to transform into a giant green monster","powers":["Super Strength","Regeneration","Durability"]},{"id":900,"name":"Iron Man 77645bb2-47c6-46da-95c8-2f7bbb3cd427","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":901,"name":"Nuevo Personaje #2088","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":902,"name":"Black Widow 1750435381094","alterego":"Natasha Romanoff","description":"Skilled spy and martial artist","powers":["Combat Expert","Espionage","Tactical Intelligence"]},{"id":903,"name":"Thor 1750435382825","alterego":"Thor Odinson","description":"God of Thunder from Asgard","powers":["Weather Control","Mjolnir","Superhuman Strength"]},{"id":904,"name":"Thors","alterego":"Rayo Man","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":905,"name":"Captain America 1750435384507","alterego":"Steve Rogers","description":"Super soldier with enhanced strength and agility","powers":["Super Strength","Enhanced Agility","Vibranium Shield"]},{"id":907,"name":"CohetePlus8","alterego":"Cohete Plus","description":"Cohetito Plus","powers":["Armors","Flight"]},{"id":908,"name":"Prueba Pichinchaf6587085-7bb9-4ede-9697-0210ca87ac471007","alterego":"Alt prueba","description":"Prueba des","powers":["Armor","Flight"]},{"id":909,"name":"Prueba Pichincha3c2bd79a-9c44-44f2-95e7-ff2489e2076d9887","alterego":"Otro","description":"Otro","powers":["Armor"]},{"id":910,"name":"Super Hero Test 8635","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":911,"name":"Super Hero Test 8202","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":912,"name":"2Iron Man","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":913,"name":"Iron Man Infernal Karate -55a18ae7-63dd-495e-a816-d69d36054423","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":914,"name":"Iron Man Editado","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":917,"name":"Thors2","alterego":"Rayo Man","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":918,"name":"CohetePlus5","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":919,"name":"Hulk2","alterego":"Si Recuerdo","description":"Updated Description","powers":["Armor","Flight"]},{"id":920,"name":"Iron Man Test 1750435448017","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":922,"name":"Diego1 Iron Man","alterego":"Tony Stark Diego","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":923,"name":"DiegoCambiado3 Iron Man","alterego":"Tony Stark Diego","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":924,"name":"Iron Man f334567c-af75-47cf-88bc-036551b99974","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":925,"name":"Iron Man 3a122aeb-0fd7-4e7e-a411-0e0c94a668eb","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":926,"name":"Iron Man 82830233-5a04-4d58-9267-aaa9e5c0187c","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":927,"name":"Iron Man f38e92b0-5ea3-4b5b-8e84-9a1fc2dc4409","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":928,"name":"Iron Man 569c2346-df86-46e9-8ca4-491fbee99fbf","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":929,"name":"Iron Man 6ce4dd6e-0bb8-4e29-8a99-f16a999838d2","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":930,"name":"Iron Man eaac79c8-540c-4fe0-9b82-ea916bad1088","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":931,"name":"Iron Man 80ddece7-2c23-4570-8679-62bd36e4a0fe","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":932,"name":"Iron Man 269a2031-06df-4f74-a80e-862231ca277f","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":934,"name":"Iron Man Rafaeldcollyfk","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":935,"name":"I2_1e9986da-8cce-4898-beba-ec3248e46508","alterego":"Steve Rogers","description":"Super soldier","powers":["Super Strength","Shield"]},{"id":938,"name":"Anderson Morrillo DEV # a15932ce-0317-402b-bcfa-895b16dd4d19","alterego":"Worst Automatizator ever","description":"El Dev Humilde","powers":["JAVA","NET"]},{"id":939,"name":"Iron Man Duplicate 1750435476808","alterego":"Otro","description":"Otro","powers":["Armor"]},{"id":940,"name":"Spider-Man 426","alterego":"Peter Parker","description":"El amigable vecino Spider-Man","powers":["Sentido arácnido","Trepar paredes","Lanzar telarañas"]},{"id":941,"name":"Spider-Man 362","alterego":"Otro","description":"Otro","powers":["Sentido arácnido"]},{"id":944,"name":"Iron Man Test 1750435503409","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":947,"name":"Iron Man","alterego":"Tony Stark X","description":"Updated description","powers":["Armor","Flight"]},{"id":948,"name":"Rein Batman be527396-34e6-4733-bcb3-7f4e575e94e8","alterego":"Rein","description":"Genius billionaire Pro Tekken Player","powers":["Armor","Flight"]},{"id":949,"name":"CohetePlus9","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":950,"name":"Iron Man 857abe15-57b3-4061-9b8b-2926081f3688","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":951,"name":"Iron Man 2ef32151-1370-468f-8635-422d69d5db81","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":952,"name":"Iron Man 3700e2fb-6099-454d-acdd-4112cd6dd972","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":953,"name":"Iron Man 5048f434-9232-44e9-aa53-95aa122880a1","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":954,"name":"Iron Man 87ba32a7-1465-4037-9383-05dee9d20fe6","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":955,"name":"Iron Man 2cfc22cf-00fe-42af-ae3a-3541e6ccee6f","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":956,"name":"Iron Man def5622c-993c-4ed9-ad7a-0c9e2a67e5f3","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":957,"name":"Iron Man e1929de8-92e8-4819-ac53-de723c2fb1c7","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":958,"name":"Iron Man 600","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":959,"name":"Iron Man 884","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":960,"name":"Iron Man 122","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":961,"name":"Iron Man 790","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":962,"name":"nombre","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":963,"name":"Nombre-25774c23-7a4d-4c00-98b8-d1b1e991ffcb","alterego":"Bruce Wayne","description":"the Dark Knight","powers":["Money","Investment","Martial Arts"]},{"id":964,"name":"Iron Man 255","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":965,"name":"Silvana Bentacourt v1-1750435519164","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":967,"name":"Iron Man 572","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":969,"name":"Iron Man 77f92d27-108f-4b11-bb40-e8404bdcb55c","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":970,"name":"Nuevo Personaje #1143","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":971,"name":"Prueba Pichincha872bfa00-6f0f-426a-adc1-87687a9a5d4a256","alterego":"Alt prueba","description":"Prueba des","powers":["Armor","Flight"]},{"id":972,"name":"Prueba Pichinchae131f0c1-b584-47c5-af37-2b68d033c2ec6690","alterego":"Otro","description":"Otro","powers":["Armor"]},{"id":973,"name":"Castleman_1","alterego":"Super castle_1","description":"Genius Dev_1","powers":["dev_1","qa_1"]},{"id":974,"name":"Anderson Morrillo DEV # 3c3f54e0-4c47-4a80-887d-f59b0a7a514f","alterego":"Worst Automatizator ever","description":"El Dev Humilde","powers":["JAVA","NET"]},{"id":975,"name":"CapitanAmerica001","alterego":"Doraemon","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":976,"name":"Rein Batman 769fa36c-5dc2-47ea-a2bf-b1ad4c67b8ee","alterego":"Rein","description":"Genius billionaire Pro Tekken Player","powers":["Armor","Flight"]},{"id":977,"name":"Anderson Morrillo DEV # f1feca28-dc56-416c-b8f5-a61f9fe0dbe8","alterego":"Worst Automatizator ever","description":"El Dev Humilde","powers":["JAVA","NET"]},{"id":978,"name":"Super Hero Test 2617","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":979,"name":"Super Hero Test 9135","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":981,"name":"Franky Gomez Cabrera","alterego":"Frank Gómez C","description":"Genius Power","powers":["Dev","soft-skills"]},{"id":982,"name":"Iron Man","alterego":"Tony Stark X","description":"Updated description","powers":["Armor","Flight"]},{"id":983,"name":"Jose Obando 1750435566458","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":986,"name":"Spider Lord df55d2","alterego":"All jsi","description":"Superpower","powers":["Teletransportacion","Jugar futbol"]},{"id":987,"name":"I2_3b5b46de-51eb-4041-925d-259780f87b20","alterego":"Steve Rogers","description":"Super soldier","powers":["Super Strength","Shield"]},{"id":991,"name":"Super Hero Test 7962","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":992,"name":"Iron Man-32d2bb49-e3fd-44bb-99a9-eb4f9f32ff4d","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":994,"name":"Iron Man 1c576f86-eba8-42bc-beb6-822436077093","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":995,"name":"Jose Obando 1750435587942","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":997,"name":"Captain America 1750435585271","alterego":"Steve Rogers","description":"Super soldier with enhanced strength and agility","powers":["Super Strength","Enhanced Agility","Vibranium Shield"]},{"id":998,"name":"Hulk 1750435585869","alterego":"Bruce Banner","description":"Scientist with the ability to transform into a giant green monster","powers":["Super Strength","Regeneration","Durability"]},{"id":1002,"name":"UpdateTest_332668ab_Updated","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":1003,"name":"Alexis Name 1","alterego":" Alexis Alterego 1","description":" Alexis Description 1","powers":["Armor","Flight"]},{"id":1004,"name":"Alexis Name 2","alterego":" Alexis Alterego 2","description":" Alexis Description 2","powers":["Armor","Flight"]},{"id":1005,"name":"Iron Man","alterego":"Tony Stark X","description":"Updated description","powers":["Armor","Flight"]},{"id":1006,"name":"Invincible","alterego":"Mark Grayson","description":"Viltrumite","powers":["String","Flight"]},{"id":1007,"name":"Captain America 1750435608323","alterego":"Steve Rogers","description":"Super soldier with enhanced strength and agility","powers":["Super Strength","Enhanced Agility","Vibranium Shield"]},{"id":1008,"name":"Hulk 1750435608927","alterego":"Bruce Banner","description":"Scientist with the ability to transform into a giant green monster","powers":["Super Strength","Regeneration","Durability"]},{"id":1009,"name":"Black Widow 1750435610401","alterego":"Natasha Romanoff","description":"Skilled spy and martial artist","powers":["Combat Expert","Espionage","Tactical Intelligence"]},{"id":1010,"name":"Iron Man 3243243243232423","alterego":"Tony Stark","description":"Updated description for testing","powers":["Armor","Flight"]},{"id":1011,"name":"Nuevo Personaje #9922","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1013,"name":"Anderson Morrillo DEV # 5abf852f-9ad6-41d1-b5ff-7c16a8a17b0a","alterego":"Worst Automatizator ever","description":"El Dev Humilde","powers":["JAVA","NET"]},{"id":1014,"name":"Iron Maan","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1016,"name":"Jose Obando 1750435623722","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1018,"name":"CAPULINA 1","alterego":"mz","description":"MZ","powers":["fury","EAT"]},{"id":1019,"name":"Iron Man xxxx","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1020,"name":"Prueba Pichincha691ae3a7-8628-4066-b2c1-4391ca34b68d2724","alterego":"Alt prueba","description":"Prueba des","powers":["Armor","Flight"]},{"id":1021,"name":"Iron Man Infernal Karate -519965a3-c172-4aaf-b396-8e3620e6403d","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1022,"name":"Prueba Pichinchabb5c576d-1a38-460b-9558-1d66cae834c74783","alterego":"Otro","description":"Otro","powers":["Armor"]},{"id":1023,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":1024,"name":"Iron Man","alterego":"Tony Stark","description":"Updated descriptionp2a8y4fr","powers":["Armor","Flight"]},{"id":1026,"name":"Iron Man 17630fe0-4d95-453d-a1b8-dfaf0c2ce600","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1027,"name":"kvViVETsCu","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1028,"name":"Iron Man 22ac5d96-b9d8-4e27-b6ce-47595f4437f7","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1029,"name":"Iron Man-9cbb33ef-c262-4f15-9fb1-4c8a009b20d2","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1030,"name":"Capitan America-998ff266-e951-4137-ba7c-800a42105de0","alterego":"Steve Rogers","description":"Super soldier","powers":["Shield"]},{"id":1031,"name":"Nuevo Personaje #8482","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1032,"name":"Iron Man Test 1750435660148","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1033,"name":"Black Panther 9e151d01-072b-43e2-9bc1-1d14213d301c","alterego":"T'Challa","description":"Rey de Wakanda","powers":["Fuerza","Tecnología"]},{"id":1034,"name":"Iron Man 1","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1035,"name":"Black Panther 7abc858a-d9f3-4fb2-812c-f17d8bead885","alterego":"T'Challa","description":"Actualizado desde Karate Pro","powers":["Fuerza","Tecnología"]},{"id":1036,"name":"Jose Obando 1750435669712","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1039,"name":"Iron Man Rafaelhuk5tg0w","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1040,"name":"Super Rein 0bf64ce1-df70-4ba5-bdfd-a711ef2f2a06","alterego":"Rein","description":"Genius billionaire Pro Tekken Player","powers":["Armor","Flight"]},{"id":1041,"name":"Jose Obando 1750435693501","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1043,"name":"Iron Man 0c98d5ab-b5d3-4f38-97df-13d34e82bcaa","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1044,"name":"Iron Man 1750435705600","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1045,"name":"Iron Man 1750435707067","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1047,"name":"Iron Man Rafaelfy5twhmo","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1050,"name":"Duplicate 1750435710748","alterego":"Alguien","description":"Descripción","powers":["Poder"]},{"id":1052,"name":"Iron Man 1750435714411","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":1054,"name":"Iron Man Test 1750435720321","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1055,"name":"Prueba Pichincha6b7a5d34-99cc-4829-9447-2f5977708b83689","alterego":"Alt prueba","description":"Prueba des","powers":["Armor","Flight"]},{"id":1056,"name":"Prueba Pichinchade71b3f1-7ce9-4c1b-8bde-8f31397be9d36628","alterego":"Otro","description":"Otro","powers":["Armor"]},{"id":1058,"name":"Hero_322f11d1","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1059,"name":"Iron Man_9d337d0a-262b-4fd9-9380-93b8596bd9e9","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1060,"name":"Super Hero Test 6920","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":1063,"name":"Chris Muyon","alterego":"updated alterego","description":"Updated description","powers":["Armor","Flight"]},{"id":1064,"name":"Iron Man-ade018d2-e3a3-4744-8187-9059a357d850","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1065,"name":"Capitan America-afe9e1d7-6849-47a0-999f-bd1577a4ffab","alterego":"Steve Rogers","description":"Super soldier","powers":["Shield"]},{"id":1066,"name":"Edulima 2","alterego":"Edu Lima","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1067,"name":"Chapulin colorado Test Karate","alterego":"Roberto Gomez","description":"Héroe ficticio mexicano","powers":["agilidad","sentido del humor","hacer reir"]},{"id":1068,"name":"Prueba Pichincha7d361762-d9c2-43d4-b9c9-b95aa746fa9b5445","alterego":"Alt prueba","description":"Prueba des","powers":["Armor","Flight"]},{"id":1069,"name":"Prueba Pichincha1f9c29a8-2d77-4572-91cf-ca4744a2875d6299","alterego":"Otro","description":"Otro","powers":["Armor"]},{"id":1070,"name":"Diego Iron Man 7253","alterego":"Tony Stark Diego Post","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1071,"name":"Iron Man dc8af850-c952-41fb-9322-ae009d4e74e0","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1072,"name":"DiegoCambiado3 Iron Man","alterego":"Tony Stark Diego","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1073,"name":"Spider Boby 4","alterego":"Boby","description":"Student","powers":["Armor","Flight"]},{"id":1074,"name":"I2_67c77687-9059-4f39-8d56-03b06a1609ef","alterego":"Steve Rogers","description":"Super soldier","powers":["Super Strength","Shield"]},{"id":1075,"name":"Captain America","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":1076,"name":"Iron Man","alterego":"Tony Stark X","description":"Updated description","powers":["Armor","Flight"]},{"id":1078,"name":"Hulk3","alterego":"Para Eliminar","description":"Para Eliminar","powers":["Armor","Flight"]},{"id":1079,"name":"Iron Man b591afb4-f9c8-4144-b65b-349a790804dc","alterego":"Tony Stark tst","description":"Genius billionaire tst4","powers":["Armor tst4","Flight tst4"]},{"id":1080,"name":"Hulk4","alterego":"Para Eliminar","description":"Para Eliminar","powers":["Armor","Flight"]},{"id":1081,"name":"Iron Man Infernal Karate -b4c462ad-84ae-4ca7-a640-9cea46e7b1ba","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1082,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":1084,"name":"Iron Man2222","alterego":"Tony Stark2","description":"Genius billionaire2","powers":["Armor","Flight"]},{"id":1086,"name":"Hulk5","alterego":"Para Eliminar","description":"Para Eliminar","powers":["Armor","Flight"]},{"id":1087,"name":"Iron Man Superior-9467-110913","alterego":"Tony Stark","description":"Genio, millonario, playboy, filántropo","powers":["Armadura","Inteligencia"]},{"id":1089,"name":"Super Rein 29a8d8be-5a94-43fc-9e9c-719bcfb4d00b","alterego":"Rein","description":"Genius billionaire Pro Tekken Player","powers":["Armor","Flight"]},{"id":1090,"name":"Castleman_2","alterego":"Super castle_2","description":"Genius Dev_2","powers":["dev_2","qa_2"]},{"id":1092,"name":"Iron Man 9d1e9be5-eef9-4207-a7e2-e96ea0921860","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1094,"name":"Hero_22bc49d9","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1095,"name":"Nombre-5e067d49-f7a2-474d-b273-e798742c16e0","alterego":"Bruce Wayne","description":"the Dark Knight","powers":["Money","Investment","Martial Arts"]},{"id":1097,"name":"Iron Man-e1b4ba5e-bfd8-4c1e-9b86-ed1933082bdd","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1098,"name":"Capitan America-2f7ca7fa-93d6-49e1-b0f0-2556a09e7b9e","alterego":"Steve Rogers","description":"Updated description","powers":["Shield","Leadership"]},{"id":1099,"name":"Jose Obando 1750435816482","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1101,"name":"Iron Man1233333","alterego":"Otro","description":"Otro","powers":["Armor"]},{"id":1104,"name":"Prueba Pichincha2efe7301-ce82-492e-ab9b-50a9fe0adcb36189","alterego":"Alt prueba","description":"Prueba des","powers":["Armor","Flight"]},{"id":1105,"name":"Prueba Pichincha04d9f706-f1c5-4705-885a-bf20263bef011287","alterego":"Otro","description":"Otro","powers":["Armor"]},{"id":1106,"name":"Super Rein 68b92e31-ea35-4577-9ff9-138673e31b22","alterego":"Rein","description":"Genius billionaire Pro Tekken Player","powers":["Armor","Flight"]},{"id":1107,"name":"Super Rein 70f9899c-80b8-49cc-83e7-e433dcb6ac0b","alterego":"Rein","description":"Genius billionaire Pro Tekken Player","powers":["Armor","Flight"]},{"id":1109,"name":"Iron Man two","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1110,"name":"3","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1111,"name":"Nuevo Personaje #9824","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1112,"name":"Jose Obando 1750435849382","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1114,"name":"Captain America d3cb53","alterego":"All jsi","description":"Superpower","powers":["Teletransportacion","Jugar futbol"]},{"id":1115,"name":"Nombre-2d21ad37-6f9c-4eb1-92bb-f38d4da61760","alterego":"Bruce Wayne","description":"the Dark Knight","powers":["Money","Investment","Martial Arts"]},{"id":1116,"name":"Nombre-a7f42db6-7550-42ce-8e56-d3f7d5946458","alterego":"Bruce Wayne","description":"the Dark Knight","powers":["Money","Investment","Martial Arts"]},{"id":1117,"name":"Nombre-15bec9d5-27af-47ab-b58f-ee54ccbd6084","alterego":"Bruce Wayne","description":"the Dark Knight","powers":["Money","Investment","Martial Arts"]},{"id":1118,"name":"Hombre araña","alterego":"Otro","description":"Otro","powers":["Armor"]},{"id":1119,"name":"Nuevo Personaje #2607","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1120,"name":"Iron Man Superior-2164-111009","alterego":"Tony Stark","description":"Genio, millonario, playboy, filántropo","powers":["Armadura","Inteligencia"]},{"id":1124,"name":"Iron Man 1 4re455","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1125,"name":"Jose Obando 1750435870292","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1127,"name":"Super Rein b4faa4b3-13d2-44b0-a8c5-5cdfb5449116","alterego":"Rein","description":"Genius billionaire Pro Tekken Player","powers":["Armor","Flight"]},{"id":1128,"name":"Super Rein 508c03ab-b31e-4298-81b0-2bfb01734627","alterego":"Rein","description":"Genius billionaire Pro Tekken Player","powers":["Armor","Flight"]},{"id":1129,"name":"IronMan-831a4736-592c-43cb-8523-4a3c24655cef","alterego":"Santiago Sanchez","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1131,"name":"Captain America 1750435884866","alterego":"Steve Rogers","description":"Super soldier with enhanced strength and agility","powers":["Super Strength","Enhanced Agility","Vibranium Shield"]},{"id":1132,"name":"Prueba Pichinchae2e03dc4-7a1d-4dcc-8d16-f950e6f122ab1502","alterego":"Alt prueba","description":"Prueba des","powers":["Armor","Flight"]},{"id":1133,"name":"Hulk 1750435885462","alterego":"Bruce Banner","description":"Scientist with the ability to transform into a giant green monster","powers":["Super Strength","Regeneration","Durability"]},{"id":1134,"name":"Black Widow 1750435886926","alterego":"Natasha Romanoff","description":"Skilled spy and martial artist","powers":["Combat Expert","Espionage","Tactical Intelligence"]},{"id":1135,"name":"Thor 1750435888605","alterego":"Thor Odinson","description":"God of Thunder from Asgard","powers":["Weather Control","Mjolnir","Superhuman Strength"]},{"id":1136,"name":"Captain America 1750435890278","alterego":"Steve Rogers","description":"Super soldier with enhanced strength and agility","powers":["Super Strength","Enhanced Agility","Vibranium Shield"]},{"id":1137,"name":"Iron Man Infernal Karate -d40d9b46-a7b7-48b5-ba1c-b03a42c016dc","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1138,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":1139,"name":"Jose Obando 1750435898657","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1140,"name":"Iron Man Rafaelviwn05if","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1141,"name":"Iron Man Rafael55dbqoov","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1142,"name":"Diego Iron Man 7911","alterego":"Tony Stark Diego Post","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1143,"name":"Captain America","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":1144,"name":"I2_ea6d33db-a484-4793-b428-9947eb7e213d","alterego":"Steve Rogers","description":"Super soldier","powers":["Super Strength","Shield"]},{"id":1146,"name":"Jose Obando 1750435911382","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1149,"name":"DiegoCambiado3 Iron Man","alterego":"Tony Stark Diego","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1150,"name":"FttvFklngc","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1151,"name":"Iron Man 1a01a65f-a13d-4bf6-9283-8297b09956d4","alterego":"Tony Stark tst","description":"Genius billionaire tst4","powers":["Armor tst4","Flight tst4"]},{"id":1152,"name":"Iron Man 9e9e7604-700b-46d8-8056-4fd338b4477d","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1154,"name":"Captain Marvel test8","alterego":"Carol Danvers","description":"the biggest hero in the world","powers":["Flight","Force"]},{"id":1155,"name":"Iron Man","alterego":"Tony Stark X","description":"Updated description","powers":["Armor","Flight"]},{"id":1156,"name":"Iron Man Test 1750435943066","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1158,"name":"Nombre-58b8d2d7-212b-41dc-bee2-e53c0374772a","alterego":"Bruce Wayne","description":"the Dark Knight","powers":["Money","Investment","Martial Arts"]},{"id":1159,"name":"BatMans 2026","alterego":"Bruce Wayne","description":"the Dark Knight in Gotham City","powers":["Money","Investment","Martial Arts","Detective Skills","Gadgets"]},{"id":1162,"name":"nGIosGQXqY","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1163,"name":"IronMan-8968bd7e-8585-47f6-9f2b-2c98ce1e4059","alterego":"Santiago Sanchez","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1164,"name":"Iron Man 7cfd0920-6978-4ca4-b184-d9376ba4559e","alterego":"Tony Stark tst","description":"Genius billionaire tst4","powers":["Armor tst4","Flight tst4"]},{"id":1167,"name":"Iron Witch be8d82","alterego":"All jsi","description":"Superpower","powers":["Teletransportacion","Jugar futbol"]},{"id":1168,"name":"Super Atom Eve","alterego":"Evelin","description":"Crea materia","powers":["Xray","Flight"]},{"id":1169,"name":"Castleman_3","alterego":"Super castle_3","description":"Genius Dev_3","powers":["dev_3","qa_3"]},{"id":1171,"name":"Capitán Marvel","alterego":"Carol Danvers","description":"Heroína cósmica actualizada","powers":["Vuelo","Energía","Superfuerza"]},{"id":1172,"name":"Iron Man-826600bd-964a-468f-8c53-1636f6bf010b","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1173,"name":"Capitan America-a0c1af29-ad1f-47a3-a885-7baf335e2d59","alterego":"Steve Rogers","description":"Super soldier","powers":["Shield"]},{"id":1174,"name":"Captain America 1750436007197","alterego":"Steve Rogers","description":"Super soldier with enhanced strength and agility","powers":["Super Strength","Enhanced Agility","Vibranium Shield"]},{"id":1175,"name":"Thor Strange f68f9e","alterego":"All jsi","description":"Superpower","powers":["Teletransportacion","Jugar futbol"]},{"id":1176,"name":"Hulk 1750436008045","alterego":"Bruce Banner","description":"Scientist with the ability to transform into a giant green monster","powers":["Super Strength","Regeneration","Durability"]},{"id":1177,"name":"Black Widow 1750436009546","alterego":"Natasha Romanoff","description":"Skilled spy and martial artist","powers":["Combat Expert","Espionage","Tactical Intelligence"]},{"id":1178,"name":"Thor 1750436011524","alterego":"Thor Odinson","description":"God of Thunder from Asgard","powers":["Weather Control","Mjolnir","Superhuman Strength"]},{"id":1179,"name":"Captain America 1750436013150","alterego":"Steve Rogers","description":"Super soldier with enhanced strength and agility","powers":["Super Strength","Enhanced Agility","Vibranium Shield"]},{"id":1180,"name":"IronMan-181c10c6-8875-4443-a41f-9d7d4dd0004c","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1181,"name":"Super Rein 6128655f-cd52-496c-9c1d-ea3f6f4d1745","alterego":"Rein","description":"Genius billionaire Pro Tekken Player","powers":["Armor","Flight"]},{"id":1182,"name":"Jose Obando 1750436035150","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1183,"name":"Iron Man 2234","alterego":"Tony Stark 2234","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1184,"name":"Iron Man f6f810c8-e6e5-4743-8f21-6507cb253737","alterego":"Tony Stark tst","description":"Genius billionaire tst4","powers":["Armor tst4","Flight tst4"]},{"id":1185,"name":"error500","alterego":"Tony Stark 2234","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1187,"name":"Iron Man1111","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1188,"name":"Iron Man Infernal Karate -f79eefe3-8864-40ad-a45d-ffa9e7e19fc5","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1189,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":1191,"name":"Jose Obando 1750436049611","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1194,"name":"Iron Man Test 1750436056434","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1196,"name":"Castleman_4","alterego":"Super castle_4","description":"Genius Dev_4","powers":["dev_4","qa_4"]},{"id":1198,"name":"Jose Obando 1750436064363","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1200,"name":"Iron Man test - aandino","alterego":"Tony Stark aandino","description":"Genius billionaire - aandino","powers":["Armor","Flight","unity","c#"]},{"id":1202,"name":"Silvana Bentacourt v1-1750436070985","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1203,"name":"CAPULINA _1","alterego":"mz","description":"MZ","powers":["fury","EAT"]},{"id":1206,"name":"Nombre-82ea5e18-1f10-4512-bba7-1f5d8300507f","alterego":"Bruce Wayne","description":"the Dark Knight","powers":["Money","Investment","Martial Arts"]},{"id":1207,"name":"BatMans 2026","alterego":"Bruce Wayne","description":"the Dark Knight in Gotham City","powers":["Money","Investment","Martial Arts","Detective Skills","Gadgets"]},{"id":1209,"name":"IronMan-5e255b9f-b537-42a1-a567-7121fa8e9b2b","alterego":"Santiago Sanchez","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1211,"name":"Heroe BP","alterego":"Developer","description":"Genio developer","powers":["Testing","Coding"]},{"id":1213,"name":"Jose Obando 1750436097345","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1214,"name":"Hero_edd03de4","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1216,"name":"Iron Man Rafaelv7wlxq55","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1217,"name":"Nuevo Personaje #1647","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1219,"name":"Jose Obando 1750436108636","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1220,"name":"Henry Moreno","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1221,"name":"Hulk 11750435885462","alterego":"Bruce Banner","description":"Scientist with the ability to transform into a giant green monster","powers":["Super Strength","Regeneration","Durability"]},{"id":1222,"name":"Doctor Strange 4421b8","alterego":"All jsi","description":"Superpower","powers":["Teletransportacion","Jugar futbol"]},{"id":1224,"name":"CohetePlus10","alterego":"Cohete Plus","description":"Cohetito Plus","powers":["Armors","Flight"]},{"id":1225,"name":"Deadpool jusimban312","alterego":"Wade Winston Wilson","description":"Mercenario, supervillano​​ y antihéroe","powers":["Immortality","Regeneration","Superhuman strength"]},{"id":1227,"name":"I2_35899795-4f6d-4b57-98e0-f0efca8f8a20","alterego":"Steve Rogers","description":"Super soldier","powers":["Super Strength","Shield"]},{"id":1228,"name":"Marvel Gold Goblin","alterego":"Boby Osborn","description":"Student","powers":["Armor","Speed"]},{"id":1229,"name":"Iron Man Rafaelq108vy9u","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1232,"name":"Thor Hero d5ab3a","alterego":"All jsi","description":"Superpower","powers":["Teletransportacion","Jugar futbol"]},{"id":1233,"name":"Iron Man Rafaelnwjg9787","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1234,"name":"Super Hero Test 6061","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":1236,"name":"Super Hero Test 3459","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":1237,"name":"jhazapat","alterego":"Jhonny Zapata","description":"Genius informatician and hacker","powers":["Hacking","Programming","Cybersecurity"]},{"id":1239,"name":"Iron Man four","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1240,"name":"CAPULINA _2","alterego":"mz","description":"MZ","powers":["fury","EAT"]},{"id":1241,"name":"Edulima 3","alterego":"Edu Lima","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1242,"name":"Jose Obando 1750436179254","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1243,"name":"Spider-Man 336","alterego":"Peter Parker","description":"El amigable vecino Spider-Man","powers":["Sentido arácnido","Trepar paredes","Lanzar telarañas"]},{"id":1245,"name":"Iron Man Rafael3mmjn0c2","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1246,"name":"I2_1e999e6f-910d-406d-8117-566ee130cd80","alterego":"Steve Rogers","description":"Super soldier","powers":["Super Strength","Shield"]},{"id":1248,"name":"Dario Jimenez","alterego":"Fresco","description":"Genius billionaire","powers":["Super Strength","Flight"]},{"id":1250,"name":"Nuevo Personaje #7602","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1253,"name":"Iron Man 22345","alterego":"Tony Stark 22345","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1255,"name":"Iron Man Rafaelzcc0bgm3","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1257,"name":"El pepes","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1260,"name":"Test User 555bd231-8482-441f-b0d8-cd5271b2a461","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1262,"name":"Character-5b78817d","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1264,"name":"Character-1b14c2c9","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1266,"name":"Iron Maiden 5","alterego":"Tony Mayor","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1267,"name":"Character-986b2129","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1268,"name":"Iron Man-9ee08370-fada-4dff-98f3-62374a39d806","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1269,"name":"Freddy Tacuri","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1270,"name":"chilindrina","alterego":"mz","description":"MZ","powers":["fury","EAT"]},{"id":1271,"name":"Iron Man-94e992b9-d4e1-43f6-9291-b3cf8ca1f954","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1272,"name":"Capitan America-198ffc37-5aaf-4c8f-989e-9c11a0104c1c","alterego":"Steve Rogers","description":"Updated description","powers":["Shield","Leadership"]},{"id":1273,"name":"Iron Man","alterego":"Tony Stark X","description":"Updated description","powers":["Armor","Flight"]},{"id":1275,"name":"Character-2ae7316f","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":1276,"name":"Error","alterego":"Error","description":"Error","powers":["Error"]},{"id":1278,"name":"Jose Obando 1750436255862","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1279,"name":"Nuevo Personaje #1365","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1281,"name":"Black Panther 0bba45bc-fb53-45aa-b275-c44a0ded2b70","alterego":"T'Challa","description":"Rey de Wakanda","powers":["Fuerza","Tecnología"]},{"id":1282,"name":"Chleona3","alterego":"Leons","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1283,"name":"Black Panther d6be0872-7e26-4373-b303-e3cec93ffb70","alterego":"T'Challa","description":"Actualizado desde Karate Pro","powers":["Fuerza","Tecnología"]},{"id":1284,"name":"Iron Man 4b400a30-fc3e-4db4-b3ba-973fd2d278ce","alterego":"Tony Stark tst","description":"Genius billionaire tst4","powers":["Armor tst4","Flight tst4"]},{"id":1287,"name":"qnNAZGzSWh","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1288,"name":"#(name)","alterego":"#(alterego)","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1289,"name":"nameRandom","alterego":"anamcias","description":"Developer","powers":["Angular","Karate"]},{"id":1290,"name":"Chleona4","alterego":"Leons","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1291,"name":"Spider-Manew","alterego":"Peter Parker","description":"Superhéroe arácnido de Marvel","powers":["Agilidad","Sentido arácnido","Trepar muros"]},{"id":1292,"name":"Anderson Morrillo DEV # 60c81113-e829-4172-941d-964a3eb233a0","alterego":"Worst Automatizator ever","description":"El Dev Humilde","powers":["JAVA","NET"]},{"id":1295,"name":"Captain America 1750436297497","alterego":"Steve Rogers","description":"Super soldier with enhanced strength and agility","powers":["Super Strength","Enhanced Agility","Vibranium Shield"]},{"id":1296,"name":"Hulk 1750436298248","alterego":"Bruce Banner","description":"Scientist with the ability to transform into a giant green monster","powers":["Super Strength","Regeneration","Durability"]},{"id":1298,"name":"Black Widow 1750436299811","alterego":"Natasha Romanoff","description":"Skilled spy and martial artist","powers":["Combat Expert","Espionage","Tactical Intelligence"]},{"id":1299,"name":"Thor 1750436301519","alterego":"Thor Odinson","description":"God of Thunder from Asgard","powers":["Weather Control","Mjolnir","Superhuman Strength"]},{"id":1300,"name":"Captain America 1750436303220","alterego":"Steve Rogers","description":"Super soldier with enhanced strength and agility","powers":["Super Strength","Enhanced Agility","Vibranium Shield"]},{"id":1302,"name":"Prueba Pichinchaa2d854e2-e4f9-4f94-885b-efcb7b4c4eac5836","alterego":"Alt prueba","description":"Prueba des","powers":["Armor","Flight"]},{"id":1303,"name":"Iron Man8888","alterego":"Otro","description":"Otro","powers":["Armor"]},{"id":1305,"name":"Iron Man-7104bc90-f6be-4118-9e0a-88bde90adfd3","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1306,"name":"Iron Man-b92a87a2-76a0-47f3-b85b-101c152fb5b9","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1307,"name":"Capitan America-5c2be5bb-ce14-4672-9b22-d460bfb7bf2d","alterego":"Steve Rogers","description":"Updated description","powers":["Shield","Leadership"]},{"id":1308,"name":"Iron Man five","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1309,"name":"IronMan-760ef4ff-ff4d-4fad-be51-fa741ef28c42","alterego":"Santiago Sanchez","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1310,"name":"Jose Obando 1750436332592","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1311,"name":"Iron Man_12d0076b-8547-4da8-a12a-027440918f23","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1312,"name":"wVDNiCqyfr","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1315,"name":"Diego Iron Man 8347","alterego":"Tony Stark Diego Post","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1316,"name":"Iron Man88888","alterego":"Otro","description":"Otro","powers":["Armor"]},{"id":1321,"name":"Nuevo Personaje #4192","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1322,"name":"Prueba Pichincha55d72aa8-ce43-4aab-8342-0c1a777269a79919","alterego":"Alt prueba","description":"Prueba des","powers":["Armor","Flight"]},{"id":1324,"name":"Iron Man Cambiado por DiegoF","alterego":"Tony Stark Diego","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1325,"name":"Iron Man888888","alterego":"Otro","description":"Otro","powers":["Armor"]},{"id":1326,"name":"IronMan-30014040-40b3-4357-8131-835a25cacb43","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1327,"name":"globalName","alterego":"Otro","description":"Otro","powers":["Armor"]},{"id":1330,"name":"Iron Man eca5a6be-6275-4ae7-8966-e1e9517c5c36","alterego":"Tony Stark tst","description":"Genius billionaire tst4","powers":["Armor tst4","Flight tst4"]},{"id":1332,"name":"Super Hero Test 4977","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":1333,"name":"Super Hero Test 5990","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":1335,"name":"Super Hero Test 8050","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":1336,"name":"Jose Obando 1750436371589","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1338,"name":"Diego Iron Man 5950","alterego":"Tony Stark Diego Post","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1339,"name":"Iron Man c115eed6-9993-48c1-8bc7-85c85a8f10d7","alterego":"Tony Stark tst","description":"Genius billionaire tst4","powers":["Armor tst4","Flight tst4"]},{"id":1341,"name":"Character_1750436400790","alterego":"Jhonny Zapata","description":"Genius informatician and hacker","powers":["Hacking","Programming","Cybersecurity"]},{"id":1343,"name":"Diego Iron Man 312","alterego":"Tony Stark Diego Put","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1344,"name":"Nombre-40980860-67f2-4164-856b-886eb56c23af","alterego":"Bruce Wayne","description":"the Dark Knight","powers":["Money","Investment","Martial Arts"]},{"id":1345,"name":"BatMans 2026","alterego":"Bruce Wayne","description":"the Dark Knight in Gotham City","powers":["Money","Investment","Martial Arts","Detective Skills","Gadgets"]},{"id":1348,"name":"Iron Man_e06abffa-f93b-4ad0-899d-75eb870ee4dc","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1352,"name":"Super Hero Test 6910","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":1353,"name":"Super Hero Test 8267","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":1355,"name":"Super Hero Test 4230","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":1356,"name":"Nombre-f6b66165-4cfa-4692-818c-55b8011433e4","alterego":"Bruce Wayne","description":"the Dark Knight","powers":["Money","Investment","Martial Arts"]},{"id":1357,"name":"Iron Man_f2decac0-b687-444c-916d-4f1ca470c3c1","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1359,"name":"BatMans 2026","alterego":"Bruce Wayne","description":"the Dark Knight in Gotham City","powers":["Money","Investment","Martial Arts","Detective Skills","Gadgets"]},{"id":1361,"name":"Alexis Name 11 Updated","alterego":"Alexis Alterego 1 Updated","description":"Alexis Description 1 Updated","powers":["Armor","Flight"]},{"id":1362,"name":"Deadpool jusimban313","alterego":"Wade Winston Wilson","description":"Mercenario, supervillano​​ y antihéroe","powers":["Immortality","Regeneration","Superhuman strength"]},{"id":1363,"name":"Diego Iron Man 5988","alterego":"Tony Stark Diego Post","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1365,"name":"Alexis Name 21 Updated","alterego":"Alexis Alterego 2 Updated","description":"Alexis Description 2 Updated","powers":["Armor","Flight"]},{"id":1366,"name":"PnxfrAUkzU","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1367,"name":"Iron Man344","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1368,"name":"Iron Man Cambiado por DiegoF","alterego":"Tony Stark Diego Put","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1369,"name":"Nuevo Personaje #1053","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1371,"name":"Alexis Name 31 Updated","alterego":"Alexis Alterego 3 Updated","description":"Alexis Description 3 Updated","powers":["Armor","Flight"]},{"id":1372,"name":"Iron Man-4e12bd59-907b-459d-b1de-576154477fbc","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1373,"name":"Capitan America-57112e67-65b8-47bd-b531-442462a8110a","alterego":"Steve Rogers","description":"Updated description","powers":["Shield","Leadership"]},{"id":1375,"name":"ERROR_TRIGGER","alterego":"Peter Parker","description":"Superhéroe arácnido de Marvel","powers":["Agilidad","Sentido arácnido","Trepar muros"]},{"id":1376,"name":"Iron Man","alterego":"Tony Stark X","description":"Updated description","powers":["Armor","Flight"]},{"id":1377,"name":"Matrix","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1380,"name":"JC Castle","alterego":"Super Dev","description":"Super Backend developer Updated","powers":["Java","WebFlux","Spring Boot","Kotlin","PostgreSQL","Redis","Docker","Kubernetes"]},{"id":1381,"name":"Iron Man Infernal Karate -cba5f334-5d4f-499f-a6ad-02c1d96d672e","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1382,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":1385,"name":"ObiWa Man","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1387,"name":"Captain America 1750436514108","alterego":"Steve Rogers","description":"Super soldier with enhanced strength and agility","powers":["Super Strength","Enhanced Agility","Vibranium Shield"]},{"id":1388,"name":"Hulk 1750436514838","alterego":"Bruce Banner","description":"Scientist with the ability to transform into a giant green monster","powers":["Super Strength","Regeneration","Durability"]},{"id":1389,"name":"Stan Ford","alterego":"Uncle Stan","description":"Genius","powers":["Super Intelligence","Flight"]},{"id":1390,"name":"Iron Man","alterego":"Tony Stark X","description":"Updated description","powers":["Armor","Flight"]},{"id":1391,"name":"Black Widow 1750436520351","alterego":"Natasha Romanoff","description":"Skilled spy and martial artist","powers":["Combat Expert","Espionage","Tactical Intelligence"]},{"id":1393,"name":"Jose Obando 1750436525942","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1395,"name":"Thor 1750436526065","alterego":"Thor Odinson","description":"God of Thunder from Asgard","powers":["Weather Control","Mjolnir","Superhuman Strength"]},{"id":1398,"name":"Captain America 1750436531778","alterego":"Steve Rogers","description":"Super soldier with enhanced strength and agility","powers":["Super Strength","Enhanced Agility","Vibranium Shield"]},{"id":1399,"name":"jzapata_1750436535878","alterego":"Jhonny Zapata","description":"Genius informatician and hacker","powers":["Hacking","Programming","Cybersecurity"]},{"id":1401,"name":"Iron Man Rafaeli1w7qfjj","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1402,"name":"Hero_bb402c38","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1403,"name":"Silvana Bentacourt v1-1750436537854","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1404,"name":"Iron Man Test 1750436544363","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1405,"name":"Iron Man Test 1750436570336","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1406,"name":"Jose Obando 1750436571114","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1407,"name":"Alexis Name 11","alterego":" Alexis Alterego 1","description":" Alexis Description 1","powers":["Armor","Flight"]},{"id":1408,"name":"Alexis Name 21","alterego":" Alexis Alterego 2","description":" Alexis Description 2","powers":["Armor","Flight"]},{"id":1409,"name":"IronMan-50612d54-d3c7-4f9b-9e8f-2fb7090411ca","alterego":"Santiago Sanchez","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1410,"name":"Alexis Name 31","alterego":" Alexis Alterego 3","description":" Alexis Description 3","powers":["Armor","Flight"]},{"id":1412,"name":"Silvana Bentacourt v1-1750436571015","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1413,"name":"Nombre de prueba","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1414,"name":"Iron Man c191645a-3218-492c-985b-c855bdaf51e6","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1415,"name":"Iron Man ab618b58-a6df-4000-8efd-22e96eee2c64","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1416,"name":"Iron Man ca6d24b1-962b-4073-932c-41bed9888ac1","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1417,"name":"Iron Man c86756c9-9579-4b51-b1c9-f77f4deec97c","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1418,"name":"Iron Man 0f0fe82d-0cab-4294-b622-545485a24e00","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1419,"name":"Iron Man 26703c82-0639-4505-bb7f-1adfcd9e4b3e","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1420,"name":"Iron Man ff7c111c-e27d-4c1f-b58f-747922a852c6","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1421,"name":"Iron Man 98f2a55a-6ee2-4671-8c02-972007d477ce","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1423,"name":"Iron Man bf85a8c5-892c-46ef-ab88-0b263ffbf6b8","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1424,"name":"Iron Man Rafael3pr28qao","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1426,"name":"Iron Man-dd70ea9b-ef66-4af6-834e-c4c2d59023a7","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1427,"name":"Iron Man Test 1750436590806","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1428,"name":"Capitan America-3fa92d1d-d2eb-4507-bf27-2afbe692a796","alterego":"Steve Rogers","description":"Updated description","powers":["Shield","Leadership"]},{"id":1430,"name":"Iron Man Rafael4323ez36","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1432,"name":"jzapata_1750436624387","alterego":"Jhonny Zapata","description":"Genius informatician and hacker","powers":["Hacking","Programming","Cybersecurity"]},{"id":1433,"name":"Iron Man","alterego":"Tony Stark X","description":"Updated description","powers":["Armor","Flight"]},{"id":1434,"name":"I2_815eb3d0-3574-40ea-a2c1-3d32c2f0fb0f","alterego":"Steve Rogers","description":"Super soldier","powers":["Super Strength","Shield"]},{"id":1437,"name":"Iron Maiden 4","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1438,"name":"Iron Man 1c153f5f-ee7c-48e0-b695-f22fb9f1c0c1","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1439,"name":"Iron Man d6b0d798-2d3e-4ba1-9604-419697388e2b","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1440,"name":"Super Hero Test 8826","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":1441,"name":"Iron Man 3d87490a-e78f-48d9-862c-63ce107bfde1","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1442,"name":"Iron Man 77be1415-e0e0-42a1-8c45-f31ce2131522","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1443,"name":"Iron Man bff6411b-a0c9-4783-8281-c0f13372f923","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1445,"name":"Iron Man 224dc2a2-9802-4203-a07f-5e14e1132d22","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1446,"name":"Iron Man b7d12b9e-87a8-4ded-a326-e7c364a9b45c","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1447,"name":"Iron Man e759307c-7a7e-4a64-a33f-1513d518aefc","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1448,"name":"Iron Man c01be999-e57c-4d5c-ad6d-23e00a8b23ae","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1449,"name":"Super Hero Test 8764","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":1450,"name":"Iron Man Rafael21rl5dc6","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1451,"name":"Jose Obando 1750436656812","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1453,"name":"Gabo R","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1454,"name":"Iron Man","alterego":"Tony Stark X","description":"Updated description","powers":["Armor","Flight"]},{"id":1455,"name":"jzapata_1750436674171","alterego":"Jhonny Zapata","description":"Genius informatician and hacker","powers":["Hacking","Programming","Cybersecurity"]},{"id":1457,"name":"Iron Man Rafaelnaqn1s1k","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1458,"name":"Nuevo Personaje #4920","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1460,"name":"Spider-Man yyyy","alterego":"Peter Parker","description":"Superhéroe arácnido de Marvel","powers":["Agilidad","Sentido arácnido","Trepar muros"]},{"id":1462,"name":"Sonic-8a9d55ac-7a2d-41f0-97ea-2f5a6a03444a","alterego":"Super sonico","description":"Erizo azul con super velocidad","powers":["velocidad","agilidad","resistencia"]},{"id":1463,"name":"Blue Ranger","alterego":"Billy","description":"Blue Power Ranger","powers":["Intelligence","Technology"]},{"id":1464,"name":"Iron Man Rafaelqfbg6ugx","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1465,"name":"Spider-Man-Dev","alterego":"Peter Parker","description":"Superhéroe arácnido de Marvel","powers":["Agilidad","Sentido arácnido","Trepar muros"]},{"id":1466,"name":"Iron Man Infernal Karate -1f279f80-367d-4966-97bf-8e7f397738df","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1467,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":1468,"name":"mario almeida","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1470,"name":"Travis Scott","alterego":"Cactus Jack","description":"Genius","powers":["Super Intelligence"]},{"id":1471,"name":"IronMan-666081ee-7add-467b-ac2e-b7c6b39c01e9","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1472,"name":"#(nameData)","alterego":"Otro","description":"Otro","powers":["Armor"]},{"id":1473,"name":"Sonic-27be9aa0-0728-4125-a5bc-587168de6748","alterego":"Super sonico","description":"Erizo azul con super velocidad","powers":["velocidad","agilidad","resistencia"]},{"id":1474,"name":"Super Girl - TM","alterego":"Tony Clack Kent","description":"Strong woman","powers":["Armor","Flight"]},{"id":1475,"name":"dCeXACNjkn","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1477,"name":"Super Hero Test 1729","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":1478,"name":"Super Hero Test 9898","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":1482,"name":"Super Hero Test 1751","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":1484,"name":"Iron Man Test 1750436736433","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1485,"name":"Iron Man","alterego":"Tony Stark X","description":"Updated description","powers":["Armor","Flight"]},{"id":1486,"name":"Iron Man Test 1750436743691","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1487,"name":"Sonic-53f432ff-811b-470e-9182-2d6955dcebfe","alterego":"Super sonico","description":"Erizo azul con super velocidad","powers":["velocidad","agilidad","resistencia"]},{"id":1488,"name":"Iron Maiden 6","alterego":"Tony Mayor","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1489,"name":"jzapata_1750436752963","alterego":"Jhonny Zapata","description":"Genius informatician and hacker","powers":["Hacking","Programming","Cybersecurity"]},{"id":1491,"name":"Franklin Gomez Cabrera","alterego":"Foundation","description":"Genius Power Single","powers":["Dev","soft-skills","Frontend"]},{"id":1492,"name":"Iron Man1","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1493,"name":"Freddy Tacuri1","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1494,"name":"Kramerx1","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1495,"name":"Sonic-c2602c70-eaf4-479b-a2de-88d7222afe31","alterego":"Super sonico","description":"Erizo azul con super velocidad","powers":["velocidad","agilidad","resistencia"]},{"id":1496,"name":"Iron Man","alterego":"Tony Stark X","description":"Updated description","powers":["Armor","Flight"]},{"id":1497,"name":"Iron Man-1957303c-fab2-463b-a2c9-9657fa36310a","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1499,"name":"Capitan America-dacb902f-b9a6-48fd-baca-8e9eec80c213","alterego":"Steve Rogers","description":"Updated description","powers":["Shield","Leadership","Dev"]},{"id":1502,"name":"Sonic-e0f9a38e-797c-4f5c-8755-9f8b2dc42da9","alterego":"Super sonico","description":"Erizo azul con super velocidad","powers":["velocidad","agilidad","resistencia"]},{"id":1503,"name":"Freddy Tacuri12","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1504,"name":"Jose Obando 1750436811930","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1505,"name":"Super Hero Test 9825","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":1506,"name":"Super Hero Test 6353","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":1508,"name":"Super Hero Test 3849","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":1509,"name":"Nuevo Personaje #7508","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1511,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":1513,"name":"I2_ccff54e6-4f73-4f79-814f-5db7ddb11bc7","alterego":"Steve Rogers","description":"Super soldier","powers":["Super Strength","Shield"]},{"id":1514,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":1516,"name":"Capitana Marvel","alterego":"Tony Starker","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1519,"name":"Black panter","alterego":"T Challa","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1520,"name":"Hero-64799","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1521,"name":"Jose Obando 1750436867264","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1523,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":1524,"name":"Hero-55585","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1525,"name":"Character-857a7bda","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1526,"name":"Character-87ecf99c","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1527,"name":"Iron Man-1bcbf309-a820-45b8-b05f-a4c9fc1d9773","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1528,"name":"Capitan America-4d9de111-9326-46f1-abe0-1c1d8afb5c26","alterego":"Steve Rogers","description":"Updated description","powers":["Shield","Leadership","Dev"]},{"id":1530,"name":"Iron Man Rafaelcvf18oip","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1531,"name":"Character-d55a91a5","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1535,"name":"Character-a4d46160","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":1536,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":1538,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":1539,"name":"Kramerx2","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1540,"name":"CohetePlus20","alterego":"Cohete Plus","description":"Cohetito Plus","powers":["Armors","Flight"]},{"id":1541,"name":"Jose Obando 1750436903090","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1542,"name":"Jacqui3","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1543,"name":"Super Hero Test 3737","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":1544,"name":"Super Hero Test 451","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":1546,"name":"Super Hero Test 5099","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":1547,"name":"Alexis Name 111","alterego":" Alexis Alterego 1","description":" Alexis Description 1","powers":["Armor","Flight"]},{"id":1548,"name":"Alexis Name 211","alterego":" Alexis Alterego 2","description":" Alexis Description 2","powers":["Armor","Flight"]},{"id":1549,"name":"Alexis Name 311","alterego":" Alexis Alterego 3","description":" Alexis Description 3","powers":["Armor","Flight"]},{"id":1551,"name":"Gabo R ","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1553,"name":"Diego Iron Man 3390","alterego":"Tony Stark Diego Post","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1555,"name":"Iron Man six","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1556,"name":"Iron Man Cambiado por DiegoF","alterego":"Tony Stark Diego Put","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1558,"name":"Spider-Man-aa808c6c-874a-4f40-a274-66dff08e3ffe","alterego":"Peter Parker","description":"Friendly neighborhood Spider-Man","powers":["Wall-crawling","Spider-sense"]},{"id":1559,"name":"Edulima 4","alterego":"Edu Lima","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1561,"name":"Iron Man - e6da2216","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1563,"name":"Marvel Green Goblin","alterego":"Boby","description":"Student","powers":["Armor","Flight"]},{"id":1564,"name":"Spider-Man 208","alterego":"Peter Parker","description":"El amigable vecino Spider-Man","powers":["Sentido arácnido","Trepar paredes","Lanzar telarañas"]},{"id":1565,"name":"Franz Hermans","alterego":"Max Verstappen","description":"F1 driver","powers":["Armor","Flight"]},{"id":1566,"name":"Nuevo Personaje #8214","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1568,"name":"Captain America 1750436981625","alterego":"Steve Rogers","description":"Super soldier with enhanced strength and agility","powers":["Super Strength","Enhanced Agility","Vibranium Shield"]},{"id":1569,"name":"Iron Man #8962","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1570,"name":"Hulk 1750436982428","alterego":"Bruce Banner","description":"Scientist with the ability to transform into a giant green monster","powers":["Super Strength","Regeneration","Durability"]},{"id":1571,"name":"Spider-Man #3772","alterego":"Peter Parker","description":"Friendly neighborhood","powers":["Agility","Spider Sense"]},{"id":1572,"name":"Captain Marvel #1636","alterego":"Carol Danvers","description":"Cosmic powers","powers":["Energy Blasts","Flight"]},{"id":1573,"name":"Jose Obando 1750436986733","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1574,"name":"Black Widow 1750436983895","alterego":"Natasha Romanoff","description":"Skilled spy and martial artist","powers":["Combat Expert","Espionage","Tactical Intelligence"]},{"id":1575,"name":"UpdateTest_fd6c4aa5_Updated","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":1576,"name":"Hero_362e2238","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1577,"name":"Captain America 1750436987323","alterego":"Steve Rogers","description":"Super soldier with enhanced strength and agility","powers":["Super Strength","Enhanced Agility","Vibranium Shield"]},{"id":1578,"name":"Iron Man - 501d18ba","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1579,"name":"rMtqpneQmC","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1581,"name":"I2_b6ca27b5-1c38-438d-a9b1-5a6ab9d6f292","alterego":"Steve Rogers","description":"Super soldier","powers":["Super Strength","Shield"]},{"id":1583,"name":"Nuevo Personaje #6815","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1585,"name":"Iron Man #7781","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1586,"name":"Spider-Man #5722","alterego":"Peter Parker","description":"Friendly neighborhood","powers":["Agility","Spider Sense"]},{"id":1587,"name":"Captain Marvel #6581","alterego":"Carol Danvers","description":"Cosmic powers","powers":["Energy Blasts","Flight"]},{"id":1589,"name":"Iron Man Rafaeluadk4kep","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1592,"name":"Nova","alterego":"Richard Rider","description":"Miembro del Nova Corps","powers":["Vuelo","Superfuerza","Energía"]},{"id":1593,"name":"Spider-Man","alterego":"Peter Parker","description":"Otro intento duplicado","powers":["Agilidad"]},{"id":1594,"name":"Iron Man Rafaelppn7jhc2","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1596,"name":"Super Rein 1e2ffb83-9c33-4e39-8311-66e09e56ab11","alterego":"Rein","description":"Genius billionaire Pro Tekken Player","powers":["Armor","Flight"]},{"id":1597,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":1599,"name":"Captain Marvel test12","alterego":"Carol Danvers","description":"the biggest hero in the world","powers":["Flight","Force"]},{"id":1600,"name":"Jose Obando 1750437038770","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1601,"name":"Super Hero Test 153","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":1602,"name":"Super Hero Test 2196","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":1604,"name":"Iron Man Infernal Karate -44ec2ea2-9d89-4a47-bca8-d5976c1d316c","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1605,"name":"Super Hero Test 407","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":1606,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":1608,"name":"Character-1815","alterego":"Alter-9045","description":"Description-4623","powers":["Power-3284"]},{"id":1609,"name":"Sonic-2f9def7b-78e0-4ff2-a3fa-0b403a918403","alterego":"Super sonico","description":"Erizo azul con super velocidad","powers":["velocidad","agilidad","resistencia"]},{"id":1611,"name":"Jose Obando 1750437074994","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1612,"name":"Nuevo Personaje #3638","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1614,"name":"Blue Beetle #6883","alterego":"Jaime Reyes","description":"Teen fused with alien tech","powers":["Scarab Armor","Energy Blasts"]},{"id":1615,"name":"Spider-Man #2326","alterego":"Peter Parker","description":"Friendly neighborhood","powers":["Agility","Spider Sense"]},{"id":1616,"name":"Captain Marvel #1923","alterego":"Carol Danvers","description":"Cosmic powers","powers":["Energy Blasts","Flight"]},{"id":1617,"name":"Edulima 5","alterego":"Edu Lima","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1618,"name":"Data1 Data2","alterego":"Cactus Jack","description":"Genius","powers":["Super Intelligence"]},{"id":1619,"name":"Vision America 5f9b41","alterego":"All jsi","description":"Superpower","powers":["Teletransportacion","Jugar futbol"]},{"id":1620,"name":"Iron Man Test 1750437089396","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1621,"name":"Jose Obando 1750437094507","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1622,"name":"Iron Man seven","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1623,"name":"IronMan-c144768d-4653-49ce-ab8b-834a9dc8f678","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1624,"name":"IronMan-25742a1a-661a-465e-8ad2-bf859922bd1a","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1625,"name":"AEflKVdyGB","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1626,"name":"ASD","alterego":"Peter Parker","description":"Superhéroe arácnido de Marvel","powers":["Agilidad","Sentido arácnido","Trepar muros"]},{"id":1627,"name":"IronMan-59782c49-091c-40a1-a804-0339790bba4c","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1628,"name":"Diego Iron Man 9682","alterego":"Tony Stark Diego Post","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1629,"name":"IronMan-6b324968-2f8f-4962-9509-4e98fafe8c76","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1630,"name":"IronMan-7f4d3b62-6c8d-4193-8fe3-15a0c8bce849","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1631,"name":"IronMan-8590621c-a897-4542-8520-eee5c179b8bd","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1633,"name":"IronMan-b8ed93fb-b0b9-4e9f-836c-fbf5b6a25db0","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1634,"name":"IronMan-02db8c77-56fb-41af-bd20-fc30a603219c","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1635,"name":"IronMan-3d104fb0-f0f6-4743-b362-4b3b17563f59","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1636,"name":"IronMan-684b8a48-c821-4ef1-b51c-6fb941180e0b","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1637,"name":"Iron Man 7c85852a-3566-452f-9e18-fdefe61553ab","alterego":"Tony Stark tst","description":"Genius billionaire tst4","powers":["Armor tst4","Flight tst4"]},{"id":1638,"name":"IronMan-14b6b4b2-a59d-4c8c-b103-668fbc96d101","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1639,"name":"Iron Man Cambiado por DiegoF","alterego":"Tony Stark Diego Put","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1640,"name":"IronMan-c58e5a51-fe43-48ce-b910-d4b3382342ac","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1642,"name":"Iron Man3443","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1643,"name":"Iron Man 393e3499-60e2-4850-9dc1-9a24dad04ab3","alterego":"Tony Stark tst","description":"Genius billionaire tst4","powers":["Armor tst4","Flight tst4"]},{"id":1645,"name":"Iron Man - 925e4cbb","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1646,"name":"Nuevo Personaje #1638","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1648,"name":"Blue Beetle #3529","alterego":"Jaime Reyes","description":"Teen fused with alien tech","powers":["Scarab Armor","Energy Blasts"]},{"id":1649,"name":"Spider-Man #8433","alterego":"Peter Parker","description":"Friendly neighborhood","powers":["Agility","Spider Sense"]},{"id":1650,"name":"Captain Marvel #2046","alterego":"Carol Danvers","description":"Cosmic powers","powers":["Energy Blasts","Flight"]},{"id":1651,"name":"Captain America 1750437122271","alterego":"Steve Rogers","description":"Super soldier with enhanced strength and agility","powers":["Super Strength","Enhanced Agility","Vibranium Shield"]},{"id":1652,"name":"Hulk 1750437122940","alterego":"Bruce Banner","description":"Scientist with the ability to transform into a giant green monster","powers":["Super Strength","Regeneration","Durability"]},{"id":1653,"name":"Ghost Rider JC2","alterego":"Ghost Rider JC2","description":"Demon","powers":["Fire","Punishing gaze"]},{"id":1654,"name":"Ghost Rider JC Updated","alterego":"Ghost Rider JC Updated","description":"Demon Updated","powers":["Fire","Punishing gaze"]},{"id":1655,"name":"Black Widow 1750437124381","alterego":"Natasha Romanoff","description":"Skilled spy and martial artist","powers":["Combat Expert","Espionage","Tactical Intelligence"]},{"id":1657,"name":"Thor 1750437126035","alterego":"Thor Odinson","description":"God of Thunder from Asgard","powers":["Weather Control","Mjolnir","Superhuman Strength"]},{"id":1659,"name":"Captain America 1750437127690","alterego":"Steve Rogers","description":"Super soldier with enhanced strength and agility","powers":["Super Strength","Enhanced Agility","Vibranium Shield"]},{"id":1661,"name":"Jose Obando 1750437136613","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1662,"name":"Iron Man 56f36a76-f229-45cf-b2ba-4214b1d438fb","alterego":"Tony Stark tst","description":"Genius billionaire tst4","powers":["Armor tst4","Flight tst4"]},{"id":1664,"name":"Character-7495","alterego":"Alter-8421","description":"Description-9261","powers":["Power-8871"]},{"id":1665,"name":"UpdateTest_26c8645c","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1666,"name":"Iron Man 8050de98-ac7d-4992-8e7a-3df4755a1632","alterego":"Tony Stark tst","description":"Genius billionaire tst4","powers":["Armor tst4","Flight tst4"]},{"id":1668,"name":"Hero_40008c77","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1669,"name":"UpdateTest_937a5fc4","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1670,"name":"DeleteTest_b7e67979","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1671,"name":"Franzs Hermans","alterego":"Max Verstappenn","description":"F1 driver","powers":["Armor","Flight"]},{"id":1672,"name":"Super Hero Test 654","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":1674,"name":"I2_f41d8261-4ff7-4e4e-a01f-91f1164d23d9","alterego":"Steve Rogers","description":"Super soldier","powers":["Super Strength","Shield"]},{"id":1675,"name":"IronMan","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":1677,"name":"Andres P","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1678,"name":"Jose Obando 1750437223504","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1679,"name":"Sonic-409432e0-fd6b-45a6-ab12-2626b448b1c0","alterego":"Super sonico","description":"Erizo azul con super velocidad","powers":["velocidad","agilidad","resistencia"]},{"id":1680,"name":"Character-4417","alterego":"Alter-9809","description":"Description-1207","powers":["Power-9351"]},{"id":1681,"name":"Super Hero Test 3958","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":1682,"name":"Super Hero Test 8206","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":1684,"name":"Sonic-3e6849ed-9ac0-4615-83f2-c3064b7d6d9d","alterego":"Super sonico","description":"Erizo azul con super velocidad","powers":["velocidad","agilidad","resistencia"]},{"id":1685,"name":"Super Hero Test 405","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":1686,"name":"Iron Man b1571f4c-f911-4570-8730-dd31c59461ff","alterego":"Tony Stark tst","description":"Genius billionaire tst4","powers":["Armor tst4","Flight tst4"]},{"id":1688,"name":"Iron Man f75f3dd9-6e4e-43b6-bd76-accfb6577dbf","alterego":"Tony Stark tst","description":"Genius billionaire tst4","powers":["Armor tst4","Flight tst4"]},{"id":1691,"name":"Captain Marvel test13","alterego":"Carol Danvers","description":"Updated description","powers":["Flight","Force"]},{"id":1692,"name":"Iron Woman 85f14a","alterego":"All jsi","description":"Superpower","powers":["Teletransportacion","Jugar futbol"]},{"id":1693,"name":"Iron Man 87","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1696,"name":"Iron Man 434c3e6f-66e4-490b-b555-0d75a9df584b","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1697,"name":"Iron Man - a4c7b37c","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1698,"name":"Kramerx3","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1699,"name":"Captain America 1750437265922","alterego":"Steve Rogers","description":"Super soldier with enhanced strength and agility","powers":["Super Strength","Enhanced Agility","Vibranium Shield"]},{"id":1700,"name":"Hulk 1750437266634","alterego":"Bruce Banner","description":"Scientist with the ability to transform into a giant green monster","powers":["Super Strength","Regeneration","Durability"]},{"id":1701,"name":"Black Widow 1750437268076","alterego":"Natasha Romanoff","description":"Skilled spy and martial artist","powers":["Combat Expert","Espionage","Tactical Intelligence"]},{"id":1702,"name":"Thor 1750437269717","alterego":"Thor Odinson","description":"God of Thunder from Asgard","powers":["Weather Control","Mjolnir","Superhuman Strength"]},{"id":1703,"name":"Ghost Rider JC 0b749e11-83a2-4437-a584-f0a51668e77e","alterego":"Ghost Rider JC2","description":"Demon","powers":["Fire","Punishing gaze"]},{"id":1704,"name":"Ghost Rider JC Updated","alterego":"Ghost Rider JC Updated","description":"Demon Updated","powers":["Fire","Punishing gaze"]},{"id":1706,"name":"Captain America 1750437271333","alterego":"Steve Rogers","description":"Super soldier with enhanced strength and agility","powers":["Super Strength","Enhanced Agility","Vibranium Shield"]},{"id":1707,"name":"Iron Manxx","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1708,"name":"Super Rein a41df5ef-99f2-47e1-adb7-08d113c6e42a","alterego":"Rein","description":"Genius billionaire Pro Tekken Player","powers":["Armor","Flight"]},{"id":1709,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":1710,"name":"Sonic-82612ddf-0cfe-4cc7-a21d-ddfdf79116df","alterego":"Super sonico","description":"Erizo azul con super velocidad","powers":["velocidad","agilidad","resistencia"]},{"id":1711,"name":"Sonic-8734668d-d635-4d2e-8ef4-45039e8cc7a6","alterego":"Super sonico","description":"Erizo azul con super velocidad","powers":["velocidad","agilidad","resistencia"]},{"id":1712,"name":"Super Rein 8f339dc1-9543-434b-bc55-037ccd86b70a","alterego":"Rein","description":"Genius billionaire Pro Tekken Player","powers":["Armor","Flight"]},{"id":1713,"name":"Edulima 6","alterego":"Edu Lima","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1714,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":1716,"name":"Iron Man 75666779-545f-46e0-b340-c8a808b84919","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1717,"name":"Nuevo Personaje #4809","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1719,"name":"Iron Man445333","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1720,"name":"Blue Beetle #7284","alterego":"Jaime Reyes","description":"Teen fused with alien tech","powers":["Scarab Armor","Energy Blasts"]},{"id":1721,"name":"Sonic-782ab37b-c993-4514-8ce8-c13cc58e3398","alterego":"Super sonico","description":"Erizo azul con super velocidad","powers":["velocidad","agilidad","resistencia"]},{"id":1722,"name":"Spider-Man #3996","alterego":"Peter Parker","description":"Friendly neighborhood","powers":["Agility","Spider Sense"]},{"id":1723,"name":"Captain Marvel #5928","alterego":"Carol Danvers","description":"Cosmic powers","powers":["Energy Blasts","Flight"]},{"id":1724,"name":"Sonic-5a92196a-b017-4640-9f55-baf107cfc022","alterego":"Super sonico","description":"Erizo azul con super velocidad","powers":["velocidad","agilidad","resistencia"]},{"id":1726,"name":"Silvana Bentacourt v1-1750437317025","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1727,"name":"Edulima 7","alterego":"Edu Lima","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1728,"name":"Personaje actualizado-1750437320829","alterego":"Tony Stark","description":"Genius billionaire test","powers":["Armor","Flight"]},{"id":1729,"name":"Captain America 1750437330762","alterego":"Steve Rogers","description":"Super soldier with enhanced strength and agility","powers":["Super Strength","Enhanced Agility","Vibranium Shield"]},{"id":1731,"name":"I2_68ae7d95-954e-4be1-a5e0-01573fdeb515","alterego":"Steve Rogers","description":"Super soldier","powers":["Super Strength","Shield"]},{"id":1732,"name":"Hulk 1750437331373","alterego":"Bruce Banner","description":"Scientist with the ability to transform into a giant green monster","powers":["Super Strength","Regeneration","Durability"]},{"id":1733,"name":"I2_65ca6ae9-dd35-49fa-b36e-3063484c8a1f","alterego":"Steve Rogers","description":"Super soldier","powers":["Super Strength","Shield"]},{"id":1734,"name":"Black Widow 1750437332788","alterego":"Natasha Romanoff","description":"Skilled spy and martial artist","powers":["Combat Expert","Espionage","Tactical Intelligence"]},{"id":1735,"name":"Nuevo Personaje #1757","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1736,"name":"Thor 1750437334392","alterego":"Thor Odinson","description":"God of Thunder from Asgard","powers":["Weather Control","Mjolnir","Superhuman Strength"]},{"id":1739,"name":"Captain America 1750437335832","alterego":"Steve Rogers","description":"Super soldier with enhanced strength and agility","powers":["Super Strength","Enhanced Agility","Vibranium Shield"]},{"id":1740,"name":"Super Hero Test 9944","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":1741,"name":"Blue Beetle #2581","alterego":"Jaime Reyes","description":"Teen fused with alien tech","powers":["Scarab Armor","Energy Blasts"]},{"id":1742,"name":"Super Hero Test 8999","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":1743,"name":"Spider-Man #2034","alterego":"Peter Parker","description":"Friendly neighborhood","powers":["Agility","Spider Sense"]},{"id":1744,"name":"Captain Marvel #6701","alterego":"Carol Danvers","description":"Cosmic powers","powers":["Energy Blasts","Flight"]},{"id":1745,"name":"Super Hero Test 5377","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":1747,"name":"Super Hero Test 7554","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":1748,"name":"Atom Eve 350272","alterego":"Eva","description":"Inmortal","powers":["Armor","Flight"]},{"id":1749,"name":"Super Girl - TM 1750437343378","alterego":"Tony Clack Kent","description":"Strong woman","powers":["Armor","Flight"]},{"id":1751,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":1752,"name":"Iron Man2","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1754,"name":"Iron Man Rafaelwha4ungq","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1756,"name":"Data12 Data23","alterego":"Cactus Jack","description":"Genius","powers":["Super Intelligence"]},{"id":1758,"name":"Iron Man Test 1750437375792","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1759,"name":"Nombre-8a60d6c9-3d82-4a4d-9125-bca724ab5b74","alterego":"Bruce Wayne","description":"the Dark Knight","powers":["Money","Investment","Martial Arts"]},{"id":1760,"name":"BatMans 2026","alterego":"Bruce Wayne","description":"the Dark Knight in Gotham City","powers":["Money","Investment","Martial Arts","Detective Skills","Gadgets"]},{"id":1761,"name":"Iron Man Test 1750437382971","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1763,"name":"Super Hero Test 8932","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":1764,"name":"Super Hero Test 8209","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":1765,"name":"Super Hero Test 1029","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":1766,"name":"Hero-39484","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1767,"name":"Super Hero Test 7196","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":1768,"name":"Iron Manco","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1769,"name":"#(textoRandom)","alterego":"anamcias","description":"Developer","powers":["Angular","Karate"]},{"id":1770,"name":"Jose Obando 1750437428305","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1775,"name":"createdName","alterego":"Otro","description":"Otro","powers":["Armor"]},{"id":1776,"name":"Iron Man 2000","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1778,"name":"Spider Strange 0abf1e","alterego":"All jsi","description":"Superpower","powers":["Teletransportacion","Jugar futbol"]},{"id":1779,"name":"Silvana Bentacourt v1-1750437452969","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1780,"name":"Iron Man Test 1750437460873","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1781,"name":"Personaje actualizado-1750437456735","alterego":"Tony Stark","description":"Genius billionaire test","powers":["Armor","Flight"]},{"id":1782,"name":"Diego Iron Man 9573","alterego":"Tony Stark Diego Post","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1783,"name":"Iron Man_76a27991-1edb-4216-a6bd-ac9233d29961","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1785,"name":"Iron Man Test 1750437467910","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1787,"name":"Super Rein bd835364-f571-4ccc-af4c-d87b0f34e8a9","alterego":"Rein","description":"Genius billionaire Pro Tekken Player","powers":["Armor","Flight"]},{"id":1789,"name":"Iron Man Cambiado por DiegoF","alterego":"Tony Stark Diego Put","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1790,"name":"Sonic-06653699-8ceb-4ffd-bcf0-90e67dd844be","alterego":"Super sonico","description":"Erizo azul con super velocidad","powers":["velocidad","agilidad","resistencia"]},{"id":1791,"name":"User_0f3a5a37","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1792,"name":"User_6e82c7bd","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1793,"name":"User_aa7299f6","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":1794,"name":"Iron Man Test 1750437481487","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1796,"name":"Iron Man geod1","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1797,"name":"Atom Eve 181259","alterego":"Eva","description":"Inmortal","powers":["Armor","Flight"]},{"id":1800,"name":"Iron Man Test 1750437489397","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1801,"name":"IronMan-34cc6284-256f-488c-ab62-409c7cdd500b","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1802,"name":"Nombre-5effe1c0-cc2c-4868-b661-6c27da7a5049","alterego":"Bruce Wayne","description":"the Dark Knight","powers":["Money","Investment","Martial Arts"]},{"id":1803,"name":"Iron Manass","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1804,"name":"BatMans 2026","alterego":"Bruce Wayne","description":"the Dark Knight in Gotham City","powers":["Money","Investment","Martial Arts","Detective Skills","Gadgets"]},{"id":1806,"name":"Thor Lord 311435","alterego":"All jsi","description":"Superpower","powers":["Teletransportacion","Jugar futbol"]},{"id":1807,"name":"Iron Man test - aa","alterego":"Tony Stark aa","description":"Genius billionaire - aa","powers":["Armor","Flight","unity"]},{"id":1808,"name":"Iron Marck85003","alterego":"Marco Jativa","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1810,"name":"Sonic-7e395f4b-8b4d-4c03-8215-f1fff41a96ee","alterego":"Super sonico","description":"Erizo azul con super velocidad","powers":["velocidad","agilidad","resistencia"]},{"id":1812,"name":"Iron Man - ed8fc526","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1813,"name":"Iron Manaa","alterego":"Otro","description":"Otro","powers":["Armor"]},{"id":1814,"name":"Iron Man New","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1815,"name":"Iron Man Infernal Karate -3f3355f5-b5d1-4d72-8b08-bd266869c222","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1816,"name":"Super Hero Test 3776","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":1817,"name":"Super Hero Test 1799","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":1818,"name":"Super Hero Test 1922","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":1819,"name":"Iron Man Infernal Karate -e505b9a8-c86a-4592-8448-a02ce35dbf29","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1820,"name":"Super Hero Test 9097","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":1821,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":1823,"name":"Iron Man Test 1750437554401","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1824,"name":"Personaje/Test b9ff5375-8cde-4832-8e61-7b4caa0074e1","alterego":"bcarrill","description":"Test","powers":["Armor","Flight"]},{"id":1825,"name":"Wonder Soldier 0e41a0","alterego":"All jsi","description":"Superpower","powers":["Teletransportacion","Jugar futbol"]},{"id":1826,"name":"mSkRCzogyj","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1828,"name":"gILbJf7sa8ef","alterego":"anamcias","description":"Developer","powers":["Angular","Karate"]},{"id":1829,"name":"GxLh5zp0xXWg","alterego":"anamcias","description":"Developer","powers":["Angular","Karate"]},{"id":1830,"name":"Iron Man_5998769d-358f-4e41-b21d-eea0bf5df34c","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1833,"name":"Iron Man_aa3f814f-6f16-4689-bc2b-1ccec322b40f","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1835,"name":"Super Hero Test 782","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":1836,"name":"Super Hero Test 459","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":1838,"name":"Super Hero Test 2636","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":1839,"name":"Iron Man Test 1750437580554","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1841,"name":"I2_f7c36899-a78f-43b5-9f84-d23379e83d62","alterego":"Steve Rogers","description":"Super soldier","powers":["Super Strength","Shield"]},{"id":1843,"name":"I2_5d7f7dfa-999a-49d1-8aa9-4bfca2f54630","alterego":"Steve Rogers","description":"Super soldier","powers":["Super Strength","Shield"]},{"id":1844,"name":"Iron Man44533331","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1845,"name":"Iron Man - 004c2dea","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1846,"name":"Super Hero Test 6389","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":1848,"name":"Super Hero Test 6408","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":1849,"name":"Captain America 1750437605601","alterego":"Steve Rogers","description":"Super soldier with enhanced strength and agility","powers":["Super Strength","Enhanced Agility","Vibranium Shield"]},{"id":1850,"name":"Hulk 1750437606252","alterego":"Bruce Banner","description":"Scientist with the ability to transform into a giant green monster","powers":["Super Strength","Regeneration","Durability"]},{"id":1851,"name":"Black Widow 1750437607692","alterego":"Natasha Romanoff","description":"Skilled spy and martial artist","powers":["Combat Expert","Espionage","Tactical Intelligence"]},{"id":1852,"name":"Iron Man 99999","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1853,"name":"Thor 1750437609373","alterego":"Thor Odinson","description":"Updated description for testing","powers":["Weather Control","Mjolnir","Superhuman Strength"]},{"id":1855,"name":"Diego Iron Man 6564","alterego":"Tony Stark Diego Post","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1856,"name":"updated1","alterego":"Mark Grayson","description":"Human","powers":["String","Flight"]},{"id":1858,"name":"Character-1203","alterego":"Alter-1160","description":"Description-3717","powers":["Power-8057"]},{"id":1859,"name":"Hero-14897","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1861,"name":"Iron Man Cambiado por DiegoF","alterego":"Tony Stark Diego Put","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1862,"name":"IronMan-a86f642d-f20e-49ec-a7b1-a5bd8f41ecd2","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1863,"name":"Sonic-b8128d10-6cb2-4e76-8ac4-ac4abf719658","alterego":"Super sonico","description":"Erizo azul con super velocidad","powers":["velocidad","agilidad","resistencia"]},{"id":1864,"name":"Personaje/Test 0193cb68-050f-4963-9e58-8cbe3149e96f","alterego":"bcarrill","description":"Test","powers":["Armor","Flight"]},{"id":1865,"name":"Andres P2","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1866,"name":"Iron Man222","alterego":"Tony Stark222","description":"Genius billionaire222","powers":["Armor","Flight"]},{"id":1868,"name":"Iron Man Test 1750437632562","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1869,"name":"Hulk Woman df0668","alterego":"All jsi","description":"Superpower","powers":["Teletransportacion","Jugar futbol"]},{"id":1871,"name":"Iron Man asd","alterego":"Tony Stark asd","description":"Genio, millonario, playboy, filántropo","powers":["Armadura","Inteligencia"]},{"id":1872,"name":"Atom Eve 575588","alterego":"Eva","description":"Inmortal","powers":["Armor","Flight"]},{"id":1873,"name":"Doraemon","alterego":"Doraemon","description":"Genius billionaire","powers":["Armor","Flight","Magic pocket"]},{"id":1874,"name":"Iron Marck85004","alterego":"Marco Jativa","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1875,"name":"Iron Man123456789ae","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":1876,"name":"CohetePlus21","alterego":"Cohete Plus","description":"Cohetito Plus","powers":["Armors","Flight"]},{"id":1877,"name":"Black panter 1 68","alterego":"T Challa 1 68","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1878,"name":"Black panter 1 2","alterego":"T Challa 1 2","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1880,"name":"Black panter 1 67","alterego":"T Challa 1 67","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1881,"name":"Iron Man-ae757f44-0753-4cbb-b312-36c10b34223d","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1882,"name":"Iron Man 41","alterego":"Tony Stark 41","description":"Updated description","powers":["Armor","Flight"]},{"id":1883,"name":"Iron Man-4ca1bea3-6b10-4716-b66e-0eb6c89868f3","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":1886,"name":"Iron Man Test 1750437667767","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1887,"name":"Super Hero Test 4146","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":1889,"name":"Super Hero Test 5300","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":1891,"name":"Nombre-52646393-a534-4453-8088-57f3cce841a9","alterego":"Bruce Wayne","description":"the Dark Knight","powers":["Money","Investment","Martial Arts"]},{"id":1892,"name":"Sonic-0f5df7c5-2e1e-4d03-b7be-e02a0ca19f8f","alterego":"Super sonico","description":"Erizo azul con super velocidad","powers":["velocidad","agilidad","resistencia"]},{"id":1894,"name":"Hero-6f7d9c0d-180b-4cfb-a8a5-60075e0ac020","alterego":"anamcias","description":"Developer","powers":["Angular","Karate"]},{"id":1895,"name":"Hero-e408638f-de3d-41f5-8f33-0219ba5091c5","alterego":"anamcias","description":"Developer","powers":["Angular","Karate"]},{"id":1896,"name":"Nombre-570948b8-c16f-4625-b633-27106930bb86","alterego":"Bruce Wayne","description":"the Dark Knight","powers":["Money","Investment","Martial Arts"]},{"id":1897,"name":"Super Hero Test 5010","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":1898,"name":"BatMans 2026","alterego":"Bruce Wayne","description":"the Dark Knight in Gotham City","powers":["Money","Investment","Martial Arts","Detective Skills","Gadgets"]},{"id":1901,"name":"Thors3","alterego":"Rayo Man","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1902,"name":"Super Hero Test 7349","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":1903,"name":"Iron Man fgdhfghfgh","alterego":"Tony Stark fghfgh","description":"Genio, millonario, playboy, filántropo","powers":["Armadura","Inteligencia"]},{"id":1904,"name":"Iron Man nnn","alterego":"Otro","description":"Otro","powers":["Armor"]},{"id":1906,"name":"Iron Widow 034587","alterego":"All jsi","description":"Superpower","powers":["Teletransportacion","Jugar futbol"]},{"id":1908,"name":"Super Rein 16972425-ade4-4e9f-81c4-8befa76a41fd","alterego":"Rein","description":"Genius billionaire Pro Tekken Player","powers":["Armor","Flight"]},{"id":1909,"name":"Super Rein a563d478-f08b-49e0-9ccd-95b2d88baa57","alterego":"Rein","description":"Genius billionaire Pro Tekken Player","powers":["Armor","Flight"]},{"id":1910,"name":"Character-4999","alterego":"Alter-9566","description":"Description-760","powers":["Power-5345"]},{"id":1911,"name":"Iron Man_7a31bb45-8ac8-4755-89d0-92e2cef8aef9","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1914,"name":"Hero_3062586c","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1915,"name":"Super Rein 2c7844d0-b9a8-4938-b2dd-63b4b004127f","alterego":"Rein","description":"Genius billionaire Pro Tekken Player","powers":["Armor","Flight"]},{"id":1916,"name":"Iron Man test - aandino52823","alterego":"Tony Stark aandino","description":"Genius billionaire - aandino","powers":["Armor","Flight","unity","c#"]},{"id":1917,"name":"Iron Man test - aandino41006","alterego":"Tony Stark aandino","description":"Genius billionaire - aandino","powers":["Armor","Flight","unity","c#"]},{"id":1918,"name":"Iron Man Infernal Karate -0912b02e-0aa0-4b74-b52e-34349110f983","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1920,"name":"I2_4ce765e0-5be5-4e3f-8844-5b0751099f6f","alterego":"Steve Rogers","description":"Super soldier","powers":["Super Strength","Shield"]},{"id":1921,"name":"I2_ecd2f193-0b9e-410c-a889-ff9418cfebbc","alterego":"Steve Rogers","description":"Super soldier","powers":["Super Strength","Shield"]},{"id":1922,"name":"Iron Man Infernal Karate -821e68ee-34ea-4823-b5b3-a9db8591441b","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1923,"name":"Character to Delete","alterego":"Delete Test","description":"Character for DELETE test","powers":["Delete Power"]},{"id":1924,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":1928,"name":"Atom Eve 253007","alterego":"Eva","description":"Inmortal","powers":["Armor","Flight"]},{"id":1929,"name":"Diego Iron Man 4425","alterego":"Tony Stark Diego Post","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1931,"name":"Iron Man Cambiado por DiegoF","alterego":"Tony Stark Diego Put","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1932,"name":"Iron Man44533332","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1933,"name":"Captain America 1750437762997","alterego":"Steve Rogers","description":"Super soldier with enhanced strength and agility","powers":["Super Strength","Enhanced Agility","Vibranium Shield"]},{"id":1934,"name":"Hulk 1750437763617","alterego":"Bruce Banner","description":"Scientist with the ability to transform into a giant green monster","powers":["Super Strength","Regeneration","Durability"]},{"id":1935,"name":"Black Widow 1750437765061","alterego":"Natasha Romanoff","description":"Skilled spy and martial artist","powers":["Combat Expert","Espionage","Tactical Intelligence"]},{"id":1936,"name":"Thor 1750437766744","alterego":"Thor Odinson","description":"Updated description for testing","powers":["Weather Control","Mjolnir","Superhuman Strength"]},{"id":1938,"name":"Super Hero Test 482","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":1940,"name":"Super Hero Test 1609","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":1941,"name":"Iron Man Test 1750437786304","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1943,"name":"Iron Man 2222","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1945,"name":"Black panter 1 71","alterego":"T Challa 1 71","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1946,"name":"Black panter 1 10","alterego":"T Challa 1 10","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1947,"name":"Black panter 1 78","alterego":"T Challa 1 78","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1948,"name":"Iron Man 39","alterego":"Tony Stark 39","description":"Updated description","powers":["Armor","Flight"]},{"id":1950,"name":"Atom Eve 337763","alterego":"Eva","description":"Inmortal","powers":["Armor","Flight"]},{"id":1951,"name":"Edulima 8","alterego":"Edu Lima","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1953,"name":"Diego Iron Man 5051","alterego":"Tony Stark Diego Post","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1955,"name":"Character-191","alterego":"Alter-82","description":"Description-3622","powers":["Power-4798"]},{"id":1957,"name":"Iron Man Cambiado por DiegoF","alterego":"Tony Stark Diego Put","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1958,"name":"Iron Man geod2","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1961,"name":"nombreUnico","alterego":"Peter Parker","description":"Superhéroe arácnido de Marvel","powers":["Agilidad","Sentido arácnido","Trepar muros"]},{"id":1962,"name":"IronMan-3dc07b68-3247-46ff-8868-9b7693b52e28","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1965,"name":"Sonic-635bac38-1b1c-464c-ab0a-86642467ec54","alterego":"Super sonico","description":"Erizo azul con super velocidad","powers":["velocidad","agilidad","resistencia"]},{"id":1966,"name":"Iron Man 222332","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1967,"name":"Captain America 1750437845563","alterego":"Steve Rogers","description":"Super soldier with enhanced strength and agility","powers":["Super Strength","Enhanced Agility","Vibranium Shield"]},{"id":1968,"name":"Hulk 1750437846541","alterego":"Bruce Banner","description":"Scientist with the ability to transform into a giant green monster","powers":["Super Strength","Regeneration","Durability"]},{"id":1969,"name":"Iron Man 68455","alterego":"Tony Stark fghfgh","description":"Genio, millonario, playboy, filántropo","powers":["Armadura","Inteligencia"]},{"id":1970,"name":"Atom Eve 329435","alterego":"Eva","description":"Inmortal","powers":["Armor","Flight"]},{"id":1971,"name":"Black Widow 1750437848061","alterego":"Natasha Romanoff","description":"Skilled spy and martial artist","powers":["Combat Expert","Espionage","Tactical Intelligence"]},{"id":1972,"name":"Thor 1750437849838","alterego":"Thor Odinson","description":"Updated description for testing","powers":["Weather Control","Mjolnir","Superhuman Strength"]},{"id":1976,"name":"Super Rein 4d0ceb4f-9d59-472f-9836-5ed5459ced10","alterego":"Rein","description":"Genius billionaire Pro Tekken Player","powers":["Armor","Flight"]},{"id":1977,"name":"Goku","alterego":"Kakaroto","description":"Personaje de DBZ","powers":["Flight"]},{"id":1979,"name":"Super Rein c931fb79-df64-4644-a679-91d05e2c32e4","alterego":"Rein","description":"Genius billionaire Pro Tekken Player","powers":["Armor","Flight"]},{"id":1980,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":1981,"name":"Spider-Man-847d4afc-993c-42e8-a383-2b0eb7abf9da","alterego":"Peter Parker","description":"Friendly neighborhood Spider-Man","powers":["Wall-crawling","Spider-sense"]},{"id":1983,"name":"Iron Man - 4f5f52cf","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1984,"name":"Hero-30258","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1986,"name":"Super Rein 45bca603-2942-451c-b299-531d9bffd846","alterego":"Rein","description":"Genius billionaire Pro Tekken Player","powers":["Armor","Flight"]},{"id":1987,"name":"Hero_361cb3ac","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1988,"name":"Frank Bernal1234","alterego":"Peter Parker","description":"Superhéroe arácnido de Marvel","powers":["Agilidad","Sentido arácnido","Trepar muros"]},{"id":1989,"name":"Iron Man 684551","alterego":"Tony Stark","description":"Genio, millonario, playboy, filántropo","powers":["Armadura","Inteligencia"]},{"id":1990,"name":"Iron Man Infernal Karate -c18bd3c5-6a40-4223-94e7-c92187bcc857","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1992,"name":"Iron Man Infernal Karate -8c08986d-f28e-45d2-83c4-d00d76c99dba","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1993,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":1994,"name":"Character-2050","alterego":"Alter-1044","description":"Description-2090","powers":["Power-7623"]},{"id":1996,"name":"Hero-63574","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1997,"name":"Iron Man 2223332","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":1998,"name":"Thor Woman b03c71","alterego":"All jsi","description":"Superpower","powers":["Teletransportacion","Jugar futbol"]},{"id":1999,"name":"Iron Man Test 1750437915998","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2001,"name":"Nuevo Personaje #5471","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2003,"name":"Blue Beetle #5321","alterego":"Jaime Reyes","description":"Teen fused with alien tech","powers":["Scarab Armor","Energy Blasts"]},{"id":2004,"name":"Spider-Man #376","alterego":"Peter Parker","description":"Friendly neighborhood","powers":["Agility","Spider Sense"]},{"id":2005,"name":"Captain Marvel #9555","alterego":"Carol Danvers","description":"Cosmic powers","powers":["Energy Blasts","Flight"]},{"id":2006,"name":"Iron Manso","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2007,"name":"Nombre-98c506c8-f8af-4b2a-8d3f-130a29f60d8a","alterego":"Bruce Wayne","description":"the Dark Knight","powers":["Money","Investment","Martial Arts"]},{"id":2008,"name":"Iron Marck85002","alterego":"Marco Jativa","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2009,"name":"BatMans 2026","alterego":"Bruce Wayne","description":"the Dark Knight in Gotham City","powers":["Money","Investment","Martial Arts","Detective Skills","Gadgets"]},{"id":2011,"name":"Super Hero Test 4577","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":2013,"name":"Super Hero Test 2696","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":2014,"name":"Super Hero Test 3648","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":2016,"name":"Super Rein 56b3e0b9-25ac-4869-a337-076f63a816f3","alterego":"Rein","description":"Genius billionaire Pro Tekken Player","powers":["Armor","Flight"]},{"id":2017,"name":"Hero-41853","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2019,"name":"I2_e8223fcd-b227-4a3d-909c-26046ef944d7","alterego":"Steve Rogers","description":"Super soldier","powers":["Super Strength","Shield"]},{"id":2021,"name":"I2_4fd09f7b-866c-4c9a-bc1d-ef7292d0d9df","alterego":"Steve Rogers","description":"Super soldier","powers":["Super Strength","Shield"]},{"id":2023,"name":"CHESPIRITO_1","alterego":"roberto","description":"Personaje actualizado","powers":["comedia","ingenio"]},{"id":2024,"name":"Atom Eve 789331","alterego":"Eva","description":"Inmortal","powers":["Armor","Flight"]},{"id":2025,"name":"Iron Man Infernal Karate -dcfbf37d-bb63-4667-9eae-0c9dd14978ec","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2026,"name":"CohetePlus22","alterego":"Cohete Plus","description":"Cohetito Plus","powers":["Armors","Flight"]},{"id":2027,"name":"Iron Man Infernal Karate -102b1094-43ee-46b0-955d-e828725b172a","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2028,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":2029,"name":"Iron Man-1a4adce0-5dfa-4e07-9b66-a63242eebe6b","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2030,"name":"Capitan America-ca745523-5078-4db1-8e68-732ab9b52079","alterego":"Steve Rogers","description":"Updated description","powers":["Shield","Leadership","Dev"]},{"id":2032,"name":"Iron Man test - aandino - 20182","alterego":"Tony Stark aandino","description":"Genius billionaire - aandino","powers":["Armor","Flight","unity","c#"]},{"id":2035,"name":"Iron Man test - aandino - 64465","alterego":"Tony Stark aandino","description":"Genius billionaire - aandino","powers":["Armor","Flight","unity","c#"]},{"id":2036,"name":"Wonder Widow 9e3c41","alterego":"All jsi","description":"Superpower","powers":["Teletransportacion","Jugar futbol"]},{"id":2039,"name":"HeroeConsulta_4e3db093-eafe-4493-87a8-4370a7ddd835","alterego":"AlteregoConsulta","description":"Consulta","powers":["Consulta"]},{"id":2040,"name":"Hero_11d0afdc-3a66-41cd-b1d9-ed8f89143b72","alterego":"Nuevo Alterego","description":"Nuevo personaje","powers":["Poder1"]},{"id":2041,"name":"Hero_9d3efa83-f67e-4730-9637-db4725a5e87f","alterego":"Otro","description":"Otro","powers":["Poder2"]},{"id":2042,"name":"HeroeActualizado","alterego":"AlteregoActualizado","description":"Actualizado","powers":["PoderActualizado"]},{"id":2044,"name":"I2_b36cd424-4776-4bb5-98dc-cd0dd2a9e797","alterego":"Steve Rogers","description":"Super soldier","powers":["Super Strength","Shield"]},{"id":2045,"name":"Iron Man 2","alterego":"Tony Stark 3","description":"Genius billionaire 3","powers":["Armor","Flight"]},{"id":2046,"name":"I2_8951ff2b-abbd-4750-a7be-35b40605147e","alterego":"Steve Rogers","description":"Super soldier","powers":["Super Strength","Shield"]},{"id":2054,"name":"Iron Man - 178077cc","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2055,"name":"Super Mamá","alterego":"Luz Toaquiza","description":"Puede hacer varias cosas a la vez","powers":["Amor","Comprensión"]},{"id":2056,"name":"Black Widow 1750438011964","alterego":"Natasha Romanoff","description":"Skilled spy and martial artist","powers":["Combat Expert","Espionage","Tactical Intelligence"]},{"id":2057,"name":"Thor 1750438013654","alterego":"Thor Odinson","description":"Updated description for testing","powers":["Weather Control","Mjolnir","Superhuman Strength"]},{"id":2059,"name":"Hero-3101","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2060,"name":"Super Hero Test 1786","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":2062,"name":"Super Hero Test 6407","alterego":"Cristian Ruiz","description":"Genius programmer and coffee lover","powers":["Develop Software","Make Coffee","Solve Problems"]},{"id":2065,"name":"XX","alterego":"Cohete Plus","description":"Cohetito Plus","powers":["Armors","Flight"]},{"id":2066,"name":"Iron Man MK 69009","alterego":"Tony Stark MK 30440","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2067,"name":"Jose Antonio Alvear","alterego":"Jose Man","description":"Developer billionaire","powers":["Java","Angular"]},{"id":2068,"name":"Spider-Man-2851f37c-ead9-4b25-aaf8-7e5894e8d41a","alterego":"Peter Parker","description":"Friendly neighborhood Spider-Man","powers":["Wall-crawling","Spider-sense"]},{"id":2069,"name":"Iron Man geod3","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2071,"name":"Iron Man Rafaels8hvhl61","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2073,"name":"apIeNoSoje","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2074,"name":"Iron Mansoi","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2075,"name":"mario almeida1","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2077,"name":"Hero-f57e7f97-b9d9-44bb-bb68-30afd8186d05","alterego":"anamcias","description":"Developer","powers":["Angular","Karate"]},{"id":2078,"name":"Hero-d09665cb-14a1-47f9-bdaf-607257cfce7f","alterego":"anamcias","description":"Developer","powers":["Angular","Karate"]},{"id":2079,"name":"Frank Bernal1234567","alterego":"Peter Parker","description":"Superhéroe arácnido de Marvel","powers":["Agilidad","Sentido arácnido","Trepar muros"]},{"id":2080,"name":"jzapata_1750438072188","alterego":"Jhonny Zapata","description":"Genius informatician and hacker","powers":["Hacking","Programming","Cybersecurity"]},{"id":2081,"name":"Iron Man - dc2bf25b","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2082,"name":"Captain America 1750438070280","alterego":"Steve Rogers","description":"Super soldier with enhanced strength and agility","powers":["Super Strength","Enhanced Agility","Vibranium Shield"]},{"id":2083,"name":"Hulk 1750438070922","alterego":"Bruce Banner","description":"Scientist with the ability to transform into a giant green monster","powers":["Super Strength","Regeneration","Durability"]},{"id":2084,"name":"Iron Man Rafaelsj8g0321","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2085,"name":"Black Widow 1750438072405","alterego":"Natasha Romanoff","description":"Skilled spy and martial artist","powers":["Combat Expert","Espionage","Tactical Intelligence"]},{"id":2089,"name":"Edulima 9","alterego":"Edu Lima","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2091,"name":"Atom Eve 204461","alterego":"Eva","description":"Inmortal","powers":["Armor","Flight"]},{"id":2094,"name":"Super Rein aedfe6ee-b379-43c2-ba6e-cd71a0f637ec","alterego":"Rein","description":"Genius billionaire Pro Tekken Player","powers":["Armor","Flight"]},{"id":2095,"name":"Super Rein d63395c2-12a8-4667-a418-e7446c9da2bc","alterego":"Rein","description":"Genius billionaire Pro Tekken Player","powers":["Armor","Flight"]},{"id":2098,"name":"Super Rein c1c3e15f-d4a9-43dc-8bb9-b7f795a97b7e","alterego":"Rein","description":"Genius billionaire Pro Tekken Player","powers":["Armor","Flight"]},{"id":2099,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":2101,"name":"Hero-069c9ae2-e06e-41ae-aa6f-9c4c61c631ac","alterego":"anamcias","description":"Developer","powers":["Angular","Karate"]},{"id":2102,"name":"Super Rein f26112c0-5b19-4000-9254-c1630a248152","alterego":"Rein","description":"Genius billionaire Pro Tekken Player","powers":["Armor","Flight"]},{"id":2103,"name":"Hero-148fe4f7-8d75-458c-b81b-ad75b9d68c3d","alterego":"anamcias","description":"Developer","powers":["Angular","Karate"]},{"id":2105,"name":"Super Rein 591ecffc-2d6e-4458-b7b6-327992415fcd","alterego":"Rein","description":"Genius billionaire Pro Tekken Player","powers":["Armor","Flight"]},{"id":2108,"name":"Super Rein 5831e5d3-49a2-4e77-9132-c88aaf23bbbb","alterego":"Rein","description":"Genius billionaire Pro Tekken Player","powers":["Armor","Flight"]},{"id":2109,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":2110,"name":"Captain America 1750438123058","alterego":"Steve Rogers","description":"Super soldier with enhanced strength and agility","powers":["Super Strength","Enhanced Agility","Vibranium Shield"]},{"id":2111,"name":"Hulk 1750438123663","alterego":"Bruce Banner","description":"Scientist with the ability to transform into a giant green monster","powers":["Super Strength","Regeneration","Durability"]},{"id":2112,"name":"mario almeida2","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2113,"name":"Black Widow 1750438125085","alterego":"Natasha Romanoff","description":"Skilled spy and martial artist","powers":["Combat Expert","Espionage","Tactical Intelligence"]},{"id":2114,"name":"Atom Eve 853104","alterego":"Eva","description":"Inmortal","powers":["Armor","Flight"]},{"id":2116,"name":"Thor 1750438126752","alterego":"Thor Odinson","description":"Updated description for testing","powers":["Weather Control","Mjolnir","Superhuman Strength"]},{"id":2118,"name":"Iron Man 22233332","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2119,"name":"Iron Man Rafaelo03kpc2f","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2122,"name":"Super Rein 16d24936-1b4d-4347-860c-8e6e8640051e","alterego":"Rein","description":"Genius billionaire Pro Tekken Player","powers":["Armor","Flight"]},{"id":2124,"name":"Super Rein a62a74bb-8651-4bc5-9c28-bbc4f6f41729","alterego":"Rein","description":"Genius billionaire Pro Tekken Player","powers":["Armor","Flight"]},{"id":2125,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":2126,"name":"CohetePlus23","alterego":"Cohete Plus","description":"Cohetito Plus","powers":["Armors","Flight"]},{"id":2128,"name":"IronMan-25f6a1ae-b113-45d6-8f74-ed543d0aeeb2","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2129,"name":"Gaia","alterego":"Gaia Zapata","description":"Genius informatician and hacker","powers":["Hacking","Programming","Cybersecurity"]},{"id":2130,"name":"Super Rein b5d655a5-0a62-4876-ab85-ce7d609e3c50","alterego":"Rein","description":"Genius billionaire Pro Tekken Player","powers":["Armor","Flight"]},{"id":2132,"name":"Super Rein 661ea302-2687-435a-bebb-d1c827862dbc","alterego":"Rein","description":"Genius billionaire Pro Tekken Player","powers":["Armor","Flight"]},{"id":2133,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":2134,"name":"anmacias","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":2135,"name":"mario almeida3","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2136,"name":"Hero-19793","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":2137,"name":"Ant Man 2","alterego":"Scott Lang","description":"Normal","powers":["Small","Giant"]},{"id":2138,"name":"Hero_332dd340","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2141,"name":"Spider-Man 3","alterego":"Peter Parker 3","description":"Friendly neighborhood hero 3","powers":["Agility","Spider-Sense","Wall-Crawling"]},{"id":2142,"name":"Iron Man 222233332","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2143,"name":"Hero-70022","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2144,"name":"Captain Marvel test16","alterego":"Carol Danvers","description":"Updated description","powers":["Flight","Force"]},{"id":2146,"name":"Frank Bernal12345671","alterego":"Peter Parker","description":"Superhéroe arácnido de Marvel","powers":["Agilidad","Sentido arácnido","Trepar muros"]},{"id":2147,"name":"I2_cbf1312f-74ed-46c0-95ae-7e2085890552","alterego":"Steve Rogers","description":"Super soldier","powers":["Super Strength","Shield"]},{"id":2149,"name":"Hero-37480","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2152,"name":"Iron Man Infernal Karate -515ff99d-845d-4cc3-84c2-09db555ba1fd","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2153,"name":"Iron Man Infernal Karate -d2371c76-7184-4226-8783-186f20ad1267","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2154,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":2156,"name":"Scarlet Hero 2f7988","alterego":"All jsi","description":"Superpower","powers":["Teletransportacion","Jugar futbol"]},{"id":2157,"name":"Spider-Man 494","alterego":"Peter Parker","description":"El amigable vecino Spider-Man","powers":["Sentido arácnido","Trepar paredes","Lanzar telarañas"]},{"id":2158,"name":"Iron Marck85050","alterego":"Marco Jativa","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2159,"name":"Hero-18780","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":2160,"name":"Iron Man Rafaelfnxbeuf0","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2162,"name":"Iron Man 2222233332","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2163,"name":"Hero-54834","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2165,"name":"Iron Man Rafaeljosi5x5j","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2166,"name":"name","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2167,"name":"Hero-7d3b0939-d7fd-4cd2-a754-bd3446b3be06","alterego":"anamcias","description":"Developer","powers":["Angular","Karate"]},{"id":2168,"name":"Hero-96081","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2170,"name":"Iron Man Test Chapter Validation","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2171,"name":"Hero-aa47b53d-366a-4d06-b364-6bd7815c2419","alterego":"anamcias","description":"Developer","powers":["Angular","Karate"]},{"id":2172,"name":"Iron Man Infernal Karate -3f6f3f74-6ee7-4451-9fed-853e502a1784","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2173,"name":"IronMan-83eb10f6-1647-4b32-94cc-e56a420f9227","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2174,"name":"Iron Man Infernal Karate -cff02a81-de86-4298-a216-e5fdd4d5fb40","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2175,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":2178,"name":"Iron Man'; DROP TABLE users;--","alterego":"Super Dev","description":"Super Backend developer","powers":["Java","WebFlux"]},{"id":2179,"name":"Hero-18252","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":2180,"name":"Iron Man 6845512","alterego":"Tony Stark","description":"Genio, millonario, playboy, filántropo","powers":["Armadura","Inteligencia"]},{"id":2181,"name":"Hero-27832","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2182,"name":"Thunder Seer 2586e334-e38a-423b-ada1-afc77b58bbac","alterego":"Kai Storm","description":"Armored mage warrior","powers":["Tech Suit","Flight"]},{"id":2183,"name":"Mystic Blade 7d13315c-3421-432c-84a3-d92977c8fea5","alterego":"Kai Storm","description":"Armored mage warrior","powers":["Tech Suit","Flight"]},{"id":2184,"name":"Shadow Brute 548c285a-b1a4-484c-991c-02bcd276f7df","alterego":"Bran Nok","description":"Dark energy powerhouse","powers":["Strength"]},{"id":2185,"name":"Captain Prism 458d7a5c-32eb-4b67-9f5d-22fed1c5dd9d","alterego":"Nova Hale","description":"Upgraded prism tactics","powers":["Prism Shield","Tactical Mind"]},{"id":2187,"name":"Iron Marck85007","alterego":"Marco Jativa","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2188,"name":"Iron Man Test 1750438282761","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2190,"name":"I2_1a0e8ec4-e196-4d2d-94aa-908eb8d352a3","alterego":"Steve Rogers","description":"Super soldier","powers":["Super Strength","Shield"]},{"id":2192,"name":"Iron Marck85008","alterego":"Marco Jativa","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2193,"name":"I2_1537e541-8702-479d-a325-9e0882ae1c20","alterego":"Steve Rogers","description":"Super soldier","powers":["Super Strength","Shield"]},{"id":2194,"name":"Hero-57950","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":2196,"name":"Hero-5155","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2197,"name":"Iron Man MK 34173","alterego":"Tony Stark MK 72802","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2198,"name":"Hero-82213","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2200,"name":"Atom Eve 136788","alterego":"Eva","description":"Inmortal","powers":["Armor","Flight"]},{"id":2201,"name":"Atom Eve 700100","alterego":"Eva","description":"Inmortal","powers":["Armor","Flight"]},{"id":2203,"name":"Iron Marck85051","alterego":"Marco Jativa","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2204,"name":"Iron Mansoio","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2205,"name":"Hero_f6171de9","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2206,"name":"Frank Bernal123456712","alterego":"Peter Parker","description":"Superhéroe arácnido de Marvel","powers":["Agilidad","Sentido arácnido","Trepar muros"]},{"id":2207,"name":"Super Rein 29950c5b-649c-480c-8a06-c4fb577df8cd","alterego":"Rein","description":"Genius billionaire Pro Tekken Player","powers":["Armor","Flight"]},{"id":2208,"name":"Hero-792","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":2209,"name":"Joccasti'; DROP TABLE users;--","alterego":"Tony Stark","description":"Intento de inyección SQL","powers":["Armor"]},{"id":2211,"name":"Super Rein 9d7c1be3-8393-42dd-a7de-7dfb14958a09","alterego":"Rein","description":"Genius billionaire Pro Tekken Player","powers":["Armor","Flight"]},{"id":2212,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":2214,"name":"Hero-21987","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2215,"name":"Hero-2501","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2216,"name":"Iron Man Infernal Karate -a9a3f313-6c7f-4a4c-8b26-2fb68b3f1bdc","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2217,"name":"Scarlet Panther f2fb07","alterego":"All jsi","description":"Superpower","powers":["Teletransportacion","Jugar futbol"]},{"id":2219,"name":"Iron Man Infernal Karate -fb049c88-a8cb-41f8-add3-5d364b61bd77","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2220,"name":"Iron Man-8e8ddc95-436f-466d-9c5a-9bef0ad65533","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2221,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":2223,"name":"Iron Man geod5","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2224,"name":"Hero-66346","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2225,"name":"Iron Man MK 55956","alterego":"Tony Stark MK 89103","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2226,"name":"IronMan-87e67683-462e-418c-88b5-496d04a59d0c","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2227,"name":"Thunder Seer 7b4f9abf-2da3-4a33-9cc3-0791dee1b3b9","alterego":"Kai Storm","description":"Armored mage warrior","powers":["Tech Suit","Flight"]},{"id":2229,"name":"I2_ee9012ae-1732-4177-9839-3a5faebbf2c0","alterego":"Steve Rogers","description":"Super soldier","powers":["Super Strength","Shield"]},{"id":2230,"name":"Mystic Blade 61d979bf-3260-441c-807c-62e9403d4cd9","alterego":"Kai Storm","description":"Armored mage warrior","powers":["Tech Suit","Flight"]},{"id":2231,"name":"Shadow Brute 59b24f5d-e3e0-4ad6-a577-36469075fbdf","alterego":"Bran Nok","description":"Dark energy powerhouse","powers":["Strength"]},{"id":2232,"name":"Captain Prism 3172b291-a81f-4dad-8abc-3139ad9f8f00","alterego":"Nova Hale","description":"Upgraded prism tactics","powers":["Prism Shield","Tactical Mind"]},{"id":2233,"name":"I2_593d318c-8836-40f8-920c-b5c52d1f14d0","alterego":"Steve Rogers","description":"Super soldier","powers":["Super Strength","Shield"]},{"id":2235,"name":"Hero-22279","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":2236,"name":"Hero-3935","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2238,"name":"Hero-13706","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2239,"name":"Hero-64811","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2242,"name":"Spider-Man 123","alterego":"Peter Parker","description":"El amigable vecino Spider-Man","powers":["Sentido arácnido","Trepar paredes","Lanzar telarañas"]},{"id":2243,"name":"Hero_49b2308d","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2244,"name":"Atom Eve 334591","alterego":"Eva","description":"Inmortal","powers":["Armor","Flight"]},{"id":2245,"name":"Atom Eve 264116","alterego":"Eva","description":"Inmortal","powers":["Armor","Flight"]},{"id":2249,"name":"Frank Bernal1234567123","alterego":"Peter Parker","description":"Superhéroe arácnido de Marvel","powers":["Agilidad","Sentido arácnido","Trepar muros"]},{"id":2250,"name":"CohetePlus24","alterego":"Cohete Plus","description":"Cohetito Plus","powers":["Armors","Flight"]},{"id":2251,"name":"a6280ac7-438e-45bf-ae56-5e7c85c25c8d","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2252,"name":"Hero-87354","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":2253,"name":"Hero-87401","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2254,"name":"IronMan-c502be18-98ec-4a09-a883-b1a9a41530b4","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2255,"name":"Iron Man geod6","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2256,"name":"Iron Man test - aandino - 99872","alterego":"Tony Stark aandino","description":"Genius billionaire - aandino","powers":["Armor","Flight","unity","c#"]},{"id":2257,"name":"Hero-76581","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2258,"name":"Captain Witch 097662","alterego":"All jsi","description":"Superpower","powers":["Teletransportacion","Jugar futbol"]},{"id":2259,"name":"Hero-36820","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2260,"name":"Atom Eve 770389","alterego":"Eva","description":"Inmortal","powers":["Armor","Flight"]},{"id":2262,"name":"Iron Man-f0f25cb4-d3ab-439b-83a6-6fb95bceeab3","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2264,"name":"I2_cd331bc4-4997-421b-bd22-f16a5107696e","alterego":"Steve Rogers","description":"Super soldier","powers":["Super Strength","Shield"]},{"id":2265,"name":"I2_09d862c3-0682-4299-b76c-e5cb8332d05a","alterego":"Steve Rogers","description":"Super soldier","powers":["Super Strength","Shield"]},{"id":2267,"name":"Character-58a218c8","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2268,"name":"Character-6004dd74","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2269,"name":"Character-8b08795b","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2271,"name":"Iron Man Infernal Karate -d32c00ee-fc2b-41df-af27-3b5338793357","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2272,"name":"Character-ce7c7552","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":2273,"name":"Spider-Man 168","alterego":"Peter Parker","description":"El amigable vecino Spider-Man","powers":["Sentido arácnido","Trepar paredes","Lanzar telarañas"]},{"id":2274,"name":"Iron Man Infernal Karate -5d679375-97da-4857-ab14-ea4524da4028","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2276,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":2278,"name":"Iron Man test - aandino - 66244","alterego":"Tony Stark aandino","description":"Genius billionaire - aandino","powers":["Armor","Flight","unity","c#"]},{"id":2279,"name":"Iron Man test - aandino - 20861","alterego":"Tony Stark aandino","description":"Genius billionaire - aandino","powers":["Armor","Flight","unity","c#"]},{"id":2280,"name":"milmoral7","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2281,"name":"Frank Bernal12345671234","alterego":"Peter Parker","description":"Superhéroe arácnido de Marvel","powers":["Agilidad","Sentido arácnido","Trepar muros"]},{"id":2282,"name":"Iron Man Test 1750438539662","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2284,"name":"New Character again","alterego":"Emiya Shirou","description":"King of Babylon, and friend of Enkidou","powers":["Full Attack","Unlimited Blades","Final Hit"]},{"id":2285,"name":"Hero-98338","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":2286,"name":"Hero-55529","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2287,"name":"Thunder Seer 5e552fde-de10-4436-8b01-deefae1587fd","alterego":"Kai Storm","description":"Armored mage warrior","powers":["Tech Suit","Flight"]},{"id":2288,"name":"Mystic Blade 78317cf8-fdde-495b-b6f8-896d8b68ca6a","alterego":"Kai Storm","description":"Armored mage warrior","powers":["Tech Suit","Flight"]},{"id":2289,"name":"Shadow Brute f7c8dcdd-cca6-41c7-907a-29a88eebf9ad","alterego":"Bran Nok","description":"Dark energy powerhouse","powers":["Strength"]},{"id":2290,"name":"randomName","alterego":"Jose Man","description":"Developer billionaire","powers":["Java","Angular"]},{"id":2291,"name":"Iron Man 778","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2292,"name":"Captain Prism 9ce74ce5-a06d-4f7b-9626-977dfaf8a0d4","alterego":"Nova Hale","description":"Upgraded prism tactics","powers":["Prism Shield","Tactical Mind"]},{"id":2293,"name":"Iron Man 595","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2295,"name":"Iron Man 367","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2296,"name":"Iron Man 21","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2297,"name":"nombre","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":2298,"name":"Hero-51817","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2299,"name":"Iron Man 266","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2301,"name":"Iron Man 431","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2303,"name":"Iron Man Infernal Karate -e1661fea-f675-474f-adb9-7292452d91c3","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2304,"name":"Iron Marck85052","alterego":"Marco Jativa","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2305,"name":"Spider-Man-6b005732-2e4c-4886-b3f1-583c1b82d9bc","alterego":"Peter Parker","description":"Friendly neighborhood Spider-Man","powers":["Wall-crawling","Spider-sense"]},{"id":2306,"name":"Iron Man Infernal Karate -83cb77dc-f183-4d22-81e3-1c75247c6b56","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2307,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":2308,"name":"mario almeida4","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2310,"name":"Atom Eve 588072","alterego":"Eva","description":"Inmortal","powers":["Armor","Flight"]},{"id":2312,"name":"Iron Man-bbd2cfbd-c1a1-4ec8-a2ae-76c1e626619f","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2313,"name":"Hero-89095","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":2314,"name":"Hero-17733","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2315,"name":"Hero-20378","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2317,"name":"I2_0adda5c4-8992-4d72-9ba6-76741558fd45","alterego":"Steve Rogers","description":"Super soldier","powers":["Super Strength","Shield"]},{"id":2320,"name":"I2_7326b852-7ff1-484e-a81c-d146f3aa2024","alterego":"Steve Rogers","description":"Super soldier","powers":["Super Strength","Shield"]},{"id":2321,"name":"Hero-47657","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2322,"name":"!@#$%^&*()_+|~=`{}[]:\";'<>?,./","alterego":"Tony Stark","description":"Prueba caracteres especiales","powers":["Armor"]},{"id":2323,"name":"TbgcNTaDfg","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2324,"name":"Iron Man Updated","alterego":"Tony Stark","description":"Updated description Jose","powers":["Armor","Flight","Genius"]},{"id":2326,"name":"Hero-23207","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":2327,"name":"Hero-99194","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2328,"name":"Hero-7537","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2329,"name":"Hawkeye","alterego":"Clint Barton","description":"Expert archer","powers":["Archery","Martial Arts"]},{"id":2330,"name":"Iron Man geod8","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2331,"name":"Character-0b0b4597","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2332,"name":"IronMan-0f016528-5c3e-458a-80d0-4342609bffaa","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2333,"name":"Character-4b1d35b1","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2334,"name":"Super Girl - TM 1750438633806","alterego":"Tony Clack Kent","description":"Strong woman","powers":["Armor","Flight"]},{"id":2335,"name":"Hero-67381","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":2336,"name":"Super Girl - TM 1750438635539","alterego":"Tony Clack Kent","description":"Strong woman","powers":["Armor","Flight"]},{"id":2337,"name":"Character-3fd3291d","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2338,"name":"Spider-Man-d266fdeb-4543-42b3-a94d-b50e3683069e","alterego":"Peter Parker","description":"Friendly neighborhood Spider-Man","powers":["Wall-crawling","Spider-sense"]},{"id":2339,"name":"Hero-23480","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2340,"name":"Character-259f3a92","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":2341,"name":"Hero-17808","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2343,"name":"Iron Man - Created21","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2345,"name":"Thunder Seer 3e07d98a-077f-4c5b-944f-9e5e0a74da45","alterego":"Kai Storm","description":"Armored mage warrior","powers":["Tech Suit","Flight"]},{"id":2346,"name":"Iron Man Test-d0d78dfc","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2347,"name":"Mystic Blade c1763f22-50e7-4567-b192-a3c006a7b0b2","alterego":"Kai Storm","description":"Armored mage warrior","powers":["Tech Suit","Flight"]},{"id":2348,"name":"Shadow Brute 5014af01-87dd-4571-8562-8ca0c710c7d1","alterego":"Bran Nok","description":"Dark energy powerhouse","powers":["Strength"]},{"id":2349,"name":"Captain Prism eff575b3-0fcd-41db-97d0-19a930a3f5cd","alterego":"Nova Hale","description":"Upgraded prism tactics","powers":["Prism Shield","Tactical Mind"]},{"id":2350,"name":"Spider-Man 666","alterego":"Peter Parker","description":"El amigable vecino Spider-Man","powers":["Sentido arácnido","Trepar paredes","Lanzar telarañas"]},{"id":2352,"name":"Iron Man - 09c75d35","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2353,"name":"Hero-52424","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2354,"name":"Iron Man - 740aa3ee","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2356,"name":"I2_f2ae8179-ade4-4960-bf0b-9dd6ede40d3e","alterego":"Steve Rogers","description":"Super soldier","powers":["Super Strength","Shield"]},{"id":2357,"name":"I2_1bf44dd7-71b1-48c8-be44-6a60bfd0d4fe","alterego":"Steve Rogers","description":"Super soldier","powers":["Super Strength","Shield"]},{"id":2359,"name":"CohetePlus25","alterego":"Cohete Plus","description":"Cohetito Plus","powers":["Armors","Flight"]},{"id":2360,"name":"Character-5b755554","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2361,"name":"Character-81dd763a","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2362,"name":"Thunder Seer 66698165-2117-4c99-bff6-ee8c367dcc5d","alterego":"Kai Storm","description":"Armored mage warrior","powers":["Tech Suit","Flight"]},{"id":2363,"name":"Ronald Mejia","alterego":"Donald","description":"Genius billionaire","powers":["Inteligencia","Sueño"]},{"id":2364,"name":"Character-a2fd7b80","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2365,"name":"Mystic Blade 1ade296b-869a-4d48-b7d3-44a2b55fd5db","alterego":"Kai Storm","description":"Armored mage warrior","powers":["Tech Suit","Flight"]},{"id":2366,"name":"Shadow Brute 0e2b8d80-0322-4145-a91d-b3441219ba00","alterego":"Bran Nok","description":"Dark energy powerhouse","powers":["Strength"]},{"id":2367,"name":"Captain Prism c2b1b2e3-9c54-460e-bae3-c0025c9668ba","alterego":"Nova Hale","description":"Upgraded prism tactics","powers":["Prism Shield","Tactical Mind"]},{"id":2369,"name":"Character-a20a1369","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":2370,"name":"Personaje/Test 509343a7-d910-4968-aa03-e139bd0f1382","alterego":"bcarrill","description":"Test","powers":["Armor","Flight"]},{"id":2371,"name":"FrankBernal1","alterego":"Peter Parker","description":"Superhéroe arácnido de Marvel","powers":["Agilidad","Sentido arácnido","Trepar muros"]},{"id":2374,"name":"Iron Man Test-0bb2c6fb","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2375,"name":"Iron Man - 7216d538","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2376,"name":"Iron Man - 18f9375d","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2377,"name":"Iron Man - f7424c7f","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2378,"name":"Super Girl - TM 1750438696647","alterego":"Tony Clack Kent","description":"Strong woman","powers":["Armor","Flight"]},{"id":2379,"name":"Super Girl - TM 1750438698500","alterego":"Tony Clack Kent","description":"Strong woman","powers":["Armor","Flight"]},{"id":2380,"name":"d3cc70b4-476b-4e6f-9361-b37ece8716bd","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2381,"name":"Vision Lord 08376f","alterego":"All jsi","description":"Superpower","powers":["Teletransportacion","Jugar futbol"]},{"id":2382,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":2383,"name":"Iron Man #(uuid)","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2384,"name":"jzapata_1750438726536","alterego":"Jhonny Zapata","description":"Genius informatician and hacker","powers":["Hacking","Programming","Cybersecurity"]},{"id":2385,"name":"Gaia","alterego":"Gaia Zapata","description":"Genius informatician and hacker","powers":["Hacking","Programming","Cybersecurity"]},{"id":2389,"name":"Iron Man-4b102d4c-1dcc-4628-af0e-3ae5a4d1300f","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2390,"name":"FrankBernal12","alterego":"Peter Parker","description":"Superhéroe arácnido de Marvel","powers":["Agilidad","Sentido arácnido","Trepar muros"]},{"id":2391,"name":"Iron Man test - aandino - 86051","alterego":"Tony Stark aandino","description":"Genius billionaire - aandino","powers":["Armor","Flight","unity","c#"]},{"id":2392,"name":"Iron Man test - aandino - 90973","alterego":"Tony Stark aandino","description":"Genius billionaire - aandino","powers":["Armor","Flight","unity","c#"]},{"id":2393,"name":"Spider-Man-c1f80adb-8c29-4676-a350-3d650f0772f6","alterego":"Peter Parker","description":"Friendly neighborhood Spider-Man","powers":["Wall-crawling","Spider-sense"]},{"id":2394,"name":"Iron Man Infernal Karate -54b8ead4-e540-4718-9824-3ade6952c123","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2395,"name":"Iron Man Infernal Karate -06db521a-a171-400d-885d-da4ef2611af9","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2396,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":2398,"name":"Captain Lord 9f54c6","alterego":"All jsi","description":"Superpower","powers":["Teletransportacion","Jugar futbol"]},{"id":2399,"name":"A!@#$%^&*()_+|~=`{}[]:\";'<>?,./","alterego":"Tony Stark","description":"Prueba caracteres especiales","powers":["Armor"]},{"id":2400,"name":"Captain Marvel test20","alterego":"Carol Danvers","description":"the biggest hero in the world","powers":["Flight","Force"]},{"id":2401,"name":"Hero_48b2417a","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2403,"name":"Iron Man MK 10596","alterego":"Tony Stark MK 86170","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2404,"name":"Iron Man - 1b26ff1d","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2405,"name":"Iron Man - 49c7f509","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2406,"name":"Iron Man Infernal Karate -9f71a2cd-8e6b-401a-a12a-aadb8e2ad0a0","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2407,"name":"jzapata_1750438834516","alterego":"Jhonny Zapata","description":"Genius informatician and hacker","powers":["Hacking","Programming","Cybersecurity"]},{"id":2408,"name":"Gaia","alterego":"Gaia Zapata","description":"Genius informatician and hacker","powers":["Hacking","Programming","Cybersecurity"]},{"id":2410,"name":"Iron Man Infernal Karate -e80c0d0e-d006-4323-8fc3-4ff5e933c97d","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2411,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":2413,"name":"Spider-Man 48","alterego":"Peter Parker","description":"El amigable vecino Spider-Man","powers":["Sentido arácnido","Trepar paredes","Lanzar telarañas"]},{"id":2414,"name":"FrankBernal123","alterego":"Peter Parker","description":"Superhéroe arácnido de Marvel","powers":["Agilidad","Sentido arácnido","Trepar muros"]},{"id":2415,"name":"Bernal1","alterego":"Peter Parker","description":"Superhéroe arácnido de Marvel","powers":["Agilidad","Sentido arácnido","Trepar muros"]},{"id":2417,"name":"Iron Man test - aandino - 87653","alterego":"Tony Stark aandino","description":"Genius billionaire - aandino","powers":["Armor","Flight","unity","c#"]},{"id":2418,"name":"Iron Man test - aandino - 70472","alterego":"Tony Stark aandino","description":"Genius billionaire - aandino","powers":["Armor","Flight","unity","c#"]},{"id":2419,"name":"av!@#$%^&*()_+|~=`{}[]:\";'<>?,./","alterego":"Tony Stark","description":"Prueba caracteres especiales","powers":["Armor"]},{"id":2420,"name":"Joccasti_01'; DROP TABLE users;--","alterego":"Tony Stark","description":"Intento de inyección SQL","powers":["Armor"]},{"id":2421,"name":"Iron Man8711","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2422,"name":"Spider Man","alterego":"Peter Parker","description":"Friendly neighborhood","powers":["Spider sense","Wall climbing"]},{"id":2423,"name":"Iron Man Infernal Karate -7c82df2c-3a50-4fcc-916d-3eac08a15c38","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2424,"name":"Iron Man Infernal Karate -bab85f99-2720-42e0-8919-61527ad5fe38","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2425,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":2427,"name":"Spider-Man-2a76ffd9-ab75-441c-b40a-17051680e952","alterego":"Peter Parker","description":"Friendly neighborhood Spider-Man","powers":["Wall-crawling","Spider-sense"]},{"id":2428,"name":"Iron Manito","alterego":"Tony Starkito","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2429,"name":"milmoral10","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2430,"name":"Thor Man 090a6a","alterego":"All jsi","description":"Superpower","powers":["Teletransportacion","Jugar futbol"]},{"id":2431,"name":"FrankBernal1234","alterego":"Peter Parker","description":"Superhéroe arácnido de Marvel","powers":["Agilidad","Sentido arácnido","Trepar muros"]},{"id":2433,"name":"Iron Man871124","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2435,"name":"milmoral11","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2437,"name":"coSDIsAvFg","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2438,"name":"Iron Man 456456","alterego":"Tony Stark","description":"Genio, millonario, playboy, filántropo","powers":["Armadura","Inteligencia"]},{"id":2439,"name":"Iron Man Updated","alterego":"Tony Stark","description":"Updated description Jose","powers":["Armor","Flight","Genius"]},{"id":2440,"name":"Silvana Bentacourt v1-1750438924407","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2442,"name":"Hero_43bb0dcf","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2443,"name":"Super Girl - TM 1750438934407","alterego":"Tony Clack Kent","description":"Strong woman","powers":["Armor","Flight"]},{"id":2444,"name":"Personaje actualizado-1750438928173","alterego":"Tony Stark","description":"Genius billionaire test","powers":["Armor","Flight"]},{"id":2445,"name":"Super Girl - TM 1750438935958","alterego":"Tony Clack Kent","description":"Strong woman","powers":["Armor","Flight"]},{"id":2446,"name":"Iron Man Infernal Karate -6df4c393-3098-4b6f-88af-a656136c578b","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2448,"name":"Iron Man Infernal Karate -928e7d10-c20a-4a74-857d-2f1c4241221a","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2449,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":2451,"name":"prueba","alterego":"prueba","description":"Friendly neighborhood hero 3","powers":["Agility3","Spider-Sense3","Wall-Crawling3"]},{"id":2452,"name":"Captain Marvel test21","alterego":"Carol Danvers","description":"Updated description","powers":["Flight","Force"]},{"id":2453,"name":"FrankBernal12345","alterego":"Peter Parker","description":"Superhéroe arácnido de Marvel","powers":["Agilidad","Sentido arácnido","Trepar muros"]},{"id":2456,"name":"HeroeConsulta_070a2ec2-22fc-4d09-9e5a-0b72e1431ff4","alterego":"AlteregoConsulta","description":"Consulta","powers":["Consulta"]},{"id":2457,"name":"Hero_69340d70-fead-412c-924d-bd011269f238","alterego":"Nuevo Alterego","description":"Nuevo personaje","powers":["Poder1"]},{"id":2458,"name":"Hero_1bddc37e-e58a-4c7a-ba00-a2903766c092","alterego":"Otro","description":"Otro","powers":["Poder2"]},{"id":2459,"name":"HeroeActualizado","alterego":"AlteregoActualizado","description":"Actualizado","powers":["PoderActualizado"]},{"id":2460,"name":"Iron Fist","alterego":"Danny Rand","description":"Embodies the power of Shou Lao","powers":["Glogin fist","Strenght"]},{"id":2463,"name":"CohetePlus27","alterego":"Cohete Plus","description":"Cohetito Plus","powers":["Armors","Flight"]},{"id":2464,"name":"FrankBernal123456","alterego":"Peter Parker","description":"Superhéroe arácnido de Marvel","powers":["Agilidad","Sentido arácnido","Trepar muros"]},{"id":2466,"name":"Spider-Man-2afbc72d-dba4-48d0-a9d6-baaa7ac216d6","alterego":"Peter Parker","description":"Friendly neighborhood Spider-Man","powers":["Wall-crawling","Spider-sense"]},{"id":2467,"name":"Doctor Panther e54f52","alterego":"All jsi","description":"Superpower","powers":["Teletransportacion","Jugar futbol"]},{"id":2468,"name":"Super Girl - TM 1750439038083","alterego":"Tony Clack Kent","description":"Strong woman","powers":["Armor","Flight"]},{"id":2469,"name":"Iron Man - 67aba6b8","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2470,"name":"Super Girl - TM 1750439040250","alterego":"Tony Clack Kent","description":"Strong woman","powers":["Armor","Flight"]},{"id":2471,"name":"Iron Man - 02121152","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2473,"name":"Captain Marvel test22","alterego":"Carol Danvers","description":"Updated description","powers":["Flight","Force"]},{"id":2474,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":2476,"name":"Iron Man MK 32126","alterego":"Tony Stark MK 10638","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2479,"name":"Iron Man - 05aa794b","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2480,"name":"Iron Man - 55875907","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2481,"name":"Super Rein 64793abe-cf9c-4cf3-be35-2a473f89432f","alterego":"Rein","description":"Genius billionaire Pro Tekken Player","powers":["Armor","Flight"]},{"id":2483,"name":"Super Rein afd56e0b-d2ce-4551-92b0-0b75f956be96","alterego":"Rein","description":"Genius billionaire Pro Tekken Player","powers":["Armor","Flight"]},{"id":2484,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":2485,"name":"Spider-Man 126","alterego":"Peter Parker","description":"El amigable vecino Spider-Man","powers":["Sentido arácnido","Trepar paredes","Lanzar telarañas"]},{"id":2487,"name":"Iron Man 01b63a2d-e5c7-4977-a33c-40b4124d4752","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2488,"name":"Iron Man 3d9a75e9-c832-4f75-a4bb-ce488ba93e38","alterego":"Otro","description":"Otro","powers":["Armor"]},{"id":2490,"name":"Hero_6a8a06e6","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2491,"name":"Nombre-16452a6b-d525-498d-8671-552dc8dc3d51","alterego":"Bruce Wayne","description":"the Dark Knight","powers":["Money","Investment","Martial Arts"]},{"id":2492,"name":"prueba1","alterego":"prueba1","description":"Friendly neighborhood hero 3","powers":["Agility3","Spider-Sense3","Wall-Crawling3"]},{"id":2494,"name":"Iron Man - e3d2a234","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2495,"name":"BatMans 2026","alterego":"Bruce Wayne","description":"the Dark Knight in Gotham City","powers":["Money","Investment","Martial Arts","Detective Skills","Gadgets"]},{"id":2497,"name":"Iron Man test - aandino - 74597","alterego":"Tony Stark aandino","description":"Genius billionaire - aandino","powers":["Armor","Flight","unity","c#"]},{"id":2498,"name":"CohetePlus28","alterego":"Cohete Plus","description":"Cohetito Plus","powers":["Armors","Flight"]},{"id":2499,"name":"Iron Man test - aandino - 32288","alterego":"Tony Stark aandino","description":"Genius billionaire - aandino","powers":["Armor","Flight","unity","c#"]},{"id":2500,"name":"Iron Man 319","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2501,"name":"Iron Man 188","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2502,"name":"Iron Man 150","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2503,"name":"Iron Man 376","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2504,"name":"nombre","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":2505,"name":"Iron Man 841","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2506,"name":"FrankBernal12345678","alterego":"Peter Parker","description":"Superhéroe arácnido de Marvel","powers":["Agilidad","Sentido arácnido","Trepar muros"]},{"id":2509,"name":"Iron Man 251","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2510,"name":"Iron Man 399","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2511,"name":"Iron Man 212","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2512,"name":"Iron Man 227","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2513,"name":"Iron Man 819","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2514,"name":"Iron Man 915","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2516,"name":"Iron Man MK 83497","alterego":"Tony Stark MK 48654","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2519,"name":"Iron Man - 1b4f876a","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2520,"name":"Super Rein 41383588-03d0-4556-aa19-3b09348228cb","alterego":"Rein","description":"Genius billionaire Pro Tekken Player","powers":["Armor","Flight"]},{"id":2521,"name":"gCSNOLiEbl","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2522,"name":"Iron Man Updated","alterego":"Tony Stark","description":"Updated description Jose","powers":["Armor","Flight","Genius"]},{"id":2525,"name":"Eduardo Shigui","alterego":"Edu","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2526,"name":"Super Rein 3865aaa5-45ac-4799-add8-707d0da95f0e","alterego":"Rein","description":"Genius billionaire Pro Tekken Player","powers":["Armor","Flight"]},{"id":2527,"name":"Iron Man geod9","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2528,"name":"Iron Man","alterego":"Tony Stark","description":"Updated description","powers":["Armor","Flight"]},{"id":2530,"name":"milmoral8","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2531,"name":"Silvana Bentacourt v1-1750439180895","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2533,"name":"becarjal","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2534,"name":"Personaje actualizado-1750439184699","alterego":"Tony Stark","description":"Genius billionaire test","powers":["Armor","Flight"]},{"id":2535,"name":"Iron Man 61f90581-b881-4472-bf30-870d22dc6f43","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2537,"name":"Iron Man 313c244d-edfa-456e-a44c-0696b21b2a09","alterego":"Otro","description":"Otro","powers":["Armor"]},{"id":2539,"name":"Iron Man - 8f426e80","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2540,"name":"Iron Man 222287","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2541,"name":"tnHwEqdJgf","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2542,"name":"Scarlet America 1de22c","alterego":"All jsi","description":"Superpower","powers":["Teletransportacion","Jugar futbol"]},{"id":2543,"name":"Iron Man Updated","alterego":"Tony Stark","description":"Updated description Jose","powers":["Armor","Flight","Genius"]},{"id":2546,"name":"Thor Woman 03d7eb","alterego":"All jsi","description":"Superpower","powers":["Teletransportacion","Jugar futbol"]},{"id":2547,"name":"jzapata_1750439256899","alterego":"Jhonny Zapata","description":"Genius informatician and hacker","powers":["Hacking","Programming","Cybersecurity"]},{"id":2548,"name":"Gaia","alterego":"Gaia Zapata","description":"Genius informatician and hacker","powers":["Hacking","Programming","Cybersecurity"]},{"id":2549,"name":"CohetePlus33","alterego":"Cohete Plus","description":"Cohetito Plus","powers":["Armors","Flight"]},{"id":2551,"name":"Carlos","alterego":"Carlos","description":"Genius billionaire","powers":["Inteligencia","Sueño"]},{"id":2552,"name":"Iron Man - 35b4aa5c","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2553,"name":"Thor Strange 2d255f","alterego":"All jsi","description":"Superpower","powers":["Teletransportacion","Jugar futbol"]},{"id":2554,"name":"6fe2e8ef-91b7-4d60-b459-8db3d35249ea","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2555,"name":"Iron Man 2222287","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2556,"name":"Captain America2","alterego":"Steve Rogers2","description":"Super Soldier2","powers":["Shield2","Strength2"]},{"id":2557,"name":"Jose Antonio Alvear2","alterego":"Jose Man","description":"Developer billionaire","powers":["Java","Angular"]},{"id":2559,"name":"Iron Man - d5e6e0b5","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2560,"name":"CohetePlus40","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2561,"name":"Laly","alterego":"Gladys Ronquillo","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2562,"name":"CONDORITO","alterego":"mz","description":"MZ","powers":["fury","EAT"]},{"id":2563,"name":"Iron Man Test Chapter Validation 1588","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]},{"id":2564,"name":"Ariel Arnedo","alterego":"AArnedo","description":"Developer","powers":["Java"]}]

12:08:40.633 [Test worker] DEBUG org.thymeleaf.TemplateEngine -- [THYMELEAF] INITIALIZING TEMPLATE ENGINE
12:08:40.638 [Test worker] DEBUG org.thymeleaf.TemplateEngine.CONFIG -- Initializing Thymeleaf Template engine configuration...
[THYMELEAF] TEMPLATE ENGINE CONFIGURATION:
[THYMELEAF] * Thymeleaf version: 3.1.2.RELEASE (built 2023-07-30T19:25:50+0000)
[THYMELEAF] * Cache Manager implementation: org.thymeleaf.cache.StandardCacheManager
[THYMELEAF] * Template resolvers:
[THYMELEAF]     * [1] com.intuit.karate.template.ResourceHtmlTemplateResolver
[THYMELEAF] * Message resolvers:
[THYMELEAF]     * org.thymeleaf.messageresolver.StandardMessageResolver
[THYMELEAF] * Link builders:
[THYMELEAF]     * org.thymeleaf.linkbuilder.StandardLinkBuilder
[THYMELEAF] * Dialect [1 of 2]: Standard (com.intuit.karate.template.KarateStandardDialect)
[THYMELEAF]     * Prefix: "th"
[THYMELEAF]     * Processors for Template Mode: HTML
[THYMELEAF]         * Element Tag Processors by [matching element and attribute name] [precedence]:
[THYMELEAF]             * [* {th:include,data-th-include}] [100]: org.thymeleaf.standard.processor.StandardIncludeTagProcessor
[THYMELEAF]             * [* {th:insert,data-th-insert}] [100]: org.thymeleaf.standard.processor.StandardInsertTagProcessor
[THYMELEAF]             * [* {th:replace,data-th-replace}] [100]: org.thymeleaf.standard.processor.StandardReplaceTagProcessor
[THYMELEAF]             * [* {th:each,data-th-each}] [200]: com.intuit.karate.template.KarateEachTagProcessor
[THYMELEAF]             * [* {th:switch,data-th-switch}] [250]: org.thymeleaf.standard.processor.StandardSwitchTagProcessor
[THYMELEAF]             * [* {th:case,data-th-case}] [275]: org.thymeleaf.standard.processor.StandardCaseTagProcessor
[THYMELEAF]             * [* {th:if,data-th-if}] [300]: org.thymeleaf.standard.processor.StandardIfTagProcessor
[THYMELEAF]             * [* {th:unless,data-th-unless}] [400]: org.thymeleaf.standard.processor.StandardUnlessTagProcessor
[THYMELEAF]             * [* {th:object,data-th-object}] [500]: org.thymeleaf.standard.processor.StandardObjectTagProcessor
[THYMELEAF]             * [* {th:with,data-th-with}] [600]: com.intuit.karate.template.KarateWithTagProcessor
[THYMELEAF]             * [* {th:attr,data-th-attr}] [700]: com.intuit.karate.template.KarateAttributeTagProcessor.KarateAttrTagProcessor
[THYMELEAF]             * [* {th:attrappend,data-th-attrappend}] [900]: com.intuit.karate.template.KarateAttributeTagProcessor.KarateAttrappendTagProcessor
[THYMELEAF]             * [* {th:attrprepend,data-th-attrprepend}] [900]: com.intuit.karate.template.KarateAttributeTagProcessor.KarateAttrprependTagProcessor
[THYMELEAF]             * [* {th:alt-title,data-th-alt-title}] [990]: org.thymeleaf.standard.processor.StandardAltTitleTagProcessor
[THYMELEAF]             * [* {th:lang-xmllang,data-th-lang-xmllang}] [990]: org.thymeleaf.standard.processor.StandardLangXmlLangTagProcessor
[THYMELEAF]             * [* {th:action,data-th-action}] [1000]: org.thymeleaf.standard.processor.StandardActionTagProcessor
[THYMELEAF]             * [* {th:nowrap,data-th-nowrap}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:ismap,data-th-ismap}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:novalidate,data-th-novalidate}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:disabled,data-th-disabled}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:seamless,data-th-seamless}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:controls,data-th-controls}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:hidden,data-th-hidden}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:default,data-th-default}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:readonly,data-th-readonly}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:checked,data-th-checked}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:async,data-th-async}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:multiple,data-th-multiple}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:required,data-th-required}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:selected,data-th-selected}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:autoplay,data-th-autoplay}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:loop,data-th-loop}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:reversed,data-th-reversed}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:defer,data-th-defer}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:pubdate,data-th-pubdate}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:open,data-th-open}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:autofocus,data-th-autofocus}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:declare,data-th-declare}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:scoped,data-th-scoped}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:formnovalidate,data-th-formnovalidate}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:ondragstart,data-th-ondragstart}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ondurationchange,data-th-ondurationchange}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onpause,data-th-onpause}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onshow,data-th-onshow}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onended,data-th-onended}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onformchange,data-th-onformchange}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onplay,data-th-onplay}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onsuspend,data-th-onsuspend}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onpopstate,data-th-onpopstate}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onresize,data-th-onresize}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ondrag,data-th-ondrag}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onwaiting,data-th-onwaiting}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ondragleave,data-th-ondragleave}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onvolumechange,data-th-onvolumechange}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onmouseout,data-th-onmouseout}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onscroll,data-th-onscroll}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onratechange,data-th-onratechange}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onafterprint,data-th-onafterprint}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onkeypress,data-th-onkeypress}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onsubmit,data-th-onsubmit}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:oncanplaythrough,data-th-oncanplaythrough}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:oncanplay,data-th-oncanplay}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onmousewheel,data-th-onmousewheel}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onkeydown,data-th-onkeydown}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ondragenter,data-th-ondragenter}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onreset,data-th-onreset}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onblur,data-th-onblur}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ondragend,data-th-ondragend}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onclick,data-th-onclick}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ondrop,data-th-ondrop}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onmouseover,data-th-onmouseover}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onunload,data-th-onunload}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onstorage,data-th-onstorage}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onbeforeprint,data-th-onbeforeprint}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onemptied,data-th-onemptied}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onundo,data-th-onundo}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onhashchange,data-th-onhashchange}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onselect,data-th-onselect}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onseeking,data-th-onseeking}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onloadstart,data-th-onloadstart}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:oncontextmenu,data-th-oncontextmenu}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onmousemove,data-th-onmousemove}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onseeked,data-th-onseeked}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ontimeupdate,data-th-ontimeupdate}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onplaying,data-th-onplaying}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onabort,data-th-onabort}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:oninput,data-th-oninput}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onerror,data-th-onerror}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onload,data-th-onload}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onloadeddata,data-th-onloadeddata}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onstalled,data-th-onstalled}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onforminput,data-th-onforminput}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onoffline,data-th-onoffline}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onmouseup,data-th-onmouseup}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ondblclick,data-th-ondblclick}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onredo,data-th-onredo}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ondragover,data-th-ondragover}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:oninvalid,data-th-oninvalid}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onbeforeunload,data-th-onbeforeunload}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onchange,data-th-onchange}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ononline,data-th-ononline}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onmessage,data-th-onmessage}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onreadystatechange,data-th-onreadystatechange}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onkeyup,data-th-onkeyup}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onloadedmetadata,data-th-onloadedmetadata}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onfocus,data-th-onfocus}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onmousedown,data-th-onmousedown}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onprogress,data-th-onprogress}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:href,data-th-href}] [1000]: org.thymeleaf.standard.processor.StandardHrefTagProcessor
[THYMELEAF]             * [* {th:inline,data-th-inline}] [1000]: org.thymeleaf.standard.processor.StandardInlineHTMLTagProcessor
[THYMELEAF]             * [* {th:method,data-th-method}] [1000]: org.thymeleaf.standard.processor.StandardMethodTagProcessor
[THYMELEAF]             * [* {th:type,data-th-type}] [1000]: org.thymeleaf.standard.processor.StandardNonRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:name,data-th-name}] [1000]: org.thymeleaf.standard.processor.StandardNonRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:pattern,data-th-pattern}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:width,data-th-width}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:alt,data-th-alt}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:max,data-th-max}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:data,data-th-data}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:title,data-th-title}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:formenctype,data-th-formenctype}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:scrolling,data-th-scrolling}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:border,data-th-border}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:span,data-th-span}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:contenteditable,data-th-contenteditable}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:vspace,data-th-vspace}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:datetime,data-th-datetime}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:compact,data-th-compact}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:rev,data-th-rev}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:draggable,data-th-draggable}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:height,data-th-height}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:sizes,data-th-sizes}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:step,data-th-step}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:codebase,data-th-codebase}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:media,data-th-media}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:min,data-th-min}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:class,data-th-class}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:summary,data-th-summary}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:charset,data-th-charset}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:icon,data-th-icon}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:manifest,data-th-manifest}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:label,data-th-label}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:http-equiv,data-th-http-equiv}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:audio,data-th-audio}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:valuetype,data-th-valuetype}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:accept-charset,data-th-accept-charset}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:align,data-th-align}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:background,data-th-background}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:classid,data-th-classid}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:colspan,data-th-colspan}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:enctype,data-th-enctype}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:accesskey,data-th-accesskey}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:dropzone,data-th-dropzone}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:usemap,data-th-usemap}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:optimum,data-th-optimum}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:placeholder,data-th-placeholder}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:cellspacing,data-th-cellspacing}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:challenge,data-th-challenge}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:dir,data-th-dir}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:for,data-th-for}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:marginwidth,data-th-marginwidth}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:low,data-th-low}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:lang,data-th-lang}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:style,data-th-style}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:radiogroup,data-th-radiogroup}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:kind,data-th-kind}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:size,data-th-size}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:poster,data-th-poster}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:standby,data-th-standby}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:rowspan,data-th-rowspan}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:archive,data-th-archive}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:accept,data-th-accept}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:headers,data-th-headers}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:list,data-th-list}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:start,data-th-start}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:id,data-th-id}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:formmethod,data-th-formmethod}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:wrap,data-th-wrap}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:content,data-th-content}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:form,data-th-form}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:preload,data-th-preload}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:longdesc,data-th-longdesc}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:scheme,data-th-scheme}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:target,data-th-target}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:rel,data-th-rel}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:hspace,data-th-hspace}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:contextmenu,data-th-contextmenu}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:frameborder,data-th-frameborder}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:bgcolor,data-th-bgcolor}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:spellcheck,data-th-spellcheck}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:srclang,data-th-srclang}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:marginheight,data-th-marginheight}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:maxlength,data-th-maxlength}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:high,data-th-high}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:scope,data-th-scope}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:cite,data-th-cite}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:hreflang,data-th-hreflang}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:cols,data-th-cols}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:formtarget,data-th-formtarget}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:keytype,data-th-keytype}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:cellpadding,data-th-cellpadding}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:rules,data-th-rules}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:sandbox,data-th-sandbox}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:formaction,data-th-formaction}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:codetype,data-th-codetype}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:rows,data-th-rows}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:frame,data-th-frame}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:autocomplete,data-th-autocomplete}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:tabindex,data-th-tabindex}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:axis,data-th-axis}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:abbr,data-th-abbr}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:src,data-th-src}] [1000]: org.thymeleaf.standard.processor.StandardSrcTagProcessor
[THYMELEAF]             * [* {th:value,data-th-value}] [1000]: org.thymeleaf.standard.processor.StandardValueTagProcessor
[THYMELEAF]             * [* {th:xmlbase,data-th-xmlbase}] [1000]: org.thymeleaf.standard.processor.StandardXmlBaseTagProcessor
[THYMELEAF]             * [* {th:xmllang,data-th-xmllang}] [1000]: org.thymeleaf.standard.processor.StandardXmlLangTagProcessor
[THYMELEAF]             * [* {xmlns:th}] [1000]: org.thymeleaf.standard.processor.StandardXmlNsTagProcessor
[THYMELEAF]             * [* {th:xmlspace,data-th-xmlspace}] [1000]: org.thymeleaf.standard.processor.StandardXmlSpaceTagProcessor
[THYMELEAF]             * [* {th:classappend,data-th-classappend}] [1100]: org.thymeleaf.standard.processor.StandardClassappendTagProcessor
[THYMELEAF]             * [* {th:styleappend,data-th-styleappend}] [1100]: org.thymeleaf.standard.processor.StandardStyleappendTagProcessor
[THYMELEAF]             * [* {th:text,data-th-text}] [1300]: org.thymeleaf.standard.processor.StandardTextTagProcessor
[THYMELEAF]             * [* {th:utext,data-th-utext}] [1400]: org.thymeleaf.standard.processor.StandardUtextTagProcessor
[THYMELEAF]             * [* {th:fragment,data-th-fragment}] [1500]: org.thymeleaf.standard.processor.StandardFragmentTagProcessor
[THYMELEAF]             * [* {th:assert,data-th-assert}] [1550]: org.thymeleaf.standard.processor.StandardAssertTagProcessor
[THYMELEAF]             * [* {th:remove,data-th-remove}] [1600]: org.thymeleaf.standard.processor.StandardRemoveTagProcessor
[THYMELEAF]             * [* {th:ref,data-th-ref}] [10000]: org.thymeleaf.standard.processor.StandardRefAttributeTagProcessor
[THYMELEAF]             * [{th:block,th-block} *] [100000]: org.thymeleaf.standard.processor.StandardBlockTagProcessor
[THYMELEAF]             * [* th:*] [2147483647]: org.thymeleaf.standard.processor.StandardDefaultAttributesTagProcessor
[THYMELEAF]         * Text Processors by [precedence]:
[THYMELEAF]             * [1000]: org.thymeleaf.standard.processor.StandardInliningTextProcessor
[THYMELEAF]         * DOCTYPE Processors by [precedence]:
[THYMELEAF]             * [1000]: org.thymeleaf.standard.processor.StandardTranslationDocTypeProcessor
[THYMELEAF]         * CDATA Section Processors by [precedence]:
[THYMELEAF]             * [1000]: org.thymeleaf.standard.processor.StandardInliningCDATASectionProcessor
[THYMELEAF]         * Comment Processors by [precedence]:
[THYMELEAF]             * [1000]: org.thymeleaf.standard.processor.StandardInliningCommentProcessor
[THYMELEAF]             * [1100]: org.thymeleaf.standard.processor.StandardConditionalCommentProcessor
[THYMELEAF]     * Processors for Template Mode: XML
[THYMELEAF]         * Element Tag Processors by [matching element and attribute name] [precedence]:
[THYMELEAF]             * [* {th:include}] [100]: org.thymeleaf.standard.processor.StandardIncludeTagProcessor
[THYMELEAF]             * [* {th:insert}] [100]: org.thymeleaf.standard.processor.StandardInsertTagProcessor
[THYMELEAF]             * [* {th:replace}] [100]: org.thymeleaf.standard.processor.StandardReplaceTagProcessor
[THYMELEAF]             * [* {th:each}] [200]: com.intuit.karate.template.KarateEachTagProcessor
[THYMELEAF]             * [* {th:switch}] [250]: org.thymeleaf.standard.processor.StandardSwitchTagProcessor
[THYMELEAF]             * [* {th:case}] [275]: org.thymeleaf.standard.processor.StandardCaseTagProcessor
[THYMELEAF]             * [* {th:if}] [300]: org.thymeleaf.standard.processor.StandardIfTagProcessor
[THYMELEAF]             * [* {th:unless}] [400]: org.thymeleaf.standard.processor.StandardUnlessTagProcessor
[THYMELEAF]             * [* {th:object}] [500]: org.thymeleaf.standard.processor.StandardObjectTagProcessor
[THYMELEAF]             * [* {th:with}] [600]: com.intuit.karate.template.KarateWithTagProcessor
[THYMELEAF]             * [* {th:attr}] [700]: com.intuit.karate.template.KarateAttributeTagProcessor.KarateAttrTagProcessor
[THYMELEAF]             * [* {th:attrappend}] [900]: com.intuit.karate.template.KarateAttributeTagProcessor.KarateAttrappendTagProcessor
[THYMELEAF]             * [* {th:attrprepend}] [900]: com.intuit.karate.template.KarateAttributeTagProcessor.KarateAttrprependTagProcessor
[THYMELEAF]             * [* {th:inline}] [1000]: org.thymeleaf.standard.processor.StandardInlineXMLTagProcessor
[THYMELEAF]             * [* {xmlns:th}] [1000]: org.thymeleaf.standard.processor.StandardXmlNsTagProcessor
[THYMELEAF]             * [* {th:text}] [1300]: org.thymeleaf.standard.processor.StandardTextTagProcessor
[THYMELEAF]             * [* {th:utext}] [1400]: org.thymeleaf.standard.processor.StandardUtextTagProcessor
[THYMELEAF]             * [* {th:fragment}] [1500]: org.thymeleaf.standard.processor.StandardFragmentTagProcessor
[THYMELEAF]             * [* {th:assert}] [1550]: org.thymeleaf.standard.processor.StandardAssertTagProcessor
[THYMELEAF]             * [* {th:remove}] [1600]: org.thymeleaf.standard.processor.StandardRemoveTagProcessor
[THYMELEAF]             * [* {th:ref}] [10000]: org.thymeleaf.standard.processor.StandardRefAttributeTagProcessor
[THYMELEAF]             * [{th:block} *] [100000]: org.thymeleaf.standard.processor.StandardBlockTagProcessor
[THYMELEAF]             * [* th:*] [2147483647]: org.thymeleaf.standard.processor.StandardDefaultAttributesTagProcessor
[THYMELEAF]         * Text Processors by [precedence]:
[THYMELEAF]             * [1000]: org.thymeleaf.standard.processor.StandardInliningTextProcessor
[THYMELEAF]         * CDATA Section Processors by [precedence]:
[THYMELEAF]             * [1000]: org.thymeleaf.standard.processor.StandardInliningCDATASectionProcessor
[THYMELEAF]         * Comment Processors by [precedence]:
[THYMELEAF]             * [1000]: org.thymeleaf.standard.processor.StandardInliningCommentProcessor
[THYMELEAF]     * Processors for Template Mode: TEXT
[THYMELEAF]         * Element Tag Processors by [matching element and attribute name] [precedence]:
[THYMELEAF]             * [* {th:insert}] [100]: org.thymeleaf.standard.processor.StandardInsertTagProcessor
[THYMELEAF]             * [* {th:replace}] [100]: org.thymeleaf.standard.processor.StandardReplaceTagProcessor
[THYMELEAF]             * [* {th:each}] [200]: com.intuit.karate.template.KarateEachTagProcessor
[THYMELEAF]             * [* {th:switch}] [250]: org.thymeleaf.standard.processor.StandardSwitchTagProcessor
[THYMELEAF]             * [* {th:case}] [275]: org.thymeleaf.standard.processor.StandardCaseTagProcessor
[THYMELEAF]             * [* {th:if}] [300]: org.thymeleaf.standard.processor.StandardIfTagProcessor
[THYMELEAF]             * [* {th:unless}] [400]: org.thymeleaf.standard.processor.StandardUnlessTagProcessor
[THYMELEAF]             * [* {th:object}] [500]: org.thymeleaf.standard.processor.StandardObjectTagProcessor
[THYMELEAF]             * [* {th:with}] [600]: com.intuit.karate.template.KarateWithTagProcessor
[THYMELEAF]             * [* {th:inline}] [1000]: org.thymeleaf.standard.processor.StandardInlineTextualTagProcessor
[THYMELEAF]             * [* {th:text}] [1300]: org.thymeleaf.standard.processor.StandardTextTagProcessor
[THYMELEAF]             * [* {th:utext}] [1400]: org.thymeleaf.standard.processor.StandardUtextTagProcessor
[THYMELEAF]             * [* {th:assert}] [1550]: org.thymeleaf.standard.processor.StandardAssertTagProcessor
[THYMELEAF]             * [* {th:remove}] [1600]: org.thymeleaf.standard.processor.StandardRemoveTagProcessor
[THYMELEAF]             * [{th:block} *] [100000]: org.thymeleaf.standard.processor.StandardBlockTagProcessor
[THYMELEAF]             * [* 100000] [org.thymeleaf.standard.processor.StandardBlockTagProcessor]: {}
[THYMELEAF]         * Text Processors by [precedence]:
[THYMELEAF]             * [1000]: org.thymeleaf.standard.processor.StandardInliningTextProcessor
[THYMELEAF]     * Processors for Template Mode: JAVASCRIPT
[THYMELEAF]         * Element Tag Processors by [matching element and attribute name] [precedence]:
[THYMELEAF]             * [* {th:insert}] [100]: org.thymeleaf.standard.processor.StandardInsertTagProcessor
[THYMELEAF]             * [* {th:replace}] [100]: org.thymeleaf.standard.processor.StandardReplaceTagProcessor
[THYMELEAF]             * [* {th:each}] [200]: com.intuit.karate.template.KarateEachTagProcessor
[THYMELEAF]             * [* {th:switch}] [250]: org.thymeleaf.standard.processor.StandardSwitchTagProcessor
[THYMELEAF]             * [* {th:case}] [275]: org.thymeleaf.standard.processor.StandardCaseTagProcessor
[THYMELEAF]             * [* {th:if}] [300]: org.thymeleaf.standard.processor.StandardIfTagProcessor
[THYMELEAF]             * [* {th:unless}] [400]: org.thymeleaf.standard.processor.StandardUnlessTagProcessor
[THYMELEAF]             * [* {th:object}] [500]: org.thymeleaf.standard.processor.StandardObjectTagProcessor
[THYMELEAF]             * [* {th:with}] [600]: com.intuit.karate.template.KarateWithTagProcessor
[THYMELEAF]             * [* {th:inline}] [1000]: org.thymeleaf.standard.processor.StandardInlineTextualTagProcessor
[THYMELEAF]             * [* {th:text}] [1300]: org.thymeleaf.standard.processor.StandardTextTagProcessor
[THYMELEAF]             * [* {th:utext}] [1400]: org.thymeleaf.standard.processor.StandardUtextTagProcessor
[THYMELEAF]             * [* {th:assert}] [1550]: org.thymeleaf.standard.processor.StandardAssertTagProcessor
[THYMELEAF]             * [* {th:remove}] [1600]: org.thymeleaf.standard.processor.StandardRemoveTagProcessor
[THYMELEAF]             * [{th:block} *] [100000]: org.thymeleaf.standard.processor.StandardBlockTagProcessor
[THYMELEAF]             * [* 100000] [org.thymeleaf.standard.processor.StandardBlockTagProcessor]: {}
[THYMELEAF]         * Text Processors by [precedence]:
[THYMELEAF]             * [1000]: org.thymeleaf.standard.processor.StandardInliningTextProcessor
[THYMELEAF]     * Processors for Template Mode: CSS
[THYMELEAF]         * Element Tag Processors by [matching element and attribute name] [precedence]:
[THYMELEAF]             * [* {th:insert}] [100]: org.thymeleaf.standard.processor.StandardInsertTagProcessor
[THYMELEAF]             * [* {th:replace}] [100]: org.thymeleaf.standard.processor.StandardReplaceTagProcessor
[THYMELEAF]             * [* {th:each}] [200]: com.intuit.karate.template.KarateEachTagProcessor
[THYMELEAF]             * [* {th:switch}] [250]: org.thymeleaf.standard.processor.StandardSwitchTagProcessor
[THYMELEAF]             * [* {th:case}] [275]: org.thymeleaf.standard.processor.StandardCaseTagProcessor
[THYMELEAF]             * [* {th:if}] [300]: org.thymeleaf.standard.processor.StandardIfTagProcessor
[THYMELEAF]             * [* {th:unless}] [400]: org.thymeleaf.standard.processor.StandardUnlessTagProcessor
[THYMELEAF]             * [* {th:object}] [500]: org.thymeleaf.standard.processor.StandardObjectTagProcessor
[THYMELEAF]             * [* {th:with}] [600]: com.intuit.karate.template.KarateWithTagProcessor
[THYMELEAF]             * [* {th:inline}] [1000]: org.thymeleaf.standard.processor.StandardInlineTextualTagProcessor
[THYMELEAF]             * [* {th:text}] [1300]: org.thymeleaf.standard.processor.StandardTextTagProcessor
[THYMELEAF]             * [* {th:utext}] [1400]: org.thymeleaf.standard.processor.StandardUtextTagProcessor
[THYMELEAF]             * [* {th:assert}] [1550]: org.thymeleaf.standard.processor.StandardAssertTagProcessor
[THYMELEAF]             * [* {th:remove}] [1600]: org.thymeleaf.standard.processor.StandardRemoveTagProcessor
[THYMELEAF]             * [{th:block} *] [100000]: org.thymeleaf.standard.processor.StandardBlockTagProcessor
[THYMELEAF]             * [* 100000] [org.thymeleaf.standard.processor.StandardBlockTagProcessor]: {}
[THYMELEAF]         * Text Processors by [precedence]:
[THYMELEAF]             * [1000]: org.thymeleaf.standard.processor.StandardInliningTextProcessor
[THYMELEAF]     * Expression Objects:
[THYMELEAF]         * #ctx
[THYMELEAF]         * #root
[THYMELEAF]         * #vars
[THYMELEAF]         * #object
[THYMELEAF]         * #locale
[THYMELEAF]         * #conversions
[THYMELEAF]         * #uris
[THYMELEAF]         * #temporals
[THYMELEAF]         * #calendars
[THYMELEAF]         * #dates
[THYMELEAF]         * #bools
[THYMELEAF]         * #numbers
[THYMELEAF]         * #objects
[THYMELEAF]         * #strings
[THYMELEAF]         * #arrays
[THYMELEAF]         * #lists
[THYMELEAF]         * #sets
[THYMELEAF]         * #maps
[THYMELEAF]         * #aggregates
[THYMELEAF]         * #messages
[THYMELEAF]         * #ids
[THYMELEAF]         * #execInfo
[THYMELEAF]         * #request
[THYMELEAF]         * #response
[THYMELEAF]         * #session
[THYMELEAF]         * #servletContext
[THYMELEAF]     * Execution Attributes:
[THYMELEAF]         * "StandardExpressionParser": com.intuit.karate.template.KarateStandardDialect@49d42faf
[THYMELEAF]         * "StandardJavaScriptSerializer": org.thymeleaf.standard.serializer.StandardJavaScriptSerializer@4c030fe1
[THYMELEAF]         * "StandardCSSSerializer": org.thymeleaf.standard.serializer.StandardCSSSerializer@347123dc
[THYMELEAF]         * "StandardVariableExpressionEvaluator": com.intuit.karate.template.KarateStandardDialect@49d42faf
[THYMELEAF]         * "StandardConversionService": org.thymeleaf.standard.expression.StandardConversionService@52433946
[THYMELEAF] * Dialect [2 of 2]: karate (com.intuit.karate.template.KarateScriptDialect)
[THYMELEAF]     * Prefix: "ka"
[THYMELEAF]     * Processors for Template Mode: HTML
[THYMELEAF]         * Element Tag Processors by [matching element and attribute name] [precedence]:
[THYMELEAF]             * [* {src}] [1000]: com.intuit.karate.template.KaScriptAttrProcessor
[THYMELEAF]         * Element Model Processors by [matching element and attribute name] [precedence]:
[THYMELEAF]             * [{script} {ka:scope,data-ka-scope}] [1000]: com.intuit.karate.template.KaScriptElemProcessor
[THYMELEAF]             * [* {ka:set,data-ka-set}] [1000]: com.intuit.karate.template.KaSetElemProcessor
[THYMELEAF] TEMPLATE ENGINE CONFIGURED OK
12:08:40.638 [Test worker] DEBUG org.thymeleaf.TemplateEngine -- [THYMELEAF] TEMPLATE ENGINE INITIALIZED
---------------------------------------------------------
feature: classpath:features/marvel_characters_api/consultarTodosLosPersonajes.feature
scenarios:  1 | passed:  1 | failed:  0 | time: 0.5565
---------------------------------------------------------

12:08:40.687 [Test worker] DEBUG com.jayway.jsonpath.internal.path.CompiledPath -- Evaluating path: $
12:08:40.687 [Test worker] DEBUG org.apache.http.client.protocol.RequestAddCookies -- CookieSpec selected: karate
12:08:40.688 [Test worker] DEBUG org.apache.http.client.protocol.RequestAuthCache -- Auth cache not set in the context
12:08:40.688 [Test worker] DEBUG com.intuit.karate -- request:
1 > POST http://bp-se-test-cabcd9b246a5.herokuapp.com/testuser/api/characters
1 > Content-Type: application/json; charset=UTF-8
1 > Content-Length: 106
1 > Host: bp-se-test-cabcd9b246a5.herokuapp.com
1 > Connection: Keep-Alive
1 > User-Agent: Apache-HttpClient/4.5.14 (Java/17.0.14)
1 > Accept-Encoding: gzip,deflate
{"name":"Iron Man","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]}

12:08:40.688 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection request: [route: {}->http://bp-se-test-cabcd9b246a5.herokuapp.com:80][total available: 0; route allocated: 0 of 5; total allocated: 0 of 10]
12:08:40.688 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection leased: [id: 5][route: {}->http://bp-se-test-cabcd9b246a5.herokuapp.com:80][total available: 0; route allocated: 1 of 5; total allocated: 1 of 10]
12:08:40.688 [Test worker] DEBUG org.apache.http.impl.execchain.MainClientExec -- Opening connection {}->http://bp-se-test-cabcd9b246a5.herokuapp.com:80
12:08:40.688 [Test worker] DEBUG org.apache.http.impl.conn.DefaultHttpClientConnectionOperator -- Connecting to bp-se-test-cabcd9b246a5.herokuapp.com/52.5.82.174:80
12:08:40.776 [Test worker] DEBUG org.apache.http.impl.conn.DefaultHttpClientConnectionOperator -- Connection established 192.168.100.112:58285<->52.5.82.174:80
12:08:40.776 [Test worker] DEBUG org.apache.http.impl.conn.DefaultManagedHttpClientConnection -- http-outgoing-5: set socket timeout to 30000
12:08:40.776 [Test worker] DEBUG org.apache.http.impl.execchain.MainClientExec -- Executing request POST /testuser/api/characters HTTP/1.1
12:08:40.776 [Test worker] DEBUG org.apache.http.impl.execchain.MainClientExec -- Target auth state: UNCHALLENGED
12:08:40.776 [Test worker] DEBUG org.apache.http.impl.execchain.MainClientExec -- Proxy auth state: UNCHALLENGED
12:08:40.776 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-5 >> POST /testuser/api/characters HTTP/1.1
12:08:40.776 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-5 >> Content-Type: application/json; charset=UTF-8
12:08:40.776 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-5 >> Content-Length: 106
12:08:40.776 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-5 >> Host: bp-se-test-cabcd9b246a5.herokuapp.com
12:08:40.776 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-5 >> Connection: Keep-Alive
12:08:40.776 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-5 >> User-Agent: Apache-HttpClient/4.5.14 (Java/17.0.14)
12:08:40.776 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-5 >> Accept-Encoding: gzip,deflate
12:08:40.776 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-5 >> "POST /testuser/api/characters HTTP/1.1[\r][\n]"
12:08:40.776 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-5 >> "Content-Type: application/json; charset=UTF-8[\r][\n]"
12:08:40.776 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-5 >> "Content-Length: 106[\r][\n]"
12:08:40.776 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-5 >> "Host: bp-se-test-cabcd9b246a5.herokuapp.com[\r][\n]"
12:08:40.776 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-5 >> "Connection: Keep-Alive[\r][\n]"
12:08:40.776 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-5 >> "User-Agent: Apache-HttpClient/4.5.14 (Java/17.0.14)[\r][\n]"
12:08:40.776 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-5 >> "Accept-Encoding: gzip,deflate[\r][\n]"
12:08:40.776 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-5 >> "[\r][\n]"
12:08:40.776 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-5 >> "{"name":"Iron Man","alterego":"Tony Stark","description":"Genius billionaire","powers":["Armor","Flight"]}"
12:08:40.884 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-5 << "HTTP/1.1 400 [\r][\n]"
12:08:40.884 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-5 << "Server: Cowboy[\r][\n]"
12:08:40.884 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-5 << "Report-To: {"group":"heroku-nel","max_age":3600,"endpoints":[{"url":"https://nel.heroku.com/reports?ts=1750439321&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=%2FXaCgCT%2FKjZ1T6Ajqx8a%2BjhwoQExhVw4w7DJmbisKzM%3D"}]}[\r][\n]"
12:08:40.884 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-5 << "Reporting-Endpoints: heroku-nel=https://nel.heroku.com/reports?ts=1750439321&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=%2FXaCgCT%2FKjZ1T6Ajqx8a%2BjhwoQExhVw4w7DJmbisKzM%3D[\r][\n]"
12:08:40.884 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-5 << "Nel: {"report_to":"heroku-nel","max_age":3600,"success_fraction":0.005,"failure_fraction":0.05,"response_headers":["Via"]}[\r][\n]"
12:08:40.884 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-5 << "Connection: keep-alive[\r][\n]"
12:08:40.884 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-5 << "Content-Type: application/json[\r][\n]"
12:08:40.884 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-5 << "Transfer-Encoding: chunked[\r][\n]"
12:08:40.884 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-5 << "Date: Fri, 20 Jun 2025 17:08:41 GMT[\r][\n]"
12:08:40.884 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-5 << "Via: 1.1 vegur[\r][\n]"
12:08:40.884 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-5 << "[\r][\n]"
12:08:40.884 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-5 << "29[\r][\n]"
12:08:40.884 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-5 << "{"error":"Character name already exists"}[\r][\n]"
12:08:40.884 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-5 << HTTP/1.1 400 
12:08:40.884 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-5 << Server: Cowboy
12:08:40.884 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-5 << Report-To: {"group":"heroku-nel","max_age":3600,"endpoints":[{"url":"https://nel.heroku.com/reports?ts=1750439321&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=%2FXaCgCT%2FKjZ1T6Ajqx8a%2BjhwoQExhVw4w7DJmbisKzM%3D"}]}
12:08:40.884 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-5 << Reporting-Endpoints: heroku-nel=https://nel.heroku.com/reports?ts=1750439321&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=%2FXaCgCT%2FKjZ1T6Ajqx8a%2BjhwoQExhVw4w7DJmbisKzM%3D
12:08:40.884 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-5 << Nel: {"report_to":"heroku-nel","max_age":3600,"success_fraction":0.005,"failure_fraction":0.05,"response_headers":["Via"]}
12:08:40.884 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-5 << Connection: keep-alive
12:08:40.884 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-5 << Content-Type: application/json
12:08:40.884 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-5 << Transfer-Encoding: chunked
12:08:40.884 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-5 << Date: Fri, 20 Jun 2025 17:08:41 GMT
12:08:40.884 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-5 << Via: 1.1 vegur
12:08:40.884 [Test worker] DEBUG org.apache.http.impl.execchain.MainClientExec -- Connection can be kept alive indefinitely
12:08:40.885 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-5 << "0[\r][\n]"
12:08:40.885 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-5 << "[\r][\n]"
12:08:40.885 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection [id: 5][route: {}->http://bp-se-test-cabcd9b246a5.herokuapp.com:80] can be kept alive indefinitely
12:08:40.885 [Test worker] DEBUG org.apache.http.impl.conn.DefaultManagedHttpClientConnection -- http-outgoing-5: set socket timeout to 0
12:08:40.885 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection released: [id: 5][route: {}->http://bp-se-test-cabcd9b246a5.herokuapp.com:80][total available: 1; route allocated: 1 of 5; total allocated: 1 of 10]
12:08:40.885 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection manager is shutting down
12:08:40.885 [Test worker] DEBUG org.apache.http.impl.conn.DefaultManagedHttpClientConnection -- http-outgoing-5: Close connection
12:08:40.885 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection manager shut down
12:08:40.885 [Test worker] DEBUG com.intuit.karate -- response time in milliseconds: 197
1 < 400
1 < Server: Cowboy
1 < Report-To: {"group":"heroku-nel","max_age":3600,"endpoints":[{"url":"https://nel.heroku.com/reports?ts=1750439321&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=%2FXaCgCT%2FKjZ1T6Ajqx8a%2BjhwoQExhVw4w7DJmbisKzM%3D"}]}
1 < Reporting-Endpoints: heroku-nel=https://nel.heroku.com/reports?ts=1750439321&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=%2FXaCgCT%2FKjZ1T6Ajqx8a%2BjhwoQExhVw4w7DJmbisKzM%3D
1 < Nel: {"report_to":"heroku-nel","max_age":3600,"success_fraction":0.005,"failure_fraction":0.05,"response_headers":["Via"]}
1 < Connection: keep-alive
1 < Content-Type: application/json
1 < Transfer-Encoding: chunked
1 < Date: Fri, 20 Jun 2025 17:08:41 GMT
1 < Via: 1.1 vegur
{"error":"Character name already exists"}

12:08:40.885 [Test worker] ERROR com.intuit.karate -- classpath:features/marvel_characters_api/crearPersonaje.feature:22
Then status 201
status code was: 400, expected: 201, response time in milliseconds: 197, url: http://bp-se-test-cabcd9b246a5.herokuapp.com/testuser/api/characters, response: 
{"error":"Character name already exists"}
classpath:features/marvel_characters_api/crearPersonaje.feature:22
12:08:40.891 [Test worker] DEBUG com.jayway.jsonpath.internal.path.CompiledPath -- Evaluating path: $
12:08:40.891 [Test worker] DEBUG org.apache.http.client.protocol.RequestAddCookies -- CookieSpec selected: karate
12:08:40.891 [Test worker] DEBUG org.apache.http.client.protocol.RequestAuthCache -- Auth cache not set in the context
12:08:40.891 [Test worker] DEBUG com.intuit.karate -- request:
1 > POST http://bp-se-test-cabcd9b246a5.herokuapp.com/testuser/api/characters
1 > Content-Type: application/json; charset=UTF-8
1 > Content-Length: 77
1 > Host: bp-se-test-cabcd9b246a5.herokuapp.com
1 > Connection: Keep-Alive
1 > User-Agent: Apache-HttpClient/4.5.14 (Java/17.0.14)
1 > Accept-Encoding: gzip,deflate
{"name":"Iron Man","alterego":"Otro","description":"Otro","powers":["Armor"]}

12:08:40.891 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection request: [route: {}->http://bp-se-test-cabcd9b246a5.herokuapp.com:80][total available: 0; route allocated: 0 of 5; total allocated: 0 of 10]
12:08:40.892 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection leased: [id: 6][route: {}->http://bp-se-test-cabcd9b246a5.herokuapp.com:80][total available: 0; route allocated: 1 of 5; total allocated: 1 of 10]
12:08:40.892 [Test worker] DEBUG org.apache.http.impl.execchain.MainClientExec -- Opening connection {}->http://bp-se-test-cabcd9b246a5.herokuapp.com:80
12:08:40.892 [Test worker] DEBUG org.apache.http.impl.conn.DefaultHttpClientConnectionOperator -- Connecting to bp-se-test-cabcd9b246a5.herokuapp.com/52.5.82.174:80
12:08:40.980 [Test worker] DEBUG org.apache.http.impl.conn.DefaultHttpClientConnectionOperator -- Connection established 192.168.100.112:58287<->52.5.82.174:80
12:08:40.980 [Test worker] DEBUG org.apache.http.impl.conn.DefaultManagedHttpClientConnection -- http-outgoing-6: set socket timeout to 30000
12:08:40.980 [Test worker] DEBUG org.apache.http.impl.execchain.MainClientExec -- Executing request POST /testuser/api/characters HTTP/1.1
12:08:40.980 [Test worker] DEBUG org.apache.http.impl.execchain.MainClientExec -- Target auth state: UNCHALLENGED
12:08:40.980 [Test worker] DEBUG org.apache.http.impl.execchain.MainClientExec -- Proxy auth state: UNCHALLENGED
12:08:40.980 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-6 >> POST /testuser/api/characters HTTP/1.1
12:08:40.980 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-6 >> Content-Type: application/json; charset=UTF-8
12:08:40.980 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-6 >> Content-Length: 77
12:08:40.980 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-6 >> Host: bp-se-test-cabcd9b246a5.herokuapp.com
12:08:40.980 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-6 >> Connection: Keep-Alive
12:08:40.980 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-6 >> User-Agent: Apache-HttpClient/4.5.14 (Java/17.0.14)
12:08:40.980 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-6 >> Accept-Encoding: gzip,deflate
12:08:40.980 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-6 >> "POST /testuser/api/characters HTTP/1.1[\r][\n]"
12:08:40.980 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-6 >> "Content-Type: application/json; charset=UTF-8[\r][\n]"
12:08:40.980 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-6 >> "Content-Length: 77[\r][\n]"
12:08:40.980 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-6 >> "Host: bp-se-test-cabcd9b246a5.herokuapp.com[\r][\n]"
12:08:40.980 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-6 >> "Connection: Keep-Alive[\r][\n]"
12:08:40.980 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-6 >> "User-Agent: Apache-HttpClient/4.5.14 (Java/17.0.14)[\r][\n]"
12:08:40.980 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-6 >> "Accept-Encoding: gzip,deflate[\r][\n]"
12:08:40.980 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-6 >> "[\r][\n]"
12:08:40.980 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-6 >> "{"name":"Iron Man","alterego":"Otro","description":"Otro","powers":["Armor"]}"
12:08:41.070 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-6 << "HTTP/1.1 400 [\r][\n]"
12:08:41.070 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-6 << "Server: Cowboy[\r][\n]"
12:08:41.070 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-6 << "Report-To: {"group":"heroku-nel","max_age":3600,"endpoints":[{"url":"https://nel.heroku.com/reports?ts=1750439321&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=%2FXaCgCT%2FKjZ1T6Ajqx8a%2BjhwoQExhVw4w7DJmbisKzM%3D"}]}[\r][\n]"
12:08:41.070 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-6 << "Reporting-Endpoints: heroku-nel=https://nel.heroku.com/reports?ts=1750439321&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=%2FXaCgCT%2FKjZ1T6Ajqx8a%2BjhwoQExhVw4w7DJmbisKzM%3D[\r][\n]"
12:08:41.070 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-6 << "Nel: {"report_to":"heroku-nel","max_age":3600,"success_fraction":0.005,"failure_fraction":0.05,"response_headers":["Via"]}[\r][\n]"
12:08:41.070 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-6 << "Connection: keep-alive[\r][\n]"
12:08:41.070 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-6 << "Content-Type: application/json[\r][\n]"
12:08:41.070 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-6 << "Transfer-Encoding: chunked[\r][\n]"
12:08:41.070 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-6 << "Date: Fri, 20 Jun 2025 17:08:41 GMT[\r][\n]"
12:08:41.070 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-6 << "Via: 1.1 vegur[\r][\n]"
12:08:41.070 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-6 << "[\r][\n]"
12:08:41.070 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-6 << "29[\r][\n]"
12:08:41.070 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-6 << "{"error":"Character name already exists"}[\r][\n]"
12:08:41.070 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-6 << "0[\r][\n]"
12:08:41.070 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-6 << "[\r][\n]"
12:08:41.070 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-6 << HTTP/1.1 400 
12:08:41.070 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-6 << Server: Cowboy
12:08:41.070 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-6 << Report-To: {"group":"heroku-nel","max_age":3600,"endpoints":[{"url":"https://nel.heroku.com/reports?ts=1750439321&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=%2FXaCgCT%2FKjZ1T6Ajqx8a%2BjhwoQExhVw4w7DJmbisKzM%3D"}]}
12:08:41.070 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-6 << Reporting-Endpoints: heroku-nel=https://nel.heroku.com/reports?ts=1750439321&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=%2FXaCgCT%2FKjZ1T6Ajqx8a%2BjhwoQExhVw4w7DJmbisKzM%3D
12:08:41.070 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-6 << Nel: {"report_to":"heroku-nel","max_age":3600,"success_fraction":0.005,"failure_fraction":0.05,"response_headers":["Via"]}
12:08:41.070 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-6 << Connection: keep-alive
12:08:41.070 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-6 << Content-Type: application/json
12:08:41.070 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-6 << Transfer-Encoding: chunked
12:08:41.070 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-6 << Date: Fri, 20 Jun 2025 17:08:41 GMT
12:08:41.070 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-6 << Via: 1.1 vegur
12:08:41.071 [Test worker] DEBUG org.apache.http.impl.execchain.MainClientExec -- Connection can be kept alive indefinitely
12:08:41.071 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection [id: 6][route: {}->http://bp-se-test-cabcd9b246a5.herokuapp.com:80] can be kept alive indefinitely
12:08:41.071 [Test worker] DEBUG org.apache.http.impl.conn.DefaultManagedHttpClientConnection -- http-outgoing-6: set socket timeout to 0
12:08:41.071 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection released: [id: 6][route: {}->http://bp-se-test-cabcd9b246a5.herokuapp.com:80][total available: 1; route allocated: 1 of 5; total allocated: 1 of 10]
12:08:41.071 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection manager is shutting down
12:08:41.071 [Test worker] DEBUG org.apache.http.impl.conn.DefaultManagedHttpClientConnection -- http-outgoing-6: Close connection
12:08:41.071 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection manager shut down
12:08:41.071 [Test worker] DEBUG com.intuit.karate -- response time in milliseconds: 180
1 < 400
1 < Server: Cowboy
1 < Report-To: {"group":"heroku-nel","max_age":3600,"endpoints":[{"url":"https://nel.heroku.com/reports?ts=1750439321&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=%2FXaCgCT%2FKjZ1T6Ajqx8a%2BjhwoQExhVw4w7DJmbisKzM%3D"}]}
1 < Reporting-Endpoints: heroku-nel=https://nel.heroku.com/reports?ts=1750439321&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=%2FXaCgCT%2FKjZ1T6Ajqx8a%2BjhwoQExhVw4w7DJmbisKzM%3D
1 < Nel: {"report_to":"heroku-nel","max_age":3600,"success_fraction":0.005,"failure_fraction":0.05,"response_headers":["Via"]}
1 < Connection: keep-alive
1 < Content-Type: application/json
1 < Transfer-Encoding: chunked
1 < Date: Fri, 20 Jun 2025 17:08:41 GMT
1 < Via: 1.1 vegur
{"error":"Character name already exists"}

12:08:41.072 [Test worker] DEBUG com.jayway.jsonpath.internal.path.CompiledPath -- Evaluating path: $['error']
12:08:41.077 [Test worker] DEBUG com.jayway.jsonpath.internal.path.CompiledPath -- Evaluating path: $
12:08:41.077 [Test worker] DEBUG org.apache.http.client.protocol.RequestAddCookies -- CookieSpec selected: karate
12:08:41.078 [Test worker] DEBUG org.apache.http.client.protocol.RequestAuthCache -- Auth cache not set in the context
12:08:41.078 [Test worker] DEBUG com.intuit.karate -- request:
1 > POST http://bp-se-test-cabcd9b246a5.herokuapp.com/testuser/api/characters
1 > Content-Type: application/json; charset=UTF-8
1 > Content-Length: 54
1 > Host: bp-se-test-cabcd9b246a5.herokuapp.com
1 > Connection: Keep-Alive
1 > User-Agent: Apache-HttpClient/4.5.14 (Java/17.0.14)
1 > Accept-Encoding: gzip,deflate
{"name":"","alterego":"","description":"","powers":[]}

12:08:41.078 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection request: [route: {}->http://bp-se-test-cabcd9b246a5.herokuapp.com:80][total available: 0; route allocated: 0 of 5; total allocated: 0 of 10]
12:08:41.078 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection leased: [id: 7][route: {}->http://bp-se-test-cabcd9b246a5.herokuapp.com:80][total available: 0; route allocated: 1 of 5; total allocated: 1 of 10]
12:08:41.078 [Test worker] DEBUG org.apache.http.impl.execchain.MainClientExec -- Opening connection {}->http://bp-se-test-cabcd9b246a5.herokuapp.com:80
12:08:41.078 [Test worker] DEBUG org.apache.http.impl.conn.DefaultHttpClientConnectionOperator -- Connecting to bp-se-test-cabcd9b246a5.herokuapp.com/52.5.82.174:80
12:08:41.165 [Test worker] DEBUG org.apache.http.impl.conn.DefaultHttpClientConnectionOperator -- Connection established 192.168.100.112:58288<->52.5.82.174:80
12:08:41.165 [Test worker] DEBUG org.apache.http.impl.conn.DefaultManagedHttpClientConnection -- http-outgoing-7: set socket timeout to 30000
12:08:41.165 [Test worker] DEBUG org.apache.http.impl.execchain.MainClientExec -- Executing request POST /testuser/api/characters HTTP/1.1
12:08:41.165 [Test worker] DEBUG org.apache.http.impl.execchain.MainClientExec -- Target auth state: UNCHALLENGED
12:08:41.165 [Test worker] DEBUG org.apache.http.impl.execchain.MainClientExec -- Proxy auth state: UNCHALLENGED
12:08:41.165 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-7 >> POST /testuser/api/characters HTTP/1.1
12:08:41.165 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-7 >> Content-Type: application/json; charset=UTF-8
12:08:41.165 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-7 >> Content-Length: 54
12:08:41.165 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-7 >> Host: bp-se-test-cabcd9b246a5.herokuapp.com
12:08:41.165 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-7 >> Connection: Keep-Alive
12:08:41.165 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-7 >> User-Agent: Apache-HttpClient/4.5.14 (Java/17.0.14)
12:08:41.165 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-7 >> Accept-Encoding: gzip,deflate
12:08:41.165 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-7 >> "POST /testuser/api/characters HTTP/1.1[\r][\n]"
12:08:41.165 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-7 >> "Content-Type: application/json; charset=UTF-8[\r][\n]"
12:08:41.165 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-7 >> "Content-Length: 54[\r][\n]"
12:08:41.165 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-7 >> "Host: bp-se-test-cabcd9b246a5.herokuapp.com[\r][\n]"
12:08:41.165 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-7 >> "Connection: Keep-Alive[\r][\n]"
12:08:41.165 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-7 >> "User-Agent: Apache-HttpClient/4.5.14 (Java/17.0.14)[\r][\n]"
12:08:41.165 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-7 >> "Accept-Encoding: gzip,deflate[\r][\n]"
12:08:41.165 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-7 >> "[\r][\n]"
12:08:41.165 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-7 >> "{"name":"","alterego":"","description":"","powers":[]}"
12:08:41.255 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-7 << "HTTP/1.1 400 [\r][\n]"
12:08:41.255 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-7 << "Server: Cowboy[\r][\n]"
12:08:41.255 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-7 << "Report-To: {"group":"heroku-nel","max_age":3600,"endpoints":[{"url":"https://nel.heroku.com/reports?ts=1750439321&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=%2FXaCgCT%2FKjZ1T6Ajqx8a%2BjhwoQExhVw4w7DJmbisKzM%3D"}]}[\r][\n]"
12:08:41.255 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-7 << "Reporting-Endpoints: heroku-nel=https://nel.heroku.com/reports?ts=1750439321&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=%2FXaCgCT%2FKjZ1T6Ajqx8a%2BjhwoQExhVw4w7DJmbisKzM%3D[\r][\n]"
12:08:41.255 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-7 << "Nel: {"report_to":"heroku-nel","max_age":3600,"success_fraction":0.005,"failure_fraction":0.05,"response_headers":["Via"]}[\r][\n]"
12:08:41.255 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-7 << "Connection: keep-alive[\r][\n]"
12:08:41.255 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-7 << "Content-Type: application/json[\r][\n]"
12:08:41.255 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-7 << "Transfer-Encoding: chunked[\r][\n]"
12:08:41.255 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-7 << "Date: Fri, 20 Jun 2025 17:08:41 GMT[\r][\n]"
12:08:41.255 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-7 << "Via: 1.1 vegur[\r][\n]"
12:08:41.255 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-7 << "[\r][\n]"
12:08:41.255 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-7 << "84[\r][\n]"
12:08:41.255 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-7 << "{"name":"Name is required","description":"Description is required","powers":"Powers are required","alterego":"Alterego is required"}[\r][\n]"
12:08:41.255 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-7 << "0[\r][\n]"
12:08:41.255 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-7 << "[\r][\n]"
12:08:41.256 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-7 << HTTP/1.1 400 
12:08:41.256 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-7 << Server: Cowboy
12:08:41.256 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-7 << Report-To: {"group":"heroku-nel","max_age":3600,"endpoints":[{"url":"https://nel.heroku.com/reports?ts=1750439321&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=%2FXaCgCT%2FKjZ1T6Ajqx8a%2BjhwoQExhVw4w7DJmbisKzM%3D"}]}
12:08:41.256 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-7 << Reporting-Endpoints: heroku-nel=https://nel.heroku.com/reports?ts=1750439321&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=%2FXaCgCT%2FKjZ1T6Ajqx8a%2BjhwoQExhVw4w7DJmbisKzM%3D
12:08:41.256 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-7 << Nel: {"report_to":"heroku-nel","max_age":3600,"success_fraction":0.005,"failure_fraction":0.05,"response_headers":["Via"]}
12:08:41.256 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-7 << Connection: keep-alive
12:08:41.256 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-7 << Content-Type: application/json
12:08:41.256 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-7 << Transfer-Encoding: chunked
12:08:41.256 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-7 << Date: Fri, 20 Jun 2025 17:08:41 GMT
12:08:41.256 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-7 << Via: 1.1 vegur
12:08:41.256 [Test worker] DEBUG org.apache.http.impl.execchain.MainClientExec -- Connection can be kept alive indefinitely
12:08:41.256 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection [id: 7][route: {}->http://bp-se-test-cabcd9b246a5.herokuapp.com:80] can be kept alive indefinitely
12:08:41.256 [Test worker] DEBUG org.apache.http.impl.conn.DefaultManagedHttpClientConnection -- http-outgoing-7: set socket timeout to 0
12:08:41.257 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection released: [id: 7][route: {}->http://bp-se-test-cabcd9b246a5.herokuapp.com:80][total available: 1; route allocated: 1 of 5; total allocated: 1 of 10]
12:08:41.257 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection manager is shutting down
12:08:41.257 [Test worker] DEBUG org.apache.http.impl.conn.DefaultManagedHttpClientConnection -- http-outgoing-7: Close connection
12:08:41.257 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection manager shut down
12:08:41.257 [Test worker] DEBUG com.intuit.karate -- response time in milliseconds: 179
1 < 400
1 < Server: Cowboy
1 < Report-To: {"group":"heroku-nel","max_age":3600,"endpoints":[{"url":"https://nel.heroku.com/reports?ts=1750439321&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=%2FXaCgCT%2FKjZ1T6Ajqx8a%2BjhwoQExhVw4w7DJmbisKzM%3D"}]}
1 < Reporting-Endpoints: heroku-nel=https://nel.heroku.com/reports?ts=1750439321&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=%2FXaCgCT%2FKjZ1T6Ajqx8a%2BjhwoQExhVw4w7DJmbisKzM%3D
1 < Nel: {"report_to":"heroku-nel","max_age":3600,"success_fraction":0.005,"failure_fraction":0.05,"response_headers":["Via"]}
1 < Connection: keep-alive
1 < Content-Type: application/json
1 < Transfer-Encoding: chunked
1 < Date: Fri, 20 Jun 2025 17:08:41 GMT
1 < Via: 1.1 vegur
{"name":"Name is required","description":"Description is required","powers":"Powers are required","alterego":"Alterego is required"}

12:08:41.259 [Test worker] DEBUG com.jayway.jsonpath.internal.path.CompiledPath -- Evaluating path: $['name']
12:08:41.265 [Test worker] DEBUG org.thymeleaf.TemplateEngine -- [THYMELEAF] INITIALIZING TEMPLATE ENGINE
12:08:41.272 [Test worker] DEBUG org.thymeleaf.TemplateEngine.CONFIG -- Initializing Thymeleaf Template engine configuration...
[THYMELEAF] TEMPLATE ENGINE CONFIGURATION:
[THYMELEAF] * Thymeleaf version: 3.1.2.RELEASE (built 2023-07-30T19:25:50+0000)
[THYMELEAF] * Cache Manager implementation: org.thymeleaf.cache.StandardCacheManager
[THYMELEAF] * Template resolvers:
[THYMELEAF]     * [1] com.intuit.karate.template.ResourceHtmlTemplateResolver
[THYMELEAF] * Message resolvers:
[THYMELEAF]     * org.thymeleaf.messageresolver.StandardMessageResolver
[THYMELEAF] * Link builders:
[THYMELEAF]     * org.thymeleaf.linkbuilder.StandardLinkBuilder
[THYMELEAF] * Dialect [1 of 2]: Standard (com.intuit.karate.template.KarateStandardDialect)
[THYMELEAF]     * Prefix: "th"
[THYMELEAF]     * Processors for Template Mode: HTML
[THYMELEAF]         * Element Tag Processors by [matching element and attribute name] [precedence]:
[THYMELEAF]             * [* {th:include,data-th-include}] [100]: org.thymeleaf.standard.processor.StandardIncludeTagProcessor
[THYMELEAF]             * [* {th:insert,data-th-insert}] [100]: org.thymeleaf.standard.processor.StandardInsertTagProcessor
[THYMELEAF]             * [* {th:replace,data-th-replace}] [100]: org.thymeleaf.standard.processor.StandardReplaceTagProcessor
[THYMELEAF]             * [* {th:each,data-th-each}] [200]: com.intuit.karate.template.KarateEachTagProcessor
[THYMELEAF]             * [* {th:switch,data-th-switch}] [250]: org.thymeleaf.standard.processor.StandardSwitchTagProcessor
[THYMELEAF]             * [* {th:case,data-th-case}] [275]: org.thymeleaf.standard.processor.StandardCaseTagProcessor
[THYMELEAF]             * [* {th:if,data-th-if}] [300]: org.thymeleaf.standard.processor.StandardIfTagProcessor
[THYMELEAF]             * [* {th:unless,data-th-unless}] [400]: org.thymeleaf.standard.processor.StandardUnlessTagProcessor
[THYMELEAF]             * [* {th:object,data-th-object}] [500]: org.thymeleaf.standard.processor.StandardObjectTagProcessor
[THYMELEAF]             * [* {th:with,data-th-with}] [600]: com.intuit.karate.template.KarateWithTagProcessor
[THYMELEAF]             * [* {th:attr,data-th-attr}] [700]: com.intuit.karate.template.KarateAttributeTagProcessor.KarateAttrTagProcessor
[THYMELEAF]             * [* {th:attrappend,data-th-attrappend}] [900]: com.intuit.karate.template.KarateAttributeTagProcessor.KarateAttrappendTagProcessor
[THYMELEAF]             * [* {th:attrprepend,data-th-attrprepend}] [900]: com.intuit.karate.template.KarateAttributeTagProcessor.KarateAttrprependTagProcessor
[THYMELEAF]             * [* {th:alt-title,data-th-alt-title}] [990]: org.thymeleaf.standard.processor.StandardAltTitleTagProcessor
[THYMELEAF]             * [* {th:lang-xmllang,data-th-lang-xmllang}] [990]: org.thymeleaf.standard.processor.StandardLangXmlLangTagProcessor
[THYMELEAF]             * [* {th:action,data-th-action}] [1000]: org.thymeleaf.standard.processor.StandardActionTagProcessor
[THYMELEAF]             * [* {th:disabled,data-th-disabled}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:required,data-th-required}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:autofocus,data-th-autofocus}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:multiple,data-th-multiple}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:defer,data-th-defer}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:loop,data-th-loop}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:checked,data-th-checked}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:open,data-th-open}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:formnovalidate,data-th-formnovalidate}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:pubdate,data-th-pubdate}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:seamless,data-th-seamless}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:selected,data-th-selected}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:hidden,data-th-hidden}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:declare,data-th-declare}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:async,data-th-async}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:nowrap,data-th-nowrap}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:reversed,data-th-reversed}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:readonly,data-th-readonly}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:scoped,data-th-scoped}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:default,data-th-default}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:controls,data-th-controls}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:novalidate,data-th-novalidate}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:autoplay,data-th-autoplay}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:ismap,data-th-ismap}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:ondragenter,data-th-ondragenter}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:oncontextmenu,data-th-oncontextmenu}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onsubmit,data-th-onsubmit}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onforminput,data-th-onforminput}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onsuspend,data-th-onsuspend}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onprogress,data-th-onprogress}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onmouseover,data-th-onmouseover}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onkeyup,data-th-onkeyup}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onclick,data-th-onclick}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onloadedmetadata,data-th-onloadedmetadata}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ontimeupdate,data-th-ontimeupdate}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onmouseup,data-th-onmouseup}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onstalled,data-th-onstalled}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onafterprint,data-th-onafterprint}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onended,data-th-onended}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:oncanplaythrough,data-th-oncanplaythrough}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ondblclick,data-th-ondblclick}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ononline,data-th-ononline}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onundo,data-th-onundo}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onpopstate,data-th-onpopstate}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onformchange,data-th-onformchange}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onreset,data-th-onreset}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onkeypress,data-th-onkeypress}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onmousemove,data-th-onmousemove}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onerror,data-th-onerror}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onmouseout,data-th-onmouseout}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onplay,data-th-onplay}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onvolumechange,data-th-onvolumechange}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onblur,data-th-onblur}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onresize,data-th-onresize}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onoffline,data-th-onoffline}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onchange,data-th-onchange}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ondrag,data-th-ondrag}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ondragleave,data-th-ondragleave}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onseeking,data-th-onseeking}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onmousewheel,data-th-onmousewheel}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onshow,data-th-onshow}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ondurationchange,data-th-ondurationchange}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onbeforeunload,data-th-onbeforeunload}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onhashchange,data-th-onhashchange}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onseeked,data-th-onseeked}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onmessage,data-th-onmessage}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onscroll,data-th-onscroll}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onload,data-th-onload}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ondragstart,data-th-ondragstart}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onemptied,data-th-onemptied}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onplaying,data-th-onplaying}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onabort,data-th-onabort}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onredo,data-th-onredo}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onstorage,data-th-onstorage}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ondragover,data-th-ondragover}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onloadeddata,data-th-onloadeddata}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onkeydown,data-th-onkeydown}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:oninput,data-th-oninput}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onpause,data-th-onpause}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onselect,data-th-onselect}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:oninvalid,data-th-oninvalid}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onwaiting,data-th-onwaiting}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ondragend,data-th-ondragend}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onmousedown,data-th-onmousedown}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onfocus,data-th-onfocus}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onloadstart,data-th-onloadstart}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onbeforeprint,data-th-onbeforeprint}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:oncanplay,data-th-oncanplay}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onunload,data-th-onunload}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ondrop,data-th-ondrop}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onreadystatechange,data-th-onreadystatechange}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onratechange,data-th-onratechange}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:href,data-th-href}] [1000]: org.thymeleaf.standard.processor.StandardHrefTagProcessor
[THYMELEAF]             * [* {th:inline,data-th-inline}] [1000]: org.thymeleaf.standard.processor.StandardInlineHTMLTagProcessor
[THYMELEAF]             * [* {th:method,data-th-method}] [1000]: org.thymeleaf.standard.processor.StandardMethodTagProcessor
[THYMELEAF]             * [* {th:name,data-th-name}] [1000]: org.thymeleaf.standard.processor.StandardNonRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:type,data-th-type}] [1000]: org.thymeleaf.standard.processor.StandardNonRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:rowspan,data-th-rowspan}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:min,data-th-min}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:icon,data-th-icon}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:height,data-th-height}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:charset,data-th-charset}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:longdesc,data-th-longdesc}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:form,data-th-form}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:frameborder,data-th-frameborder}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:formenctype,data-th-formenctype}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:low,data-th-low}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:autocomplete,data-th-autocomplete}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:http-equiv,data-th-http-equiv}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:cite,data-th-cite}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:spellcheck,data-th-spellcheck}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:high,data-th-high}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:marginheight,data-th-marginheight}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:bgcolor,data-th-bgcolor}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:align,data-th-align}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:background,data-th-background}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:dir,data-th-dir}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:id,data-th-id}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:archive,data-th-archive}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:rules,data-th-rules}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:keytype,data-th-keytype}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:formmethod,data-th-formmethod}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:list,data-th-list}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:preload,data-th-preload}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:class,data-th-class}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:media,data-th-media}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:accept,data-th-accept}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:poster,data-th-poster}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:sandbox,data-th-sandbox}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:content,data-th-content}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:optimum,data-th-optimum}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:formaction,data-th-formaction}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:placeholder,data-th-placeholder}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:challenge,data-th-challenge}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:frame,data-th-frame}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:step,data-th-step}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:radiogroup,data-th-radiogroup}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:pattern,data-th-pattern}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:tabindex,data-th-tabindex}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:accesskey,data-th-accesskey}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:summary,data-th-summary}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:scrolling,data-th-scrolling}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:cols,data-th-cols}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:hreflang,data-th-hreflang}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:data,data-th-data}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:headers,data-th-headers}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:rev,data-th-rev}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:start,data-th-start}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:scheme,data-th-scheme}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:lang,data-th-lang}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:colspan,data-th-colspan}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:wrap,data-th-wrap}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:codetype,data-th-codetype}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:datetime,data-th-datetime}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:rel,data-th-rel}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:audio,data-th-audio}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:formtarget,data-th-formtarget}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:usemap,data-th-usemap}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:kind,data-th-kind}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:codebase,data-th-codebase}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:rows,data-th-rows}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:max,data-th-max}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:scope,data-th-scope}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:standby,data-th-standby}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:width,data-th-width}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:border,data-th-border}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:srclang,data-th-srclang}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:target,data-th-target}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:compact,data-th-compact}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:size,data-th-size}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:for,data-th-for}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:sizes,data-th-sizes}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:valuetype,data-th-valuetype}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:vspace,data-th-vspace}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:classid,data-th-classid}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:title,data-th-title}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:axis,data-th-axis}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:maxlength,data-th-maxlength}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:contextmenu,data-th-contextmenu}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:cellpadding,data-th-cellpadding}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:accept-charset,data-th-accept-charset}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:contenteditable,data-th-contenteditable}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:manifest,data-th-manifest}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:span,data-th-span}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:enctype,data-th-enctype}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:dropzone,data-th-dropzone}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:draggable,data-th-draggable}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:abbr,data-th-abbr}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:cellspacing,data-th-cellspacing}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:style,data-th-style}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:label,data-th-label}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:alt,data-th-alt}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:marginwidth,data-th-marginwidth}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:hspace,data-th-hspace}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:src,data-th-src}] [1000]: org.thymeleaf.standard.processor.StandardSrcTagProcessor
[THYMELEAF]             * [* {th:value,data-th-value}] [1000]: org.thymeleaf.standard.processor.StandardValueTagProcessor
[THYMELEAF]             * [* {th:xmlbase,data-th-xmlbase}] [1000]: org.thymeleaf.standard.processor.StandardXmlBaseTagProcessor
[THYMELEAF]             * [* {th:xmllang,data-th-xmllang}] [1000]: org.thymeleaf.standard.processor.StandardXmlLangTagProcessor
[THYMELEAF]             * [* {xmlns:th}] [1000]: org.thymeleaf.standard.processor.StandardXmlNsTagProcessor
[THYMELEAF]             * [* {th:xmlspace,data-th-xmlspace}] [1000]: org.thymeleaf.standard.processor.StandardXmlSpaceTagProcessor
[THYMELEAF]             * [* {th:classappend,data-th-classappend}] [1100]: org.thymeleaf.standard.processor.StandardClassappendTagProcessor
[THYMELEAF]             * [* {th:styleappend,data-th-styleappend}] [1100]: org.thymeleaf.standard.processor.StandardStyleappendTagProcessor
[THYMELEAF]             * [* {th:text,data-th-text}] [1300]: org.thymeleaf.standard.processor.StandardTextTagProcessor
[THYMELEAF]             * [* {th:utext,data-th-utext}] [1400]: org.thymeleaf.standard.processor.StandardUtextTagProcessor
[THYMELEAF]             * [* {th:fragment,data-th-fragment}] [1500]: org.thymeleaf.standard.processor.StandardFragmentTagProcessor
[THYMELEAF]             * [* {th:assert,data-th-assert}] [1550]: org.thymeleaf.standard.processor.StandardAssertTagProcessor
[THYMELEAF]             * [* {th:remove,data-th-remove}] [1600]: org.thymeleaf.standard.processor.StandardRemoveTagProcessor
[THYMELEAF]             * [* {th:ref,data-th-ref}] [10000]: org.thymeleaf.standard.processor.StandardRefAttributeTagProcessor
[THYMELEAF]             * [{th:block,th-block} *] [100000]: org.thymeleaf.standard.processor.StandardBlockTagProcessor
[THYMELEAF]             * [* th:*] [2147483647]: org.thymeleaf.standard.processor.StandardDefaultAttributesTagProcessor
[THYMELEAF]         * Text Processors by [precedence]:
[THYMELEAF]             * [1000]: org.thymeleaf.standard.processor.StandardInliningTextProcessor
[THYMELEAF]         * DOCTYPE Processors by [precedence]:
[THYMELEAF]             * [1000]: org.thymeleaf.standard.processor.StandardTranslationDocTypeProcessor
[THYMELEAF]         * CDATA Section Processors by [precedence]:
[THYMELEAF]             * [1000]: org.thymeleaf.standard.processor.StandardInliningCDATASectionProcessor
[THYMELEAF]         * Comment Processors by [precedence]:
[THYMELEAF]             * [1000]: org.thymeleaf.standard.processor.StandardInliningCommentProcessor
[THYMELEAF]             * [1100]: org.thymeleaf.standard.processor.StandardConditionalCommentProcessor
[THYMELEAF]     * Processors for Template Mode: XML
[THYMELEAF]         * Element Tag Processors by [matching element and attribute name] [precedence]:
[THYMELEAF]             * [* {th:include}] [100]: org.thymeleaf.standard.processor.StandardIncludeTagProcessor
[THYMELEAF]             * [* {th:insert}] [100]: org.thymeleaf.standard.processor.StandardInsertTagProcessor
[THYMELEAF]             * [* {th:replace}] [100]: org.thymeleaf.standard.processor.StandardReplaceTagProcessor
[THYMELEAF]             * [* {th:each}] [200]: com.intuit.karate.template.KarateEachTagProcessor
[THYMELEAF]             * [* {th:switch}] [250]: org.thymeleaf.standard.processor.StandardSwitchTagProcessor
[THYMELEAF]             * [* {th:case}] [275]: org.thymeleaf.standard.processor.StandardCaseTagProcessor
[THYMELEAF]             * [* {th:if}] [300]: org.thymeleaf.standard.processor.StandardIfTagProcessor
[THYMELEAF]             * [* {th:unless}] [400]: org.thymeleaf.standard.processor.StandardUnlessTagProcessor
[THYMELEAF]             * [* {th:object}] [500]: org.thymeleaf.standard.processor.StandardObjectTagProcessor
[THYMELEAF]             * [* {th:with}] [600]: com.intuit.karate.template.KarateWithTagProcessor
[THYMELEAF]             * [* {th:attr}] [700]: com.intuit.karate.template.KarateAttributeTagProcessor.KarateAttrTagProcessor
[THYMELEAF]             * [* {th:attrappend}] [900]: com.intuit.karate.template.KarateAttributeTagProcessor.KarateAttrappendTagProcessor
[THYMELEAF]             * [* {th:attrprepend}] [900]: com.intuit.karate.template.KarateAttributeTagProcessor.KarateAttrprependTagProcessor
[THYMELEAF]             * [* {th:inline}] [1000]: org.thymeleaf.standard.processor.StandardInlineXMLTagProcessor
[THYMELEAF]             * [* {xmlns:th}] [1000]: org.thymeleaf.standard.processor.StandardXmlNsTagProcessor
[THYMELEAF]             * [* {th:text}] [1300]: org.thymeleaf.standard.processor.StandardTextTagProcessor
[THYMELEAF]             * [* {th:utext}] [1400]: org.thymeleaf.standard.processor.StandardUtextTagProcessor
[THYMELEAF]             * [* {th:fragment}] [1500]: org.thymeleaf.standard.processor.StandardFragmentTagProcessor
[THYMELEAF]             * [* {th:assert}] [1550]: org.thymeleaf.standard.processor.StandardAssertTagProcessor
[THYMELEAF]             * [* {th:remove}] [1600]: org.thymeleaf.standard.processor.StandardRemoveTagProcessor
[THYMELEAF]             * [* {th:ref}] [10000]: org.thymeleaf.standard.processor.StandardRefAttributeTagProcessor
[THYMELEAF]             * [{th:block} *] [100000]: org.thymeleaf.standard.processor.StandardBlockTagProcessor
[THYMELEAF]             * [* th:*] [2147483647]: org.thymeleaf.standard.processor.StandardDefaultAttributesTagProcessor
[THYMELEAF]         * Text Processors by [precedence]:
[THYMELEAF]             * [1000]: org.thymeleaf.standard.processor.StandardInliningTextProcessor
[THYMELEAF]         * CDATA Section Processors by [precedence]:
[THYMELEAF]             * [1000]: org.thymeleaf.standard.processor.StandardInliningCDATASectionProcessor
[THYMELEAF]         * Comment Processors by [precedence]:
[THYMELEAF]             * [1000]: org.thymeleaf.standard.processor.StandardInliningCommentProcessor
[THYMELEAF]     * Processors for Template Mode: TEXT
[THYMELEAF]         * Element Tag Processors by [matching element and attribute name] [precedence]:
[THYMELEAF]             * [* {th:insert}] [100]: org.thymeleaf.standard.processor.StandardInsertTagProcessor
[THYMELEAF]             * [* {th:replace}] [100]: org.thymeleaf.standard.processor.StandardReplaceTagProcessor
[THYMELEAF]             * [* {th:each}] [200]: com.intuit.karate.template.KarateEachTagProcessor
[THYMELEAF]             * [* {th:switch}] [250]: org.thymeleaf.standard.processor.StandardSwitchTagProcessor
[THYMELEAF]             * [* {th:case}] [275]: org.thymeleaf.standard.processor.StandardCaseTagProcessor
[THYMELEAF]             * [* {th:if}] [300]: org.thymeleaf.standard.processor.StandardIfTagProcessor
[THYMELEAF]             * [* {th:unless}] [400]: org.thymeleaf.standard.processor.StandardUnlessTagProcessor
[THYMELEAF]             * [* {th:object}] [500]: org.thymeleaf.standard.processor.StandardObjectTagProcessor
[THYMELEAF]             * [* {th:with}] [600]: com.intuit.karate.template.KarateWithTagProcessor
[THYMELEAF]             * [* {th:inline}] [1000]: org.thymeleaf.standard.processor.StandardInlineTextualTagProcessor
[THYMELEAF]             * [* {th:text}] [1300]: org.thymeleaf.standard.processor.StandardTextTagProcessor
[THYMELEAF]             * [* {th:utext}] [1400]: org.thymeleaf.standard.processor.StandardUtextTagProcessor
[THYMELEAF]             * [* {th:assert}] [1550]: org.thymeleaf.standard.processor.StandardAssertTagProcessor
[THYMELEAF]             * [* {th:remove}] [1600]: org.thymeleaf.standard.processor.StandardRemoveTagProcessor
[THYMELEAF]             * [* 100000] [org.thymeleaf.standard.processor.StandardBlockTagProcessor]: {}
[THYMELEAF]             * [{th:block} *] [100000]: org.thymeleaf.standard.processor.StandardBlockTagProcessor
[THYMELEAF]         * Text Processors by [precedence]:
[THYMELEAF]             * [1000]: org.thymeleaf.standard.processor.StandardInliningTextProcessor
[THYMELEAF]     * Processors for Template Mode: JAVASCRIPT
[THYMELEAF]         * Element Tag Processors by [matching element and attribute name] [precedence]:
[THYMELEAF]             * [* {th:insert}] [100]: org.thymeleaf.standard.processor.StandardInsertTagProcessor
[THYMELEAF]             * [* {th:replace}] [100]: org.thymeleaf.standard.processor.StandardReplaceTagProcessor
[THYMELEAF]             * [* {th:each}] [200]: com.intuit.karate.template.KarateEachTagProcessor
[THYMELEAF]             * [* {th:switch}] [250]: org.thymeleaf.standard.processor.StandardSwitchTagProcessor
[THYMELEAF]             * [* {th:case}] [275]: org.thymeleaf.standard.processor.StandardCaseTagProcessor
[THYMELEAF]             * [* {th:if}] [300]: org.thymeleaf.standard.processor.StandardIfTagProcessor
[THYMELEAF]             * [* {th:unless}] [400]: org.thymeleaf.standard.processor.StandardUnlessTagProcessor
[THYMELEAF]             * [* {th:object}] [500]: org.thymeleaf.standard.processor.StandardObjectTagProcessor
[THYMELEAF]             * [* {th:with}] [600]: com.intuit.karate.template.KarateWithTagProcessor
[THYMELEAF]             * [* {th:inline}] [1000]: org.thymeleaf.standard.processor.StandardInlineTextualTagProcessor
[THYMELEAF]             * [* {th:text}] [1300]: org.thymeleaf.standard.processor.StandardTextTagProcessor
[THYMELEAF]             * [* {th:utext}] [1400]: org.thymeleaf.standard.processor.StandardUtextTagProcessor
[THYMELEAF]             * [* {th:assert}] [1550]: org.thymeleaf.standard.processor.StandardAssertTagProcessor
[THYMELEAF]             * [* {th:remove}] [1600]: org.thymeleaf.standard.processor.StandardRemoveTagProcessor
[THYMELEAF]             * [{th:block} *] [100000]: org.thymeleaf.standard.processor.StandardBlockTagProcessor
[THYMELEAF]             * [* 100000] [org.thymeleaf.standard.processor.StandardBlockTagProcessor]: {}
[THYMELEAF]         * Text Processors by [precedence]:
[THYMELEAF]             * [1000]: org.thymeleaf.standard.processor.StandardInliningTextProcessor
[THYMELEAF]     * Processors for Template Mode: CSS
[THYMELEAF]         * Element Tag Processors by [matching element and attribute name] [precedence]:
[THYMELEAF]             * [* {th:insert}] [100]: org.thymeleaf.standard.processor.StandardInsertTagProcessor
[THYMELEAF]             * [* {th:replace}] [100]: org.thymeleaf.standard.processor.StandardReplaceTagProcessor
[THYMELEAF]             * [* {th:each}] [200]: com.intuit.karate.template.KarateEachTagProcessor
[THYMELEAF]             * [* {th:switch}] [250]: org.thymeleaf.standard.processor.StandardSwitchTagProcessor
[THYMELEAF]             * [* {th:case}] [275]: org.thymeleaf.standard.processor.StandardCaseTagProcessor
[THYMELEAF]             * [* {th:if}] [300]: org.thymeleaf.standard.processor.StandardIfTagProcessor
[THYMELEAF]             * [* {th:unless}] [400]: org.thymeleaf.standard.processor.StandardUnlessTagProcessor
[THYMELEAF]             * [* {th:object}] [500]: org.thymeleaf.standard.processor.StandardObjectTagProcessor
[THYMELEAF]             * [* {th:with}] [600]: com.intuit.karate.template.KarateWithTagProcessor
[THYMELEAF]             * [* {th:inline}] [1000]: org.thymeleaf.standard.processor.StandardInlineTextualTagProcessor
[THYMELEAF]             * [* {th:text}] [1300]: org.thymeleaf.standard.processor.StandardTextTagProcessor
[THYMELEAF]             * [* {th:utext}] [1400]: org.thymeleaf.standard.processor.StandardUtextTagProcessor
[THYMELEAF]             * [* {th:assert}] [1550]: org.thymeleaf.standard.processor.StandardAssertTagProcessor
[THYMELEAF]             * [* {th:remove}] [1600]: org.thymeleaf.standard.processor.StandardRemoveTagProcessor
[THYMELEAF]             * [* 100000] [org.thymeleaf.standard.processor.StandardBlockTagProcessor]: {}
[THYMELEAF]             * [{th:block} *] [100000]: org.thymeleaf.standard.processor.StandardBlockTagProcessor
[THYMELEAF]         * Text Processors by [precedence]:
[THYMELEAF]             * [1000]: org.thymeleaf.standard.processor.StandardInliningTextProcessor
[THYMELEAF]     * Expression Objects:
[THYMELEAF]         * #ctx
[THYMELEAF]         * #root
[THYMELEAF]         * #vars
[THYMELEAF]         * #object
[THYMELEAF]         * #locale
[THYMELEAF]         * #conversions
[THYMELEAF]         * #uris
[THYMELEAF]         * #temporals
[THYMELEAF]         * #calendars
[THYMELEAF]         * #dates
[THYMELEAF]         * #bools
[THYMELEAF]         * #numbers
[THYMELEAF]         * #objects
[THYMELEAF]         * #strings
[THYMELEAF]         * #arrays
[THYMELEAF]         * #lists
[THYMELEAF]         * #sets
[THYMELEAF]         * #maps
[THYMELEAF]         * #aggregates
[THYMELEAF]         * #messages
[THYMELEAF]         * #ids
[THYMELEAF]         * #execInfo
[THYMELEAF]         * #request
[THYMELEAF]         * #response
[THYMELEAF]         * #session
[THYMELEAF]         * #servletContext
[THYMELEAF]     * Execution Attributes:
[THYMELEAF]         * "StandardExpressionParser": com.intuit.karate.template.KarateStandardDialect@e72fb04
[THYMELEAF]         * "StandardJavaScriptSerializer": org.thymeleaf.standard.serializer.StandardJavaScriptSerializer@77856cc5
[THYMELEAF]         * "StandardCSSSerializer": org.thymeleaf.standard.serializer.StandardCSSSerializer@1fbd5e0
[THYMELEAF]         * "StandardVariableExpressionEvaluator": com.intuit.karate.template.KarateStandardDialect@e72fb04
[THYMELEAF]         * "StandardConversionService": org.thymeleaf.standard.expression.StandardConversionService@32d22650
[THYMELEAF] * Dialect [2 of 2]: karate (com.intuit.karate.template.KarateScriptDialect)
[THYMELEAF]     * Prefix: "ka"
[THYMELEAF]     * Processors for Template Mode: HTML
[THYMELEAF]         * Element Tag Processors by [matching element and attribute name] [precedence]:
[THYMELEAF]             * [* {src}] [1000]: com.intuit.karate.template.KaScriptAttrProcessor
[THYMELEAF]         * Element Model Processors by [matching element and attribute name] [precedence]:
[THYMELEAF]             * [{script} {ka:scope,data-ka-scope}] [1000]: com.intuit.karate.template.KaScriptElemProcessor
[THYMELEAF]             * [* {ka:set,data-ka-set}] [1000]: com.intuit.karate.template.KaSetElemProcessor
[THYMELEAF] TEMPLATE ENGINE CONFIGURED OK
12:08:41.273 [Test worker] DEBUG org.thymeleaf.TemplateEngine -- [THYMELEAF] TEMPLATE ENGINE INITIALIZED
---------------------------------------------------------
feature: classpath:features/marvel_characters_api/crearPersonaje.feature
scenarios:  3 | passed:  2 | failed:  1 | time: 0.5644
---------------------------------------------------------

12:08:41.309 [Test worker] DEBUG org.apache.http.client.protocol.RequestAddCookies -- CookieSpec selected: karate
12:08:41.309 [Test worker] DEBUG org.apache.http.client.protocol.RequestAuthCache -- Auth cache not set in the context
12:08:41.309 [Test worker] DEBUG com.intuit.karate -- request:
1 > DELETE http://bp-se-test-cabcd9b246a5.herokuapp.com/testuser/api/characters/1
1 > Host: bp-se-test-cabcd9b246a5.herokuapp.com
1 > Connection: Keep-Alive
1 > User-Agent: Apache-HttpClient/4.5.14 (Java/17.0.14)
1 > Accept-Encoding: gzip,deflate


12:08:41.309 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection request: [route: {}->http://bp-se-test-cabcd9b246a5.herokuapp.com:80][total available: 0; route allocated: 0 of 5; total allocated: 0 of 10]
12:08:41.309 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection leased: [id: 8][route: {}->http://bp-se-test-cabcd9b246a5.herokuapp.com:80][total available: 0; route allocated: 1 of 5; total allocated: 1 of 10]
12:08:41.309 [Test worker] DEBUG org.apache.http.impl.execchain.MainClientExec -- Opening connection {}->http://bp-se-test-cabcd9b246a5.herokuapp.com:80
12:08:41.309 [Test worker] DEBUG org.apache.http.impl.conn.DefaultHttpClientConnectionOperator -- Connecting to bp-se-test-cabcd9b246a5.herokuapp.com/52.5.82.174:80
12:08:41.407 [Test worker] DEBUG org.apache.http.impl.conn.DefaultHttpClientConnectionOperator -- Connection established 192.168.100.112:58289<->52.5.82.174:80
12:08:41.407 [Test worker] DEBUG org.apache.http.impl.conn.DefaultManagedHttpClientConnection -- http-outgoing-8: set socket timeout to 30000
12:08:41.407 [Test worker] DEBUG org.apache.http.impl.execchain.MainClientExec -- Executing request DELETE /testuser/api/characters/1 HTTP/1.1
12:08:41.407 [Test worker] DEBUG org.apache.http.impl.execchain.MainClientExec -- Target auth state: UNCHALLENGED
12:08:41.407 [Test worker] DEBUG org.apache.http.impl.execchain.MainClientExec -- Proxy auth state: UNCHALLENGED
12:08:41.407 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-8 >> DELETE /testuser/api/characters/1 HTTP/1.1
12:08:41.407 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-8 >> Host: bp-se-test-cabcd9b246a5.herokuapp.com
12:08:41.407 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-8 >> Connection: Keep-Alive
12:08:41.407 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-8 >> User-Agent: Apache-HttpClient/4.5.14 (Java/17.0.14)
12:08:41.407 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-8 >> Accept-Encoding: gzip,deflate
12:08:41.407 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-8 >> "DELETE /testuser/api/characters/1 HTTP/1.1[\r][\n]"
12:08:41.407 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-8 >> "Host: bp-se-test-cabcd9b246a5.herokuapp.com[\r][\n]"
12:08:41.407 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-8 >> "Connection: Keep-Alive[\r][\n]"
12:08:41.407 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-8 >> "User-Agent: Apache-HttpClient/4.5.14 (Java/17.0.14)[\r][\n]"
12:08:41.407 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-8 >> "Accept-Encoding: gzip,deflate[\r][\n]"
12:08:41.407 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-8 >> "[\r][\n]"
12:08:41.497 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-8 << "HTTP/1.1 404 [\r][\n]"
12:08:41.497 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-8 << "Server: Cowboy[\r][\n]"
12:08:41.497 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-8 << "Report-To: {"group":"heroku-nel","max_age":3600,"endpoints":[{"url":"https://nel.heroku.com/reports?ts=1750439321&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=%2FXaCgCT%2FKjZ1T6Ajqx8a%2BjhwoQExhVw4w7DJmbisKzM%3D"}]}[\r][\n]"
12:08:41.497 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-8 << "Reporting-Endpoints: heroku-nel=https://nel.heroku.com/reports?ts=1750439321&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=%2FXaCgCT%2FKjZ1T6Ajqx8a%2BjhwoQExhVw4w7DJmbisKzM%3D[\r][\n]"
12:08:41.497 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-8 << "Nel: {"report_to":"heroku-nel","max_age":3600,"success_fraction":0.005,"failure_fraction":0.05,"response_headers":["Via"]}[\r][\n]"
12:08:41.497 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-8 << "Connection: keep-alive[\r][\n]"
12:08:41.497 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-8 << "Content-Type: application/json[\r][\n]"
12:08:41.497 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-8 << "Transfer-Encoding: chunked[\r][\n]"
12:08:41.497 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-8 << "Date: Fri, 20 Jun 2025 17:08:41 GMT[\r][\n]"
12:08:41.497 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-8 << "Via: 1.1 vegur[\r][\n]"
12:08:41.497 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-8 << "[\r][\n]"
12:08:41.497 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-8 << "1f[\r][\n]"
12:08:41.497 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-8 << "{"error":"Character not found"}[\r][\n]"
12:08:41.497 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-8 << HTTP/1.1 404 
12:08:41.497 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-8 << Server: Cowboy
12:08:41.497 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-8 << Report-To: {"group":"heroku-nel","max_age":3600,"endpoints":[{"url":"https://nel.heroku.com/reports?ts=1750439321&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=%2FXaCgCT%2FKjZ1T6Ajqx8a%2BjhwoQExhVw4w7DJmbisKzM%3D"}]}
12:08:41.497 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-8 << Reporting-Endpoints: heroku-nel=https://nel.heroku.com/reports?ts=1750439321&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=%2FXaCgCT%2FKjZ1T6Ajqx8a%2BjhwoQExhVw4w7DJmbisKzM%3D
12:08:41.497 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-8 << Nel: {"report_to":"heroku-nel","max_age":3600,"success_fraction":0.005,"failure_fraction":0.05,"response_headers":["Via"]}
12:08:41.497 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-8 << Connection: keep-alive
12:08:41.497 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-8 << Content-Type: application/json
12:08:41.497 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-8 << Transfer-Encoding: chunked
12:08:41.497 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-8 << Date: Fri, 20 Jun 2025 17:08:41 GMT
12:08:41.497 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-8 << Via: 1.1 vegur
12:08:41.497 [Test worker] DEBUG org.apache.http.impl.execchain.MainClientExec -- Connection can be kept alive indefinitely
12:08:41.497 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-8 << "0[\r][\n]"
12:08:41.497 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-8 << "[\r][\n]"
12:08:41.497 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection [id: 8][route: {}->http://bp-se-test-cabcd9b246a5.herokuapp.com:80] can be kept alive indefinitely
12:08:41.497 [Test worker] DEBUG org.apache.http.impl.conn.DefaultManagedHttpClientConnection -- http-outgoing-8: set socket timeout to 0
12:08:41.497 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection released: [id: 8][route: {}->http://bp-se-test-cabcd9b246a5.herokuapp.com:80][total available: 1; route allocated: 1 of 5; total allocated: 1 of 10]
12:08:41.497 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection manager is shutting down
12:08:41.497 [Test worker] DEBUG org.apache.http.impl.conn.DefaultManagedHttpClientConnection -- http-outgoing-8: Close connection
12:08:41.497 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection manager shut down
12:08:41.497 [Test worker] DEBUG com.intuit.karate -- response time in milliseconds: 188
1 < 404
1 < Server: Cowboy
1 < Report-To: {"group":"heroku-nel","max_age":3600,"endpoints":[{"url":"https://nel.heroku.com/reports?ts=1750439321&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=%2FXaCgCT%2FKjZ1T6Ajqx8a%2BjhwoQExhVw4w7DJmbisKzM%3D"}]}
1 < Reporting-Endpoints: heroku-nel=https://nel.heroku.com/reports?ts=1750439321&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=%2FXaCgCT%2FKjZ1T6Ajqx8a%2BjhwoQExhVw4w7DJmbisKzM%3D
1 < Nel: {"report_to":"heroku-nel","max_age":3600,"success_fraction":0.005,"failure_fraction":0.05,"response_headers":["Via"]}
1 < Connection: keep-alive
1 < Content-Type: application/json
1 < Transfer-Encoding: chunked
1 < Date: Fri, 20 Jun 2025 17:08:41 GMT
1 < Via: 1.1 vegur
{"error":"Character not found"}

12:08:41.498 [Test worker] ERROR com.intuit.karate -- classpath:features/marvel_characters_api/eliminarPersonaje.feature:13
Then status 204
status code was: 404, expected: 204, response time in milliseconds: 188, url: http://bp-se-test-cabcd9b246a5.herokuapp.com/testuser/api/characters/1, response: 
{"error":"Character not found"}
classpath:features/marvel_characters_api/eliminarPersonaje.feature:13
12:08:41.503 [Test worker] DEBUG org.apache.http.client.protocol.RequestAddCookies -- CookieSpec selected: karate
12:08:41.503 [Test worker] DEBUG org.apache.http.client.protocol.RequestAuthCache -- Auth cache not set in the context
12:08:41.503 [Test worker] DEBUG com.intuit.karate -- request:
1 > DELETE http://bp-se-test-cabcd9b246a5.herokuapp.com/testuser/api/characters/999
1 > Host: bp-se-test-cabcd9b246a5.herokuapp.com
1 > Connection: Keep-Alive
1 > User-Agent: Apache-HttpClient/4.5.14 (Java/17.0.14)
1 > Accept-Encoding: gzip,deflate


12:08:41.503 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection request: [route: {}->http://bp-se-test-cabcd9b246a5.herokuapp.com:80][total available: 0; route allocated: 0 of 5; total allocated: 0 of 10]
12:08:41.503 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection leased: [id: 9][route: {}->http://bp-se-test-cabcd9b246a5.herokuapp.com:80][total available: 0; route allocated: 1 of 5; total allocated: 1 of 10]
12:08:41.503 [Test worker] DEBUG org.apache.http.impl.execchain.MainClientExec -- Opening connection {}->http://bp-se-test-cabcd9b246a5.herokuapp.com:80
12:08:41.503 [Test worker] DEBUG org.apache.http.impl.conn.DefaultHttpClientConnectionOperator -- Connecting to bp-se-test-cabcd9b246a5.herokuapp.com/52.5.82.174:80
12:08:41.592 [Test worker] DEBUG org.apache.http.impl.conn.DefaultHttpClientConnectionOperator -- Connection established 192.168.100.112:58290<->52.5.82.174:80
12:08:41.592 [Test worker] DEBUG org.apache.http.impl.conn.DefaultManagedHttpClientConnection -- http-outgoing-9: set socket timeout to 30000
12:08:41.592 [Test worker] DEBUG org.apache.http.impl.execchain.MainClientExec -- Executing request DELETE /testuser/api/characters/999 HTTP/1.1
12:08:41.592 [Test worker] DEBUG org.apache.http.impl.execchain.MainClientExec -- Target auth state: UNCHALLENGED
12:08:41.592 [Test worker] DEBUG org.apache.http.impl.execchain.MainClientExec -- Proxy auth state: UNCHALLENGED
12:08:41.592 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-9 >> DELETE /testuser/api/characters/999 HTTP/1.1
12:08:41.592 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-9 >> Host: bp-se-test-cabcd9b246a5.herokuapp.com
12:08:41.592 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-9 >> Connection: Keep-Alive
12:08:41.592 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-9 >> User-Agent: Apache-HttpClient/4.5.14 (Java/17.0.14)
12:08:41.592 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-9 >> Accept-Encoding: gzip,deflate
12:08:41.592 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-9 >> "DELETE /testuser/api/characters/999 HTTP/1.1[\r][\n]"
12:08:41.592 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-9 >> "Host: bp-se-test-cabcd9b246a5.herokuapp.com[\r][\n]"
12:08:41.592 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-9 >> "Connection: Keep-Alive[\r][\n]"
12:08:41.592 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-9 >> "User-Agent: Apache-HttpClient/4.5.14 (Java/17.0.14)[\r][\n]"
12:08:41.592 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-9 >> "Accept-Encoding: gzip,deflate[\r][\n]"
12:08:41.592 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-9 >> "[\r][\n]"
12:08:41.681 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-9 << "HTTP/1.1 404 [\r][\n]"
12:08:41.681 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-9 << "Server: Cowboy[\r][\n]"
12:08:41.681 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-9 << "Report-To: {"group":"heroku-nel","max_age":3600,"endpoints":[{"url":"https://nel.heroku.com/reports?ts=1750439321&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=%2FXaCgCT%2FKjZ1T6Ajqx8a%2BjhwoQExhVw4w7DJmbisKzM%3D"}]}[\r][\n]"
12:08:41.681 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-9 << "Reporting-Endpoints: heroku-nel=https://nel.heroku.com/reports?ts=1750439321&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=%2FXaCgCT%2FKjZ1T6Ajqx8a%2BjhwoQExhVw4w7DJmbisKzM%3D[\r][\n]"
12:08:41.681 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-9 << "Nel: {"report_to":"heroku-nel","max_age":3600,"success_fraction":0.005,"failure_fraction":0.05,"response_headers":["Via"]}[\r][\n]"
12:08:41.682 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-9 << "Connection: keep-alive[\r][\n]"
12:08:41.682 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-9 << "Content-Type: application/json[\r][\n]"
12:08:41.682 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-9 << "Transfer-Encoding: chunked[\r][\n]"
12:08:41.682 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-9 << "Date: Fri, 20 Jun 2025 17:08:41 GMT[\r][\n]"
12:08:41.682 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-9 << "Via: 1.1 vegur[\r][\n]"
12:08:41.682 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-9 << "[\r][\n]"
12:08:41.682 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-9 << "1f[\r][\n]"
12:08:41.682 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-9 << "{"error":"Character not found"}[\r][\n]"
12:08:41.682 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-9 << HTTP/1.1 404 
12:08:41.682 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-9 << Server: Cowboy
12:08:41.682 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-9 << Report-To: {"group":"heroku-nel","max_age":3600,"endpoints":[{"url":"https://nel.heroku.com/reports?ts=1750439321&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=%2FXaCgCT%2FKjZ1T6Ajqx8a%2BjhwoQExhVw4w7DJmbisKzM%3D"}]}
12:08:41.682 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-9 << Reporting-Endpoints: heroku-nel=https://nel.heroku.com/reports?ts=1750439321&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=%2FXaCgCT%2FKjZ1T6Ajqx8a%2BjhwoQExhVw4w7DJmbisKzM%3D
12:08:41.682 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-9 << Nel: {"report_to":"heroku-nel","max_age":3600,"success_fraction":0.005,"failure_fraction":0.05,"response_headers":["Via"]}
12:08:41.682 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-9 << Connection: keep-alive
12:08:41.682 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-9 << Content-Type: application/json
12:08:41.682 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-9 << Transfer-Encoding: chunked
12:08:41.682 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-9 << Date: Fri, 20 Jun 2025 17:08:41 GMT
12:08:41.682 [Test worker] DEBUG org.apache.http.headers -- http-outgoing-9 << Via: 1.1 vegur
12:08:41.682 [Test worker] DEBUG org.apache.http.impl.execchain.MainClientExec -- Connection can be kept alive indefinitely
12:08:41.682 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-9 << "0[\r][\n]"
12:08:41.682 [Test worker] DEBUG org.apache.http.wire -- http-outgoing-9 << "[\r][\n]"
12:08:41.682 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection [id: 9][route: {}->http://bp-se-test-cabcd9b246a5.herokuapp.com:80] can be kept alive indefinitely
12:08:41.682 [Test worker] DEBUG org.apache.http.impl.conn.DefaultManagedHttpClientConnection -- http-outgoing-9: set socket timeout to 0
12:08:41.682 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection released: [id: 9][route: {}->http://bp-se-test-cabcd9b246a5.herokuapp.com:80][total available: 1; route allocated: 1 of 5; total allocated: 1 of 10]
12:08:41.682 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection manager is shutting down
12:08:41.682 [Test worker] DEBUG org.apache.http.impl.conn.DefaultManagedHttpClientConnection -- http-outgoing-9: Close connection
12:08:41.683 [Test worker] DEBUG org.apache.http.impl.conn.PoolingHttpClientConnectionManager -- Connection manager shut down
12:08:41.683 [Test worker] DEBUG com.intuit.karate -- response time in milliseconds: 179
1 < 404
1 < Server: Cowboy
1 < Report-To: {"group":"heroku-nel","max_age":3600,"endpoints":[{"url":"https://nel.heroku.com/reports?ts=1750439321&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=%2FXaCgCT%2FKjZ1T6Ajqx8a%2BjhwoQExhVw4w7DJmbisKzM%3D"}]}
1 < Reporting-Endpoints: heroku-nel=https://nel.heroku.com/reports?ts=1750439321&sid=1b10b0ff-8a76-4548-befa-353fc6c6c045&s=%2FXaCgCT%2FKjZ1T6Ajqx8a%2BjhwoQExhVw4w7DJmbisKzM%3D
1 < Nel: {"report_to":"heroku-nel","max_age":3600,"success_fraction":0.005,"failure_fraction":0.05,"response_headers":["Via"]}
1 < Connection: keep-alive
1 < Content-Type: application/json
1 < Transfer-Encoding: chunked
1 < Date: Fri, 20 Jun 2025 17:08:41 GMT
1 < Via: 1.1 vegur
{"error":"Character not found"}

12:08:41.684 [Test worker] DEBUG com.jayway.jsonpath.internal.path.CompiledPath -- Evaluating path: $['error']
12:08:41.688 [Test worker] DEBUG org.thymeleaf.TemplateEngine -- [THYMELEAF] INITIALIZING TEMPLATE ENGINE
12:08:41.695 [Test worker] DEBUG org.thymeleaf.TemplateEngine.CONFIG -- Initializing Thymeleaf Template engine configuration...
[THYMELEAF] TEMPLATE ENGINE CONFIGURATION:
[THYMELEAF] * Thymeleaf version: 3.1.2.RELEASE (built 2023-07-30T19:25:50+0000)
[THYMELEAF] * Cache Manager implementation: org.thymeleaf.cache.StandardCacheManager
[THYMELEAF] * Template resolvers:
[THYMELEAF]     * [1] com.intuit.karate.template.ResourceHtmlTemplateResolver
[THYMELEAF] * Message resolvers:
[THYMELEAF]     * org.thymeleaf.messageresolver.StandardMessageResolver
[THYMELEAF] * Link builders:
[THYMELEAF]     * org.thymeleaf.linkbuilder.StandardLinkBuilder
[THYMELEAF] * Dialect [1 of 2]: Standard (com.intuit.karate.template.KarateStandardDialect)
[THYMELEAF]     * Prefix: "th"
[THYMELEAF]     * Processors for Template Mode: HTML
[THYMELEAF]         * Element Tag Processors by [matching element and attribute name] [precedence]:
[THYMELEAF]             * [* {th:include,data-th-include}] [100]: org.thymeleaf.standard.processor.StandardIncludeTagProcessor
[THYMELEAF]             * [* {th:insert,data-th-insert}] [100]: org.thymeleaf.standard.processor.StandardInsertTagProcessor
[THYMELEAF]             * [* {th:replace,data-th-replace}] [100]: org.thymeleaf.standard.processor.StandardReplaceTagProcessor
[THYMELEAF]             * [* {th:each,data-th-each}] [200]: com.intuit.karate.template.KarateEachTagProcessor
[THYMELEAF]             * [* {th:switch,data-th-switch}] [250]: org.thymeleaf.standard.processor.StandardSwitchTagProcessor
[THYMELEAF]             * [* {th:case,data-th-case}] [275]: org.thymeleaf.standard.processor.StandardCaseTagProcessor
[THYMELEAF]             * [* {th:if,data-th-if}] [300]: org.thymeleaf.standard.processor.StandardIfTagProcessor
[THYMELEAF]             * [* {th:unless,data-th-unless}] [400]: org.thymeleaf.standard.processor.StandardUnlessTagProcessor
[THYMELEAF]             * [* {th:object,data-th-object}] [500]: org.thymeleaf.standard.processor.StandardObjectTagProcessor
[THYMELEAF]             * [* {th:with,data-th-with}] [600]: com.intuit.karate.template.KarateWithTagProcessor
[THYMELEAF]             * [* {th:attr,data-th-attr}] [700]: com.intuit.karate.template.KarateAttributeTagProcessor.KarateAttrTagProcessor
[THYMELEAF]             * [* {th:attrappend,data-th-attrappend}] [900]: com.intuit.karate.template.KarateAttributeTagProcessor.KarateAttrappendTagProcessor
[THYMELEAF]             * [* {th:attrprepend,data-th-attrprepend}] [900]: com.intuit.karate.template.KarateAttributeTagProcessor.KarateAttrprependTagProcessor
[THYMELEAF]             * [* {th:alt-title,data-th-alt-title}] [990]: org.thymeleaf.standard.processor.StandardAltTitleTagProcessor
[THYMELEAF]             * [* {th:lang-xmllang,data-th-lang-xmllang}] [990]: org.thymeleaf.standard.processor.StandardLangXmlLangTagProcessor
[THYMELEAF]             * [* {th:action,data-th-action}] [1000]: org.thymeleaf.standard.processor.StandardActionTagProcessor
[THYMELEAF]             * [* {th:seamless,data-th-seamless}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:novalidate,data-th-novalidate}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:hidden,data-th-hidden}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:loop,data-th-loop}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:nowrap,data-th-nowrap}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:formnovalidate,data-th-formnovalidate}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:checked,data-th-checked}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:selected,data-th-selected}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:autofocus,data-th-autofocus}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:controls,data-th-controls}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:scoped,data-th-scoped}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:defer,data-th-defer}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:default,data-th-default}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:pubdate,data-th-pubdate}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:readonly,data-th-readonly}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:open,data-th-open}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:autoplay,data-th-autoplay}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:required,data-th-required}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:ismap,data-th-ismap}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:async,data-th-async}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:reversed,data-th-reversed}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:declare,data-th-declare}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:multiple,data-th-multiple}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:disabled,data-th-disabled}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:onpause,data-th-onpause}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ondragstart,data-th-ondragstart}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onseeked,data-th-onseeked}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onfocus,data-th-onfocus}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onafterprint,data-th-onafterprint}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onwaiting,data-th-onwaiting}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onmouseup,data-th-onmouseup}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onmousemove,data-th-onmousemove}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onsuspend,data-th-onsuspend}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onabort,data-th-onabort}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onchange,data-th-onchange}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onvolumechange,data-th-onvolumechange}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onplay,data-th-onplay}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onhashchange,data-th-onhashchange}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onmouseover,data-th-onmouseover}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onloadedmetadata,data-th-onloadedmetadata}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onresize,data-th-onresize}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ondrag,data-th-ondrag}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onmessage,data-th-onmessage}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onerror,data-th-onerror}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onloadeddata,data-th-onloadeddata}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onloadstart,data-th-onloadstart}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onended,data-th-onended}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:oncanplaythrough,data-th-oncanplaythrough}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:oncanplay,data-th-oncanplay}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onmouseout,data-th-onmouseout}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:oncontextmenu,data-th-oncontextmenu}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onmousewheel,data-th-onmousewheel}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onbeforeprint,data-th-onbeforeprint}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onload,data-th-onload}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:oninput,data-th-oninput}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onforminput,data-th-onforminput}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ondblclick,data-th-ondblclick}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onformchange,data-th-onformchange}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ondurationchange,data-th-ondurationchange}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ondragleave,data-th-ondragleave}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onreadystatechange,data-th-onreadystatechange}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onpopstate,data-th-onpopstate}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ondragenter,data-th-ondragenter}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ontimeupdate,data-th-ontimeupdate}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ondragend,data-th-ondragend}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onstalled,data-th-onstalled}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onblur,data-th-onblur}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onunload,data-th-onunload}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onstorage,data-th-onstorage}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onkeypress,data-th-onkeypress}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onselect,data-th-onselect}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onmousedown,data-th-onmousedown}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onratechange,data-th-onratechange}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onemptied,data-th-onemptied}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ononline,data-th-ononline}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onsubmit,data-th-onsubmit}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onscroll,data-th-onscroll}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:oninvalid,data-th-oninvalid}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onredo,data-th-onredo}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onreset,data-th-onreset}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onbeforeunload,data-th-onbeforeunload}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onclick,data-th-onclick}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onplaying,data-th-onplaying}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onoffline,data-th-onoffline}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onshow,data-th-onshow}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onseeking,data-th-onseeking}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ondrop,data-th-ondrop}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onundo,data-th-onundo}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onkeydown,data-th-onkeydown}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onkeyup,data-th-onkeyup}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ondragover,data-th-ondragover}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onprogress,data-th-onprogress}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:href,data-th-href}] [1000]: org.thymeleaf.standard.processor.StandardHrefTagProcessor
[THYMELEAF]             * [* {th:inline,data-th-inline}] [1000]: org.thymeleaf.standard.processor.StandardInlineHTMLTagProcessor
[THYMELEAF]             * [* {th:method,data-th-method}] [1000]: org.thymeleaf.standard.processor.StandardMethodTagProcessor
[THYMELEAF]             * [* {th:name,data-th-name}] [1000]: org.thymeleaf.standard.processor.StandardNonRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:type,data-th-type}] [1000]: org.thymeleaf.standard.processor.StandardNonRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:step,data-th-step}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:pattern,data-th-pattern}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:rowspan,data-th-rowspan}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:codebase,data-th-codebase}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:form,data-th-form}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:maxlength,data-th-maxlength}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:target,data-th-target}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:media,data-th-media}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:preload,data-th-preload}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:scrolling,data-th-scrolling}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:datetime,data-th-datetime}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:content,data-th-content}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:formenctype,data-th-formenctype}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:border,data-th-border}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:optimum,data-th-optimum}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:accept,data-th-accept}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:low,data-th-low}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:srclang,data-th-srclang}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:valuetype,data-th-valuetype}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:style,data-th-style}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:cols,data-th-cols}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:draggable,data-th-draggable}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:rel,data-th-rel}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:challenge,data-th-challenge}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:alt,data-th-alt}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:charset,data-th-charset}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:bgcolor,data-th-bgcolor}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:sizes,data-th-sizes}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:rules,data-th-rules}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:frame,data-th-frame}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:high,data-th-high}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:axis,data-th-axis}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:sandbox,data-th-sandbox}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:icon,data-th-icon}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:longdesc,data-th-longdesc}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:dropzone,data-th-dropzone}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:class,data-th-class}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:size,data-th-size}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:keytype,data-th-keytype}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:rev,data-th-rev}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:tabindex,data-th-tabindex}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:marginwidth,data-th-marginwidth}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:frameborder,data-th-frameborder}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:kind,data-th-kind}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:id,data-th-id}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:for,data-th-for}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:background,data-th-background}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:width,data-th-width}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:classid,data-th-classid}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:summary,data-th-summary}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:dir,data-th-dir}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:abbr,data-th-abbr}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:spellcheck,data-th-spellcheck}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:lang,data-th-lang}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:enctype,data-th-enctype}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:max,data-th-max}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:poster,data-th-poster}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:label,data-th-label}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:scheme,data-th-scheme}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:manifest,data-th-manifest}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:http-equiv,data-th-http-equiv}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:vspace,data-th-vspace}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:cellspacing,data-th-cellspacing}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:cite,data-th-cite}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:title,data-th-title}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:hspace,data-th-hspace}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:colspan,data-th-colspan}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:placeholder,data-th-placeholder}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:codetype,data-th-codetype}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:audio,data-th-audio}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:archive,data-th-archive}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:span,data-th-span}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:min,data-th-min}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:usemap,data-th-usemap}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:standby,data-th-standby}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:rows,data-th-rows}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:accept-charset,data-th-accept-charset}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:cellpadding,data-th-cellpadding}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:formaction,data-th-formaction}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:height,data-th-height}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:list,data-th-list}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:radiogroup,data-th-radiogroup}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:wrap,data-th-wrap}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:data,data-th-data}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:start,data-th-start}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:accesskey,data-th-accesskey}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:scope,data-th-scope}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:hreflang,data-th-hreflang}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:contenteditable,data-th-contenteditable}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:formmethod,data-th-formmethod}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:compact,data-th-compact}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:headers,data-th-headers}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:align,data-th-align}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:formtarget,data-th-formtarget}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:marginheight,data-th-marginheight}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:contextmenu,data-th-contextmenu}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:autocomplete,data-th-autocomplete}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:src,data-th-src}] [1000]: org.thymeleaf.standard.processor.StandardSrcTagProcessor
[THYMELEAF]             * [* {th:value,data-th-value}] [1000]: org.thymeleaf.standard.processor.StandardValueTagProcessor
[THYMELEAF]             * [* {th:xmlbase,data-th-xmlbase}] [1000]: org.thymeleaf.standard.processor.StandardXmlBaseTagProcessor
[THYMELEAF]             * [* {th:xmllang,data-th-xmllang}] [1000]: org.thymeleaf.standard.processor.StandardXmlLangTagProcessor
[THYMELEAF]             * [* {xmlns:th}] [1000]: org.thymeleaf.standard.processor.StandardXmlNsTagProcessor
[THYMELEAF]             * [* {th:xmlspace,data-th-xmlspace}] [1000]: org.thymeleaf.standard.processor.StandardXmlSpaceTagProcessor
[THYMELEAF]             * [* {th:classappend,data-th-classappend}] [1100]: org.thymeleaf.standard.processor.StandardClassappendTagProcessor
[THYMELEAF]             * [* {th:styleappend,data-th-styleappend}] [1100]: org.thymeleaf.standard.processor.StandardStyleappendTagProcessor
[THYMELEAF]             * [* {th:text,data-th-text}] [1300]: org.thymeleaf.standard.processor.StandardTextTagProcessor
[THYMELEAF]             * [* {th:utext,data-th-utext}] [1400]: org.thymeleaf.standard.processor.StandardUtextTagProcessor
[THYMELEAF]             * [* {th:fragment,data-th-fragment}] [1500]: org.thymeleaf.standard.processor.StandardFragmentTagProcessor
[THYMELEAF]             * [* {th:assert,data-th-assert}] [1550]: org.thymeleaf.standard.processor.StandardAssertTagProcessor
[THYMELEAF]             * [* {th:remove,data-th-remove}] [1600]: org.thymeleaf.standard.processor.StandardRemoveTagProcessor
[THYMELEAF]             * [* {th:ref,data-th-ref}] [10000]: org.thymeleaf.standard.processor.StandardRefAttributeTagProcessor
[THYMELEAF]             * [{th:block,th-block} *] [100000]: org.thymeleaf.standard.processor.StandardBlockTagProcessor
[THYMELEAF]             * [* th:*] [2147483647]: org.thymeleaf.standard.processor.StandardDefaultAttributesTagProcessor
[THYMELEAF]         * Text Processors by [precedence]:
[THYMELEAF]             * [1000]: org.thymeleaf.standard.processor.StandardInliningTextProcessor
[THYMELEAF]         * DOCTYPE Processors by [precedence]:
[THYMELEAF]             * [1000]: org.thymeleaf.standard.processor.StandardTranslationDocTypeProcessor
[THYMELEAF]         * CDATA Section Processors by [precedence]:
[THYMELEAF]             * [1000]: org.thymeleaf.standard.processor.StandardInliningCDATASectionProcessor
[THYMELEAF]         * Comment Processors by [precedence]:
[THYMELEAF]             * [1000]: org.thymeleaf.standard.processor.StandardInliningCommentProcessor
[THYMELEAF]             * [1100]: org.thymeleaf.standard.processor.StandardConditionalCommentProcessor
[THYMELEAF]     * Processors for Template Mode: XML
[THYMELEAF]         * Element Tag Processors by [matching element and attribute name] [precedence]:
[THYMELEAF]             * [* {th:include}] [100]: org.thymeleaf.standard.processor.StandardIncludeTagProcessor
[THYMELEAF]             * [* {th:insert}] [100]: org.thymeleaf.standard.processor.StandardInsertTagProcessor
[THYMELEAF]             * [* {th:replace}] [100]: org.thymeleaf.standard.processor.StandardReplaceTagProcessor
[THYMELEAF]             * [* {th:each}] [200]: com.intuit.karate.template.KarateEachTagProcessor
[THYMELEAF]             * [* {th:switch}] [250]: org.thymeleaf.standard.processor.StandardSwitchTagProcessor
[THYMELEAF]             * [* {th:case}] [275]: org.thymeleaf.standard.processor.StandardCaseTagProcessor
[THYMELEAF]             * [* {th:if}] [300]: org.thymeleaf.standard.processor.StandardIfTagProcessor
[THYMELEAF]             * [* {th:unless}] [400]: org.thymeleaf.standard.processor.StandardUnlessTagProcessor
[THYMELEAF]             * [* {th:object}] [500]: org.thymeleaf.standard.processor.StandardObjectTagProcessor
[THYMELEAF]             * [* {th:with}] [600]: com.intuit.karate.template.KarateWithTagProcessor
[THYMELEAF]             * [* {th:attr}] [700]: com.intuit.karate.template.KarateAttributeTagProcessor.KarateAttrTagProcessor
[THYMELEAF]             * [* {th:attrappend}] [900]: com.intuit.karate.template.KarateAttributeTagProcessor.KarateAttrappendTagProcessor
[THYMELEAF]             * [* {th:attrprepend}] [900]: com.intuit.karate.template.KarateAttributeTagProcessor.KarateAttrprependTagProcessor
[THYMELEAF]             * [* {th:inline}] [1000]: org.thymeleaf.standard.processor.StandardInlineXMLTagProcessor
[THYMELEAF]             * [* {xmlns:th}] [1000]: org.thymeleaf.standard.processor.StandardXmlNsTagProcessor
[THYMELEAF]             * [* {th:text}] [1300]: org.thymeleaf.standard.processor.StandardTextTagProcessor
[THYMELEAF]             * [* {th:utext}] [1400]: org.thymeleaf.standard.processor.StandardUtextTagProcessor
[THYMELEAF]             * [* {th:fragment}] [1500]: org.thymeleaf.standard.processor.StandardFragmentTagProcessor
[THYMELEAF]             * [* {th:assert}] [1550]: org.thymeleaf.standard.processor.StandardAssertTagProcessor
[THYMELEAF]             * [* {th:remove}] [1600]: org.thymeleaf.standard.processor.StandardRemoveTagProcessor
[THYMELEAF]             * [* {th:ref}] [10000]: org.thymeleaf.standard.processor.StandardRefAttributeTagProcessor
[THYMELEAF]             * [{th:block} *] [100000]: org.thymeleaf.standard.processor.StandardBlockTagProcessor
[THYMELEAF]             * [* th:*] [2147483647]: org.thymeleaf.standard.processor.StandardDefaultAttributesTagProcessor
[THYMELEAF]         * Text Processors by [precedence]:
[THYMELEAF]             * [1000]: org.thymeleaf.standard.processor.StandardInliningTextProcessor
[THYMELEAF]         * CDATA Section Processors by [precedence]:
[THYMELEAF]             * [1000]: org.thymeleaf.standard.processor.StandardInliningCDATASectionProcessor
[THYMELEAF]         * Comment Processors by [precedence]:
[THYMELEAF]             * [1000]: org.thymeleaf.standard.processor.StandardInliningCommentProcessor
[THYMELEAF]     * Processors for Template Mode: TEXT
[THYMELEAF]         * Element Tag Processors by [matching element and attribute name] [precedence]:
[THYMELEAF]             * [* {th:insert}] [100]: org.thymeleaf.standard.processor.StandardInsertTagProcessor
[THYMELEAF]             * [* {th:replace}] [100]: org.thymeleaf.standard.processor.StandardReplaceTagProcessor
[THYMELEAF]             * [* {th:each}] [200]: com.intuit.karate.template.KarateEachTagProcessor
[THYMELEAF]             * [* {th:switch}] [250]: org.thymeleaf.standard.processor.StandardSwitchTagProcessor
[THYMELEAF]             * [* {th:case}] [275]: org.thymeleaf.standard.processor.StandardCaseTagProcessor
[THYMELEAF]             * [* {th:if}] [300]: org.thymeleaf.standard.processor.StandardIfTagProcessor
[THYMELEAF]             * [* {th:unless}] [400]: org.thymeleaf.standard.processor.StandardUnlessTagProcessor
[THYMELEAF]             * [* {th:object}] [500]: org.thymeleaf.standard.processor.StandardObjectTagProcessor
[THYMELEAF]             * [* {th:with}] [600]: com.intuit.karate.template.KarateWithTagProcessor
[THYMELEAF]             * [* {th:inline}] [1000]: org.thymeleaf.standard.processor.StandardInlineTextualTagProcessor
[THYMELEAF]             * [* {th:text}] [1300]: org.thymeleaf.standard.processor.StandardTextTagProcessor
[THYMELEAF]             * [* {th:utext}] [1400]: org.thymeleaf.standard.processor.StandardUtextTagProcessor
[THYMELEAF]             * [* {th:assert}] [1550]: org.thymeleaf.standard.processor.StandardAssertTagProcessor
[THYMELEAF]             * [* {th:remove}] [1600]: org.thymeleaf.standard.processor.StandardRemoveTagProcessor
[THYMELEAF]             * [{th:block} *] [100000]: org.thymeleaf.standard.processor.StandardBlockTagProcessor
[THYMELEAF]             * [* 100000] [org.thymeleaf.standard.processor.StandardBlockTagProcessor]: {}
[THYMELEAF]         * Text Processors by [precedence]:
[THYMELEAF]             * [1000]: org.thymeleaf.standard.processor.StandardInliningTextProcessor
[THYMELEAF]     * Processors for Template Mode: JAVASCRIPT
[THYMELEAF]         * Element Tag Processors by [matching element and attribute name] [precedence]:
[THYMELEAF]             * [* {th:insert}] [100]: org.thymeleaf.standard.processor.StandardInsertTagProcessor
[THYMELEAF]             * [* {th:replace}] [100]: org.thymeleaf.standard.processor.StandardReplaceTagProcessor
[THYMELEAF]             * [* {th:each}] [200]: com.intuit.karate.template.KarateEachTagProcessor
[THYMELEAF]             * [* {th:switch}] [250]: org.thymeleaf.standard.processor.StandardSwitchTagProcessor
[THYMELEAF]             * [* {th:case}] [275]: org.thymeleaf.standard.processor.StandardCaseTagProcessor
[THYMELEAF]             * [* {th:if}] [300]: org.thymeleaf.standard.processor.StandardIfTagProcessor
[THYMELEAF]             * [* {th:unless}] [400]: org.thymeleaf.standard.processor.StandardUnlessTagProcessor
[THYMELEAF]             * [* {th:object}] [500]: org.thymeleaf.standard.processor.StandardObjectTagProcessor
[THYMELEAF]             * [* {th:with}] [600]: com.intuit.karate.template.KarateWithTagProcessor
[THYMELEAF]             * [* {th:inline}] [1000]: org.thymeleaf.standard.processor.StandardInlineTextualTagProcessor
[THYMELEAF]             * [* {th:text}] [1300]: org.thymeleaf.standard.processor.StandardTextTagProcessor
[THYMELEAF]             * [* {th:utext}] [1400]: org.thymeleaf.standard.processor.StandardUtextTagProcessor
[THYMELEAF]             * [* {th:assert}] [1550]: org.thymeleaf.standard.processor.StandardAssertTagProcessor
[THYMELEAF]             * [* {th:remove}] [1600]: org.thymeleaf.standard.processor.StandardRemoveTagProcessor
[THYMELEAF]             * [{th:block} *] [100000]: org.thymeleaf.standard.processor.StandardBlockTagProcessor
[THYMELEAF]             * [* 100000] [org.thymeleaf.standard.processor.StandardBlockTagProcessor]: {}
[THYMELEAF]         * Text Processors by [precedence]:
[THYMELEAF]             * [1000]: org.thymeleaf.standard.processor.StandardInliningTextProcessor
[THYMELEAF]     * Processors for Template Mode: CSS
[THYMELEAF]         * Element Tag Processors by [matching element and attribute name] [precedence]:
[THYMELEAF]             * [* {th:insert}] [100]: org.thymeleaf.standard.processor.StandardInsertTagProcessor
[THYMELEAF]             * [* {th:replace}] [100]: org.thymeleaf.standard.processor.StandardReplaceTagProcessor
[THYMELEAF]             * [* {th:each}] [200]: com.intuit.karate.template.KarateEachTagProcessor
[THYMELEAF]             * [* {th:switch}] [250]: org.thymeleaf.standard.processor.StandardSwitchTagProcessor
[THYMELEAF]             * [* {th:case}] [275]: org.thymeleaf.standard.processor.StandardCaseTagProcessor
[THYMELEAF]             * [* {th:if}] [300]: org.thymeleaf.standard.processor.StandardIfTagProcessor
[THYMELEAF]             * [* {th:unless}] [400]: org.thymeleaf.standard.processor.StandardUnlessTagProcessor
[THYMELEAF]             * [* {th:object}] [500]: org.thymeleaf.standard.processor.StandardObjectTagProcessor
[THYMELEAF]             * [* {th:with}] [600]: com.intuit.karate.template.KarateWithTagProcessor
[THYMELEAF]             * [* {th:inline}] [1000]: org.thymeleaf.standard.processor.StandardInlineTextualTagProcessor
[THYMELEAF]             * [* {th:text}] [1300]: org.thymeleaf.standard.processor.StandardTextTagProcessor
[THYMELEAF]             * [* {th:utext}] [1400]: org.thymeleaf.standard.processor.StandardUtextTagProcessor
[THYMELEAF]             * [* {th:assert}] [1550]: org.thymeleaf.standard.processor.StandardAssertTagProcessor
[THYMELEAF]             * [* {th:remove}] [1600]: org.thymeleaf.standard.processor.StandardRemoveTagProcessor
[THYMELEAF]             * [* 100000] [org.thymeleaf.standard.processor.StandardBlockTagProcessor]: {}
[THYMELEAF]             * [{th:block} *] [100000]: org.thymeleaf.standard.processor.StandardBlockTagProcessor
[THYMELEAF]         * Text Processors by [precedence]:
[THYMELEAF]             * [1000]: org.thymeleaf.standard.processor.StandardInliningTextProcessor
[THYMELEAF]     * Expression Objects:
[THYMELEAF]         * #ctx
[THYMELEAF]         * #root
[THYMELEAF]         * #vars
[THYMELEAF]         * #object
[THYMELEAF]         * #locale
[THYMELEAF]         * #conversions
[THYMELEAF]         * #uris
[THYMELEAF]         * #temporals
[THYMELEAF]         * #calendars
[THYMELEAF]         * #dates
[THYMELEAF]         * #bools
[THYMELEAF]         * #numbers
[THYMELEAF]         * #objects
[THYMELEAF]         * #strings
[THYMELEAF]         * #arrays
[THYMELEAF]         * #lists
[THYMELEAF]         * #sets
[THYMELEAF]         * #maps
[THYMELEAF]         * #aggregates
[THYMELEAF]         * #messages
[THYMELEAF]         * #ids
[THYMELEAF]         * #execInfo
[THYMELEAF]         * #request
[THYMELEAF]         * #response
[THYMELEAF]         * #session
[THYMELEAF]         * #servletContext
[THYMELEAF]     * Execution Attributes:
[THYMELEAF]         * "StandardExpressionParser": com.intuit.karate.template.KarateStandardDialect@6d31f14
[THYMELEAF]         * "StandardJavaScriptSerializer": org.thymeleaf.standard.serializer.StandardJavaScriptSerializer@83e635f
[THYMELEAF]         * "StandardCSSSerializer": org.thymeleaf.standard.serializer.StandardCSSSerializer@61d011e
[THYMELEAF]         * "StandardVariableExpressionEvaluator": com.intuit.karate.template.KarateStandardDialect@6d31f14
[THYMELEAF]         * "StandardConversionService": org.thymeleaf.standard.expression.StandardConversionService@3b56947a
[THYMELEAF] * Dialect [2 of 2]: karate (com.intuit.karate.template.KarateScriptDialect)
[THYMELEAF]     * Prefix: "ka"
[THYMELEAF]     * Processors for Template Mode: HTML
[THYMELEAF]         * Element Tag Processors by [matching element and attribute name] [precedence]:
[THYMELEAF]             * [* {src}] [1000]: com.intuit.karate.template.KaScriptAttrProcessor
[THYMELEAF]         * Element Model Processors by [matching element and attribute name] [precedence]:
[THYMELEAF]             * [{script} {ka:scope,data-ka-scope}] [1000]: com.intuit.karate.template.KaScriptElemProcessor
[THYMELEAF]             * [* {ka:set,data-ka-set}] [1000]: com.intuit.karate.template.KaSetElemProcessor
[THYMELEAF] TEMPLATE ENGINE CONFIGURED OK
12:08:41.696 [Test worker] DEBUG org.thymeleaf.TemplateEngine -- [THYMELEAF] TEMPLATE ENGINE INITIALIZED
---------------------------------------------------------
feature: classpath:features/marvel_characters_api/eliminarPersonaje.feature
scenarios:  2 | passed:  1 | failed:  1 | time: 0.3732
---------------------------------------------------------

Karate version: 1.4.1
======================================================
elapsed:   3.46 | threads:    1 | thread time: 2.46 
features:     5 | skipped:    0 | efficiency: 0.71
scenarios:   10 | passed:     7 | failed: 3
======================================================
>>> failed features:
status code was: 404, expected: 200, response time in milliseconds: 287, url: http://bp-se-test-cabcd9b246a5.herokuapp.com/testuser/api/characters/111, response: 
{"error":"Character not found"}
classpath:features/marvel_characters_api/actualizarPersonaje.feature:23
status code was: 400, expected: 201, response time in milliseconds: 197, url: http://bp-se-test-cabcd9b246a5.herokuapp.com/testuser/api/characters, response: 
{"error":"Character name already exists"}
classpath:features/marvel_characters_api/crearPersonaje.feature:22
status code was: 404, expected: 204, response time in milliseconds: 188, url: http://bp-se-test-cabcd9b246a5.herokuapp.com/testuser/api/characters/1, response: 
{"error":"Character not found"}
classpath:features/marvel_characters_api/eliminarPersonaje.feature:13
<<<
12:08:41.742 [Test worker] DEBUG org.thymeleaf.TemplateEngine -- [THYMELEAF] INITIALIZING TEMPLATE ENGINE
12:08:41.745 [Test worker] DEBUG org.thymeleaf.TemplateEngine.CONFIG -- Initializing Thymeleaf Template engine configuration...
[THYMELEAF] TEMPLATE ENGINE CONFIGURATION:
[THYMELEAF] * Thymeleaf version: 3.1.2.RELEASE (built 2023-07-30T19:25:50+0000)
[THYMELEAF] * Cache Manager implementation: org.thymeleaf.cache.StandardCacheManager
[THYMELEAF] * Template resolvers:
[THYMELEAF]     * [1] com.intuit.karate.template.ResourceHtmlTemplateResolver
[THYMELEAF] * Message resolvers:
[THYMELEAF]     * org.thymeleaf.messageresolver.StandardMessageResolver
[THYMELEAF] * Link builders:
[THYMELEAF]     * org.thymeleaf.linkbuilder.StandardLinkBuilder
[THYMELEAF] * Dialect [1 of 2]: Standard (com.intuit.karate.template.KarateStandardDialect)
[THYMELEAF]     * Prefix: "th"
[THYMELEAF]     * Processors for Template Mode: HTML
[THYMELEAF]         * Element Tag Processors by [matching element and attribute name] [precedence]:
[THYMELEAF]             * [* {th:include,data-th-include}] [100]: org.thymeleaf.standard.processor.StandardIncludeTagProcessor
[THYMELEAF]             * [* {th:insert,data-th-insert}] [100]: org.thymeleaf.standard.processor.StandardInsertTagProcessor
[THYMELEAF]             * [* {th:replace,data-th-replace}] [100]: org.thymeleaf.standard.processor.StandardReplaceTagProcessor
[THYMELEAF]             * [* {th:each,data-th-each}] [200]: com.intuit.karate.template.KarateEachTagProcessor
[THYMELEAF]             * [* {th:switch,data-th-switch}] [250]: org.thymeleaf.standard.processor.StandardSwitchTagProcessor
[THYMELEAF]             * [* {th:case,data-th-case}] [275]: org.thymeleaf.standard.processor.StandardCaseTagProcessor
[THYMELEAF]             * [* {th:if,data-th-if}] [300]: org.thymeleaf.standard.processor.StandardIfTagProcessor
[THYMELEAF]             * [* {th:unless,data-th-unless}] [400]: org.thymeleaf.standard.processor.StandardUnlessTagProcessor
[THYMELEAF]             * [* {th:object,data-th-object}] [500]: org.thymeleaf.standard.processor.StandardObjectTagProcessor
[THYMELEAF]             * [* {th:with,data-th-with}] [600]: com.intuit.karate.template.KarateWithTagProcessor
[THYMELEAF]             * [* {th:attr,data-th-attr}] [700]: com.intuit.karate.template.KarateAttributeTagProcessor.KarateAttrTagProcessor
[THYMELEAF]             * [* {th:attrappend,data-th-attrappend}] [900]: com.intuit.karate.template.KarateAttributeTagProcessor.KarateAttrappendTagProcessor
[THYMELEAF]             * [* {th:attrprepend,data-th-attrprepend}] [900]: com.intuit.karate.template.KarateAttributeTagProcessor.KarateAttrprependTagProcessor
[THYMELEAF]             * [* {th:alt-title,data-th-alt-title}] [990]: org.thymeleaf.standard.processor.StandardAltTitleTagProcessor
[THYMELEAF]             * [* {th:lang-xmllang,data-th-lang-xmllang}] [990]: org.thymeleaf.standard.processor.StandardLangXmlLangTagProcessor
[THYMELEAF]             * [* {th:action,data-th-action}] [1000]: org.thymeleaf.standard.processor.StandardActionTagProcessor
[THYMELEAF]             * [* {th:readonly,data-th-readonly}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:pubdate,data-th-pubdate}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:declare,data-th-declare}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:disabled,data-th-disabled}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:reversed,data-th-reversed}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:selected,data-th-selected}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:open,data-th-open}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:checked,data-th-checked}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:autoplay,data-th-autoplay}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:controls,data-th-controls}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:nowrap,data-th-nowrap}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:formnovalidate,data-th-formnovalidate}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:scoped,data-th-scoped}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:autofocus,data-th-autofocus}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:required,data-th-required}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:default,data-th-default}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:hidden,data-th-hidden}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:defer,data-th-defer}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:async,data-th-async}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:ismap,data-th-ismap}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:seamless,data-th-seamless}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:novalidate,data-th-novalidate}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:loop,data-th-loop}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:multiple,data-th-multiple}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:onbeforeunload,data-th-onbeforeunload}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onmousedown,data-th-onmousedown}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onstorage,data-th-onstorage}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ondrop,data-th-ondrop}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:oncanplaythrough,data-th-oncanplaythrough}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onreadystatechange,data-th-onreadystatechange}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ondurationchange,data-th-ondurationchange}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onkeydown,data-th-onkeydown}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onkeypress,data-th-onkeypress}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ondrag,data-th-ondrag}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onmessage,data-th-onmessage}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ondragenter,data-th-ondragenter}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onmouseup,data-th-onmouseup}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onbeforeprint,data-th-onbeforeprint}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ondragleave,data-th-ondragleave}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onmousemove,data-th-onmousemove}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onseeked,data-th-onseeked}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onoffline,data-th-onoffline}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onabort,data-th-onabort}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onsubmit,data-th-onsubmit}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ondragover,data-th-ondragover}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onscroll,data-th-onscroll}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onpause,data-th-onpause}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onload,data-th-onload}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:oninvalid,data-th-oninvalid}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onprogress,data-th-onprogress}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onredo,data-th-onredo}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onstalled,data-th-onstalled}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onreset,data-th-onreset}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onratechange,data-th-onratechange}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:oncontextmenu,data-th-oncontextmenu}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onforminput,data-th-onforminput}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onended,data-th-onended}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onloadstart,data-th-onloadstart}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onunload,data-th-onunload}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onundo,data-th-onundo}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onselect,data-th-onselect}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onloadeddata,data-th-onloadeddata}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ondragend,data-th-ondragend}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onseeking,data-th-onseeking}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:oninput,data-th-oninput}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onfocus,data-th-onfocus}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ondblclick,data-th-ondblclick}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onhashchange,data-th-onhashchange}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:oncanplay,data-th-oncanplay}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onresize,data-th-onresize}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onafterprint,data-th-onafterprint}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onwaiting,data-th-onwaiting}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onplaying,data-th-onplaying}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onmousewheel,data-th-onmousewheel}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onsuspend,data-th-onsuspend}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onpopstate,data-th-onpopstate}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onloadedmetadata,data-th-onloadedmetadata}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onchange,data-th-onchange}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onplay,data-th-onplay}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onmouseover,data-th-onmouseover}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onkeyup,data-th-onkeyup}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onclick,data-th-onclick}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ontimeupdate,data-th-ontimeupdate}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onblur,data-th-onblur}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onformchange,data-th-onformchange}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onmouseout,data-th-onmouseout}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onerror,data-th-onerror}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ondragstart,data-th-ondragstart}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onvolumechange,data-th-onvolumechange}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ononline,data-th-ononline}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onshow,data-th-onshow}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onemptied,data-th-onemptied}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:href,data-th-href}] [1000]: org.thymeleaf.standard.processor.StandardHrefTagProcessor
[THYMELEAF]             * [* {th:inline,data-th-inline}] [1000]: org.thymeleaf.standard.processor.StandardInlineHTMLTagProcessor
[THYMELEAF]             * [* {th:method,data-th-method}] [1000]: org.thymeleaf.standard.processor.StandardMethodTagProcessor
[THYMELEAF]             * [* {th:name,data-th-name}] [1000]: org.thymeleaf.standard.processor.StandardNonRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:type,data-th-type}] [1000]: org.thymeleaf.standard.processor.StandardNonRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:rows,data-th-rows}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:content,data-th-content}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:draggable,data-th-draggable}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:classid,data-th-classid}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:accept,data-th-accept}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:frameborder,data-th-frameborder}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:accept-charset,data-th-accept-charset}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:keytype,data-th-keytype}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:icon,data-th-icon}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:scrolling,data-th-scrolling}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:longdesc,data-th-longdesc}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:wrap,data-th-wrap}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:summary,data-th-summary}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:sandbox,data-th-sandbox}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:frame,data-th-frame}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:compact,data-th-compact}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:axis,data-th-axis}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:archive,data-th-archive}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:for,data-th-for}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:scheme,data-th-scheme}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:rel,data-th-rel}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:id,data-th-id}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:high,data-th-high}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:preload,data-th-preload}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:formtarget,data-th-formtarget}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:abbr,data-th-abbr}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:audio,data-th-audio}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:enctype,data-th-enctype}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:contenteditable,data-th-contenteditable}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:media,data-th-media}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:rowspan,data-th-rowspan}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:target,data-th-target}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:list,data-th-list}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:low,data-th-low}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:start,data-th-start}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:accesskey,data-th-accesskey}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:charset,data-th-charset}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:cellpadding,data-th-cellpadding}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:http-equiv,data-th-http-equiv}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:span,data-th-span}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:height,data-th-height}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:pattern,data-th-pattern}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:maxlength,data-th-maxlength}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:dir,data-th-dir}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:placeholder,data-th-placeholder}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:max,data-th-max}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:manifest,data-th-manifest}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:step,data-th-step}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:standby,data-th-standby}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:srclang,data-th-srclang}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:class,data-th-class}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:scope,data-th-scope}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:challenge,data-th-challenge}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:valuetype,data-th-valuetype}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:rev,data-th-rev}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:codetype,data-th-codetype}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:bgcolor,data-th-bgcolor}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:cellspacing,data-th-cellspacing}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:poster,data-th-poster}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:codebase,data-th-codebase}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:colspan,data-th-colspan}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:vspace,data-th-vspace}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:cite,data-th-cite}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:kind,data-th-kind}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:form,data-th-form}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:rules,data-th-rules}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:hspace,data-th-hspace}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:background,data-th-background}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:width,data-th-width}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:data,data-th-data}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:headers,data-th-headers}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:dropzone,data-th-dropzone}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:contextmenu,data-th-contextmenu}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:formenctype,data-th-formenctype}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:marginheight,data-th-marginheight}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:tabindex,data-th-tabindex}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:usemap,data-th-usemap}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:radiogroup,data-th-radiogroup}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:alt,data-th-alt}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:title,data-th-title}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:formmethod,data-th-formmethod}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:cols,data-th-cols}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:size,data-th-size}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:min,data-th-min}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:marginwidth,data-th-marginwidth}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:optimum,data-th-optimum}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:lang,data-th-lang}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:style,data-th-style}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:hreflang,data-th-hreflang}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:border,data-th-border}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:autocomplete,data-th-autocomplete}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:sizes,data-th-sizes}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:formaction,data-th-formaction}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:datetime,data-th-datetime}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:spellcheck,data-th-spellcheck}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:align,data-th-align}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:label,data-th-label}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:src,data-th-src}] [1000]: org.thymeleaf.standard.processor.StandardSrcTagProcessor
[THYMELEAF]             * [* {th:value,data-th-value}] [1000]: org.thymeleaf.standard.processor.StandardValueTagProcessor
[THYMELEAF]             * [* {th:xmlbase,data-th-xmlbase}] [1000]: org.thymeleaf.standard.processor.StandardXmlBaseTagProcessor
[THYMELEAF]             * [* {th:xmllang,data-th-xmllang}] [1000]: org.thymeleaf.standard.processor.StandardXmlLangTagProcessor
[THYMELEAF]             * [* {xmlns:th}] [1000]: org.thymeleaf.standard.processor.StandardXmlNsTagProcessor
[THYMELEAF]             * [* {th:xmlspace,data-th-xmlspace}] [1000]: org.thymeleaf.standard.processor.StandardXmlSpaceTagProcessor
[THYMELEAF]             * [* {th:classappend,data-th-classappend}] [1100]: org.thymeleaf.standard.processor.StandardClassappendTagProcessor
[THYMELEAF]             * [* {th:styleappend,data-th-styleappend}] [1100]: org.thymeleaf.standard.processor.StandardStyleappendTagProcessor
[THYMELEAF]             * [* {th:text,data-th-text}] [1300]: org.thymeleaf.standard.processor.StandardTextTagProcessor
[THYMELEAF]             * [* {th:utext,data-th-utext}] [1400]: org.thymeleaf.standard.processor.StandardUtextTagProcessor
[THYMELEAF]             * [* {th:fragment,data-th-fragment}] [1500]: org.thymeleaf.standard.processor.StandardFragmentTagProcessor
[THYMELEAF]             * [* {th:assert,data-th-assert}] [1550]: org.thymeleaf.standard.processor.StandardAssertTagProcessor
[THYMELEAF]             * [* {th:remove,data-th-remove}] [1600]: org.thymeleaf.standard.processor.StandardRemoveTagProcessor
[THYMELEAF]             * [* {th:ref,data-th-ref}] [10000]: org.thymeleaf.standard.processor.StandardRefAttributeTagProcessor
[THYMELEAF]             * [{th:block,th-block} *] [100000]: org.thymeleaf.standard.processor.StandardBlockTagProcessor
[THYMELEAF]             * [* th:*] [2147483647]: org.thymeleaf.standard.processor.StandardDefaultAttributesTagProcessor
[THYMELEAF]         * Text Processors by [precedence]:
[THYMELEAF]             * [1000]: org.thymeleaf.standard.processor.StandardInliningTextProcessor
[THYMELEAF]         * DOCTYPE Processors by [precedence]:
[THYMELEAF]             * [1000]: org.thymeleaf.standard.processor.StandardTranslationDocTypeProcessor
[THYMELEAF]         * CDATA Section Processors by [precedence]:
[THYMELEAF]             * [1000]: org.thymeleaf.standard.processor.StandardInliningCDATASectionProcessor
[THYMELEAF]         * Comment Processors by [precedence]:
[THYMELEAF]             * [1000]: org.thymeleaf.standard.processor.StandardInliningCommentProcessor
[THYMELEAF]             * [1100]: org.thymeleaf.standard.processor.StandardConditionalCommentProcessor
[THYMELEAF]     * Processors for Template Mode: XML
[THYMELEAF]         * Element Tag Processors by [matching element and attribute name] [precedence]:
[THYMELEAF]             * [* {th:include}] [100]: org.thymeleaf.standard.processor.StandardIncludeTagProcessor
[THYMELEAF]             * [* {th:insert}] [100]: org.thymeleaf.standard.processor.StandardInsertTagProcessor
[THYMELEAF]             * [* {th:replace}] [100]: org.thymeleaf.standard.processor.StandardReplaceTagProcessor
[THYMELEAF]             * [* {th:each}] [200]: com.intuit.karate.template.KarateEachTagProcessor
[THYMELEAF]             * [* {th:switch}] [250]: org.thymeleaf.standard.processor.StandardSwitchTagProcessor
[THYMELEAF]             * [* {th:case}] [275]: org.thymeleaf.standard.processor.StandardCaseTagProcessor
[THYMELEAF]             * [* {th:if}] [300]: org.thymeleaf.standard.processor.StandardIfTagProcessor
[THYMELEAF]             * [* {th:unless}] [400]: org.thymeleaf.standard.processor.StandardUnlessTagProcessor
[THYMELEAF]             * [* {th:object}] [500]: org.thymeleaf.standard.processor.StandardObjectTagProcessor
[THYMELEAF]             * [* {th:with}] [600]: com.intuit.karate.template.KarateWithTagProcessor
[THYMELEAF]             * [* {th:attr}] [700]: com.intuit.karate.template.KarateAttributeTagProcessor.KarateAttrTagProcessor
[THYMELEAF]             * [* {th:attrappend}] [900]: com.intuit.karate.template.KarateAttributeTagProcessor.KarateAttrappendTagProcessor
[THYMELEAF]             * [* {th:attrprepend}] [900]: com.intuit.karate.template.KarateAttributeTagProcessor.KarateAttrprependTagProcessor
[THYMELEAF]             * [* {th:inline}] [1000]: org.thymeleaf.standard.processor.StandardInlineXMLTagProcessor
[THYMELEAF]             * [* {xmlns:th}] [1000]: org.thymeleaf.standard.processor.StandardXmlNsTagProcessor
[THYMELEAF]             * [* {th:text}] [1300]: org.thymeleaf.standard.processor.StandardTextTagProcessor
[THYMELEAF]             * [* {th:utext}] [1400]: org.thymeleaf.standard.processor.StandardUtextTagProcessor
[THYMELEAF]             * [* {th:fragment}] [1500]: org.thymeleaf.standard.processor.StandardFragmentTagProcessor
[THYMELEAF]             * [* {th:assert}] [1550]: org.thymeleaf.standard.processor.StandardAssertTagProcessor
[THYMELEAF]             * [* {th:remove}] [1600]: org.thymeleaf.standard.processor.StandardRemoveTagProcessor
[THYMELEAF]             * [* {th:ref}] [10000]: org.thymeleaf.standard.processor.StandardRefAttributeTagProcessor
[THYMELEAF]             * [{th:block} *] [100000]: org.thymeleaf.standard.processor.StandardBlockTagProcessor
[THYMELEAF]             * [* th:*] [2147483647]: org.thymeleaf.standard.processor.StandardDefaultAttributesTagProcessor
[THYMELEAF]         * Text Processors by [precedence]:
[THYMELEAF]             * [1000]: org.thymeleaf.standard.processor.StandardInliningTextProcessor
[THYMELEAF]         * CDATA Section Processors by [precedence]:
[THYMELEAF]             * [1000]: org.thymeleaf.standard.processor.StandardInliningCDATASectionProcessor
[THYMELEAF]         * Comment Processors by [precedence]:
[THYMELEAF]             * [1000]: org.thymeleaf.standard.processor.StandardInliningCommentProcessor
[THYMELEAF]     * Processors for Template Mode: TEXT
[THYMELEAF]         * Element Tag Processors by [matching element and attribute name] [precedence]:
[THYMELEAF]             * [* {th:insert}] [100]: org.thymeleaf.standard.processor.StandardInsertTagProcessor
[THYMELEAF]             * [* {th:replace}] [100]: org.thymeleaf.standard.processor.StandardReplaceTagProcessor
[THYMELEAF]             * [* {th:each}] [200]: com.intuit.karate.template.KarateEachTagProcessor
[THYMELEAF]             * [* {th:switch}] [250]: org.thymeleaf.standard.processor.StandardSwitchTagProcessor
[THYMELEAF]             * [* {th:case}] [275]: org.thymeleaf.standard.processor.StandardCaseTagProcessor
[THYMELEAF]             * [* {th:if}] [300]: org.thymeleaf.standard.processor.StandardIfTagProcessor
[THYMELEAF]             * [* {th:unless}] [400]: org.thymeleaf.standard.processor.StandardUnlessTagProcessor
[THYMELEAF]             * [* {th:object}] [500]: org.thymeleaf.standard.processor.StandardObjectTagProcessor
[THYMELEAF]             * [* {th:with}] [600]: com.intuit.karate.template.KarateWithTagProcessor
[THYMELEAF]             * [* {th:inline}] [1000]: org.thymeleaf.standard.processor.StandardInlineTextualTagProcessor
[THYMELEAF]             * [* {th:text}] [1300]: org.thymeleaf.standard.processor.StandardTextTagProcessor
[THYMELEAF]             * [* {th:utext}] [1400]: org.thymeleaf.standard.processor.StandardUtextTagProcessor
[THYMELEAF]             * [* {th:assert}] [1550]: org.thymeleaf.standard.processor.StandardAssertTagProcessor
[THYMELEAF]             * [* {th:remove}] [1600]: org.thymeleaf.standard.processor.StandardRemoveTagProcessor
[THYMELEAF]             * [* 100000] [org.thymeleaf.standard.processor.StandardBlockTagProcessor]: {}
[THYMELEAF]             * [{th:block} *] [100000]: org.thymeleaf.standard.processor.StandardBlockTagProcessor
[THYMELEAF]         * Text Processors by [precedence]:
[THYMELEAF]             * [1000]: org.thymeleaf.standard.processor.StandardInliningTextProcessor
[THYMELEAF]     * Processors for Template Mode: JAVASCRIPT
[THYMELEAF]         * Element Tag Processors by [matching element and attribute name] [precedence]:
[THYMELEAF]             * [* {th:insert}] [100]: org.thymeleaf.standard.processor.StandardInsertTagProcessor
[THYMELEAF]             * [* {th:replace}] [100]: org.thymeleaf.standard.processor.StandardReplaceTagProcessor
[THYMELEAF]             * [* {th:each}] [200]: com.intuit.karate.template.KarateEachTagProcessor
[THYMELEAF]             * [* {th:switch}] [250]: org.thymeleaf.standard.processor.StandardSwitchTagProcessor
[THYMELEAF]             * [* {th:case}] [275]: org.thymeleaf.standard.processor.StandardCaseTagProcessor
[THYMELEAF]             * [* {th:if}] [300]: org.thymeleaf.standard.processor.StandardIfTagProcessor
[THYMELEAF]             * [* {th:unless}] [400]: org.thymeleaf.standard.processor.StandardUnlessTagProcessor
[THYMELEAF]             * [* {th:object}] [500]: org.thymeleaf.standard.processor.StandardObjectTagProcessor
[THYMELEAF]             * [* {th:with}] [600]: com.intuit.karate.template.KarateWithTagProcessor
[THYMELEAF]             * [* {th:inline}] [1000]: org.thymeleaf.standard.processor.StandardInlineTextualTagProcessor
[THYMELEAF]             * [* {th:text}] [1300]: org.thymeleaf.standard.processor.StandardTextTagProcessor
[THYMELEAF]             * [* {th:utext}] [1400]: org.thymeleaf.standard.processor.StandardUtextTagProcessor
[THYMELEAF]             * [* {th:assert}] [1550]: org.thymeleaf.standard.processor.StandardAssertTagProcessor
[THYMELEAF]             * [* {th:remove}] [1600]: org.thymeleaf.standard.processor.StandardRemoveTagProcessor
[THYMELEAF]             * [* 100000] [org.thymeleaf.standard.processor.StandardBlockTagProcessor]: {}
[THYMELEAF]             * [{th:block} *] [100000]: org.thymeleaf.standard.processor.StandardBlockTagProcessor
[THYMELEAF]         * Text Processors by [precedence]:
[THYMELEAF]             * [1000]: org.thymeleaf.standard.processor.StandardInliningTextProcessor
[THYMELEAF]     * Processors for Template Mode: CSS
[THYMELEAF]         * Element Tag Processors by [matching element and attribute name] [precedence]:
[THYMELEAF]             * [* {th:insert}] [100]: org.thymeleaf.standard.processor.StandardInsertTagProcessor
[THYMELEAF]             * [* {th:replace}] [100]: org.thymeleaf.standard.processor.StandardReplaceTagProcessor
[THYMELEAF]             * [* {th:each}] [200]: com.intuit.karate.template.KarateEachTagProcessor
[THYMELEAF]             * [* {th:switch}] [250]: org.thymeleaf.standard.processor.StandardSwitchTagProcessor
[THYMELEAF]             * [* {th:case}] [275]: org.thymeleaf.standard.processor.StandardCaseTagProcessor
[THYMELEAF]             * [* {th:if}] [300]: org.thymeleaf.standard.processor.StandardIfTagProcessor
[THYMELEAF]             * [* {th:unless}] [400]: org.thymeleaf.standard.processor.StandardUnlessTagProcessor
[THYMELEAF]             * [* {th:object}] [500]: org.thymeleaf.standard.processor.StandardObjectTagProcessor
[THYMELEAF]             * [* {th:with}] [600]: com.intuit.karate.template.KarateWithTagProcessor
[THYMELEAF]             * [* {th:inline}] [1000]: org.thymeleaf.standard.processor.StandardInlineTextualTagProcessor
[THYMELEAF]             * [* {th:text}] [1300]: org.thymeleaf.standard.processor.StandardTextTagProcessor
[THYMELEAF]             * [* {th:utext}] [1400]: org.thymeleaf.standard.processor.StandardUtextTagProcessor
[THYMELEAF]             * [* {th:assert}] [1550]: org.thymeleaf.standard.processor.StandardAssertTagProcessor
[THYMELEAF]             * [* {th:remove}] [1600]: org.thymeleaf.standard.processor.StandardRemoveTagProcessor
[THYMELEAF]             * [* 100000] [org.thymeleaf.standard.processor.StandardBlockTagProcessor]: {}
[THYMELEAF]             * [{th:block} *] [100000]: org.thymeleaf.standard.processor.StandardBlockTagProcessor
[THYMELEAF]         * Text Processors by [precedence]:
[THYMELEAF]             * [1000]: org.thymeleaf.standard.processor.StandardInliningTextProcessor
[THYMELEAF]     * Expression Objects:
[THYMELEAF]         * #ctx
[THYMELEAF]         * #root
[THYMELEAF]         * #vars
[THYMELEAF]         * #object
[THYMELEAF]         * #locale
[THYMELEAF]         * #conversions
[THYMELEAF]         * #uris
[THYMELEAF]         * #temporals
[THYMELEAF]         * #calendars
[THYMELEAF]         * #dates
[THYMELEAF]         * #bools
[THYMELEAF]         * #numbers
[THYMELEAF]         * #objects
[THYMELEAF]         * #strings
[THYMELEAF]         * #arrays
[THYMELEAF]         * #lists
[THYMELEAF]         * #sets
[THYMELEAF]         * #maps
[THYMELEAF]         * #aggregates
[THYMELEAF]         * #messages
[THYMELEAF]         * #ids
[THYMELEAF]         * #execInfo
[THYMELEAF]         * #request
[THYMELEAF]         * #response
[THYMELEAF]         * #session
[THYMELEAF]         * #servletContext
[THYMELEAF]     * Execution Attributes:
[THYMELEAF]         * "StandardExpressionParser": com.intuit.karate.template.KarateStandardDialect@4c8abec7
[THYMELEAF]         * "StandardJavaScriptSerializer": org.thymeleaf.standard.serializer.StandardJavaScriptSerializer@291cbe70
[THYMELEAF]         * "StandardCSSSerializer": org.thymeleaf.standard.serializer.StandardCSSSerializer@6be422da
[THYMELEAF]         * "StandardVariableExpressionEvaluator": com.intuit.karate.template.KarateStandardDialect@4c8abec7
[THYMELEAF]         * "StandardConversionService": org.thymeleaf.standard.expression.StandardConversionService@225ddf5f
[THYMELEAF] * Dialect [2 of 2]: karate (com.intuit.karate.template.KarateScriptDialect)
[THYMELEAF]     * Prefix: "ka"
[THYMELEAF]     * Processors for Template Mode: HTML
[THYMELEAF]         * Element Tag Processors by [matching element and attribute name] [precedence]:
[THYMELEAF]             * [* {src}] [1000]: com.intuit.karate.template.KaScriptAttrProcessor
[THYMELEAF]         * Element Model Processors by [matching element and attribute name] [precedence]:
[THYMELEAF]             * [{script} {ka:scope,data-ka-scope}] [1000]: com.intuit.karate.template.KaScriptElemProcessor
[THYMELEAF]             * [* {ka:set,data-ka-set}] [1000]: com.intuit.karate.template.KaSetElemProcessor
[THYMELEAF] TEMPLATE ENGINE CONFIGURED OK
12:08:41.745 [Test worker] DEBUG org.thymeleaf.TemplateEngine -- [THYMELEAF] TEMPLATE ENGINE INITIALIZED
12:08:41.748 [Test worker] DEBUG org.thymeleaf.TemplateEngine -- [THYMELEAF] INITIALIZING TEMPLATE ENGINE
12:08:41.751 [Test worker] DEBUG org.thymeleaf.TemplateEngine.CONFIG -- Initializing Thymeleaf Template engine configuration...
[THYMELEAF] TEMPLATE ENGINE CONFIGURATION:
[THYMELEAF] * Thymeleaf version: 3.1.2.RELEASE (built 2023-07-30T19:25:50+0000)
[THYMELEAF] * Cache Manager implementation: org.thymeleaf.cache.StandardCacheManager
[THYMELEAF] * Template resolvers:
[THYMELEAF]     * [1] com.intuit.karate.template.ResourceHtmlTemplateResolver
[THYMELEAF] * Message resolvers:
[THYMELEAF]     * org.thymeleaf.messageresolver.StandardMessageResolver
[THYMELEAF] * Link builders:
[THYMELEAF]     * org.thymeleaf.linkbuilder.StandardLinkBuilder
[THYMELEAF] * Dialect [1 of 2]: Standard (com.intuit.karate.template.KarateStandardDialect)
[THYMELEAF]     * Prefix: "th"
[THYMELEAF]     * Processors for Template Mode: HTML
[THYMELEAF]         * Element Tag Processors by [matching element and attribute name] [precedence]:
[THYMELEAF]             * [* {th:include,data-th-include}] [100]: org.thymeleaf.standard.processor.StandardIncludeTagProcessor
[THYMELEAF]             * [* {th:insert,data-th-insert}] [100]: org.thymeleaf.standard.processor.StandardInsertTagProcessor
[THYMELEAF]             * [* {th:replace,data-th-replace}] [100]: org.thymeleaf.standard.processor.StandardReplaceTagProcessor
[THYMELEAF]             * [* {th:each,data-th-each}] [200]: com.intuit.karate.template.KarateEachTagProcessor
[THYMELEAF]             * [* {th:switch,data-th-switch}] [250]: org.thymeleaf.standard.processor.StandardSwitchTagProcessor
[THYMELEAF]             * [* {th:case,data-th-case}] [275]: org.thymeleaf.standard.processor.StandardCaseTagProcessor
[THYMELEAF]             * [* {th:if,data-th-if}] [300]: org.thymeleaf.standard.processor.StandardIfTagProcessor
[THYMELEAF]             * [* {th:unless,data-th-unless}] [400]: org.thymeleaf.standard.processor.StandardUnlessTagProcessor
[THYMELEAF]             * [* {th:object,data-th-object}] [500]: org.thymeleaf.standard.processor.StandardObjectTagProcessor
[THYMELEAF]             * [* {th:with,data-th-with}] [600]: com.intuit.karate.template.KarateWithTagProcessor
[THYMELEAF]             * [* {th:attr,data-th-attr}] [700]: com.intuit.karate.template.KarateAttributeTagProcessor.KarateAttrTagProcessor
[THYMELEAF]             * [* {th:attrappend,data-th-attrappend}] [900]: com.intuit.karate.template.KarateAttributeTagProcessor.KarateAttrappendTagProcessor
[THYMELEAF]             * [* {th:attrprepend,data-th-attrprepend}] [900]: com.intuit.karate.template.KarateAttributeTagProcessor.KarateAttrprependTagProcessor
[THYMELEAF]             * [* {th:alt-title,data-th-alt-title}] [990]: org.thymeleaf.standard.processor.StandardAltTitleTagProcessor
[THYMELEAF]             * [* {th:lang-xmllang,data-th-lang-xmllang}] [990]: org.thymeleaf.standard.processor.StandardLangXmlLangTagProcessor
[THYMELEAF]             * [* {th:action,data-th-action}] [1000]: org.thymeleaf.standard.processor.StandardActionTagProcessor
[THYMELEAF]             * [* {th:controls,data-th-controls}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:hidden,data-th-hidden}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:novalidate,data-th-novalidate}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:defer,data-th-defer}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:formnovalidate,data-th-formnovalidate}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:disabled,data-th-disabled}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:seamless,data-th-seamless}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:pubdate,data-th-pubdate}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:autoplay,data-th-autoplay}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:checked,data-th-checked}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:multiple,data-th-multiple}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:loop,data-th-loop}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:open,data-th-open}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:reversed,data-th-reversed}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:default,data-th-default}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:async,data-th-async}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:selected,data-th-selected}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:nowrap,data-th-nowrap}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:autofocus,data-th-autofocus}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:scoped,data-th-scoped}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:readonly,data-th-readonly}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:ismap,data-th-ismap}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:declare,data-th-declare}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:required,data-th-required}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:onchange,data-th-onchange}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onreadystatechange,data-th-onreadystatechange}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onended,data-th-onended}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:oncontextmenu,data-th-oncontextmenu}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onmousedown,data-th-onmousedown}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ondragleave,data-th-ondragleave}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:oninvalid,data-th-oninvalid}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onmousewheel,data-th-onmousewheel}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ondragover,data-th-ondragover}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ondragstart,data-th-ondragstart}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onloadstart,data-th-onloadstart}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onabort,data-th-onabort}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onredo,data-th-onredo}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onscroll,data-th-onscroll}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onmessage,data-th-onmessage}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onformchange,data-th-onformchange}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:oninput,data-th-oninput}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onmouseover,data-th-onmouseover}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onreset,data-th-onreset}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onclick,data-th-onclick}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onprogress,data-th-onprogress}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onforminput,data-th-onforminput}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onload,data-th-onload}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onmouseup,data-th-onmouseup}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onkeypress,data-th-onkeypress}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ondurationchange,data-th-ondurationchange}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onemptied,data-th-onemptied}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onratechange,data-th-onratechange}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onafterprint,data-th-onafterprint}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onvolumechange,data-th-onvolumechange}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onselect,data-th-onselect}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ondrag,data-th-ondrag}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onplay,data-th-onplay}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onstalled,data-th-onstalled}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onplaying,data-th-onplaying}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onpopstate,data-th-onpopstate}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onoffline,data-th-onoffline}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onerror,data-th-onerror}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onshow,data-th-onshow}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:oncanplay,data-th-oncanplay}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onmouseout,data-th-onmouseout}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onseeked,data-th-onseeked}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onundo,data-th-onundo}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onstorage,data-th-onstorage}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onwaiting,data-th-onwaiting}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onsubmit,data-th-onsubmit}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onpause,data-th-onpause}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ondblclick,data-th-ondblclick}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ondragenter,data-th-ondragenter}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onkeydown,data-th-onkeydown}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onbeforeprint,data-th-onbeforeprint}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onloadeddata,data-th-onloadeddata}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ondrop,data-th-ondrop}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onsuspend,data-th-onsuspend}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onresize,data-th-onresize}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onhashchange,data-th-onhashchange}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ondragend,data-th-ondragend}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onbeforeunload,data-th-onbeforeunload}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onblur,data-th-onblur}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:oncanplaythrough,data-th-oncanplaythrough}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onseeking,data-th-onseeking}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onloadedmetadata,data-th-onloadedmetadata}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onfocus,data-th-onfocus}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ontimeupdate,data-th-ontimeupdate}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onmousemove,data-th-onmousemove}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onunload,data-th-onunload}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onkeyup,data-th-onkeyup}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ononline,data-th-ononline}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:href,data-th-href}] [1000]: org.thymeleaf.standard.processor.StandardHrefTagProcessor
[THYMELEAF]             * [* {th:inline,data-th-inline}] [1000]: org.thymeleaf.standard.processor.StandardInlineHTMLTagProcessor
[THYMELEAF]             * [* {th:method,data-th-method}] [1000]: org.thymeleaf.standard.processor.StandardMethodTagProcessor
[THYMELEAF]             * [* {th:name,data-th-name}] [1000]: org.thymeleaf.standard.processor.StandardNonRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:type,data-th-type}] [1000]: org.thymeleaf.standard.processor.StandardNonRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:formenctype,data-th-formenctype}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:preload,data-th-preload}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:media,data-th-media}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:rules,data-th-rules}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:target,data-th-target}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:formtarget,data-th-formtarget}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:bgcolor,data-th-bgcolor}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:cellpadding,data-th-cellpadding}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:max,data-th-max}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:size,data-th-size}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:standby,data-th-standby}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:scheme,data-th-scheme}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:icon,data-th-icon}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:rev,data-th-rev}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:autocomplete,data-th-autocomplete}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:cellspacing,data-th-cellspacing}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:tabindex,data-th-tabindex}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:pattern,data-th-pattern}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:width,data-th-width}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:codetype,data-th-codetype}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:rows,data-th-rows}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:scope,data-th-scope}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:for,data-th-for}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:frame,data-th-frame}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:title,data-th-title}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:radiogroup,data-th-radiogroup}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:challenge,data-th-challenge}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:id,data-th-id}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:rel,data-th-rel}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:usemap,data-th-usemap}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:content,data-th-content}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:charset,data-th-charset}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:alt,data-th-alt}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:class,data-th-class}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:spellcheck,data-th-spellcheck}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:align,data-th-align}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:poster,data-th-poster}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:abbr,data-th-abbr}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:contenteditable,data-th-contenteditable}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:compact,data-th-compact}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:background,data-th-background}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:optimum,data-th-optimum}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:formmethod,data-th-formmethod}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:style,data-th-style}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:high,data-th-high}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:hreflang,data-th-hreflang}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:hspace,data-th-hspace}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:datetime,data-th-datetime}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:border,data-th-border}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:colspan,data-th-colspan}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:axis,data-th-axis}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:placeholder,data-th-placeholder}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:data,data-th-data}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:draggable,data-th-draggable}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:accept-charset,data-th-accept-charset}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:span,data-th-span}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:summary,data-th-summary}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:classid,data-th-classid}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:longdesc,data-th-longdesc}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:min,data-th-min}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:srclang,data-th-srclang}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:audio,data-th-audio}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:codebase,data-th-codebase}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:maxlength,data-th-maxlength}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:headers,data-th-headers}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:contextmenu,data-th-contextmenu}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:vspace,data-th-vspace}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:formaction,data-th-formaction}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:wrap,data-th-wrap}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:sandbox,data-th-sandbox}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:rowspan,data-th-rowspan}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:form,data-th-form}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:valuetype,data-th-valuetype}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:marginheight,data-th-marginheight}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:scrolling,data-th-scrolling}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:cols,data-th-cols}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:height,data-th-height}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:label,data-th-label}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:archive,data-th-archive}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:cite,data-th-cite}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:manifest,data-th-manifest}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:accesskey,data-th-accesskey}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:enctype,data-th-enctype}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:http-equiv,data-th-http-equiv}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:start,data-th-start}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:keytype,data-th-keytype}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:lang,data-th-lang}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:step,data-th-step}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:dropzone,data-th-dropzone}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:low,data-th-low}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:accept,data-th-accept}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:frameborder,data-th-frameborder}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:list,data-th-list}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:marginwidth,data-th-marginwidth}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:kind,data-th-kind}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:dir,data-th-dir}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:sizes,data-th-sizes}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:src,data-th-src}] [1000]: org.thymeleaf.standard.processor.StandardSrcTagProcessor
[THYMELEAF]             * [* {th:value,data-th-value}] [1000]: org.thymeleaf.standard.processor.StandardValueTagProcessor
[THYMELEAF]             * [* {th:xmlbase,data-th-xmlbase}] [1000]: org.thymeleaf.standard.processor.StandardXmlBaseTagProcessor
[THYMELEAF]             * [* {th:xmllang,data-th-xmllang}] [1000]: org.thymeleaf.standard.processor.StandardXmlLangTagProcessor
[THYMELEAF]             * [* {xmlns:th}] [1000]: org.thymeleaf.standard.processor.StandardXmlNsTagProcessor
[THYMELEAF]             * [* {th:xmlspace,data-th-xmlspace}] [1000]: org.thymeleaf.standard.processor.StandardXmlSpaceTagProcessor
[THYMELEAF]             * [* {th:classappend,data-th-classappend}] [1100]: org.thymeleaf.standard.processor.StandardClassappendTagProcessor
[THYMELEAF]             * [* {th:styleappend,data-th-styleappend}] [1100]: org.thymeleaf.standard.processor.StandardStyleappendTagProcessor
[THYMELEAF]             * [* {th:text,data-th-text}] [1300]: org.thymeleaf.standard.processor.StandardTextTagProcessor
[THYMELEAF]             * [* {th:utext,data-th-utext}] [1400]: org.thymeleaf.standard.processor.StandardUtextTagProcessor
[THYMELEAF]             * [* {th:fragment,data-th-fragment}] [1500]: org.thymeleaf.standard.processor.StandardFragmentTagProcessor
[THYMELEAF]             * [* {th:assert,data-th-assert}] [1550]: org.thymeleaf.standard.processor.StandardAssertTagProcessor
[THYMELEAF]             * [* {th:remove,data-th-remove}] [1600]: org.thymeleaf.standard.processor.StandardRemoveTagProcessor
[THYMELEAF]             * [* {th:ref,data-th-ref}] [10000]: org.thymeleaf.standard.processor.StandardRefAttributeTagProcessor
[THYMELEAF]             * [{th:block,th-block} *] [100000]: org.thymeleaf.standard.processor.StandardBlockTagProcessor
[THYMELEAF]             * [* th:*] [2147483647]: org.thymeleaf.standard.processor.StandardDefaultAttributesTagProcessor
[THYMELEAF]         * Text Processors by [precedence]:
[THYMELEAF]             * [1000]: org.thymeleaf.standard.processor.StandardInliningTextProcessor
[THYMELEAF]         * DOCTYPE Processors by [precedence]:
[THYMELEAF]             * [1000]: org.thymeleaf.standard.processor.StandardTranslationDocTypeProcessor
[THYMELEAF]         * CDATA Section Processors by [precedence]:
[THYMELEAF]             * [1000]: org.thymeleaf.standard.processor.StandardInliningCDATASectionProcessor
[THYMELEAF]         * Comment Processors by [precedence]:
[THYMELEAF]             * [1000]: org.thymeleaf.standard.processor.StandardInliningCommentProcessor
[THYMELEAF]             * [1100]: org.thymeleaf.standard.processor.StandardConditionalCommentProcessor
[THYMELEAF]     * Processors for Template Mode: XML
[THYMELEAF]         * Element Tag Processors by [matching element and attribute name] [precedence]:
[THYMELEAF]             * [* {th:include}] [100]: org.thymeleaf.standard.processor.StandardIncludeTagProcessor
[THYMELEAF]             * [* {th:insert}] [100]: org.thymeleaf.standard.processor.StandardInsertTagProcessor
[THYMELEAF]             * [* {th:replace}] [100]: org.thymeleaf.standard.processor.StandardReplaceTagProcessor
[THYMELEAF]             * [* {th:each}] [200]: com.intuit.karate.template.KarateEachTagProcessor
[THYMELEAF]             * [* {th:switch}] [250]: org.thymeleaf.standard.processor.StandardSwitchTagProcessor
[THYMELEAF]             * [* {th:case}] [275]: org.thymeleaf.standard.processor.StandardCaseTagProcessor
[THYMELEAF]             * [* {th:if}] [300]: org.thymeleaf.standard.processor.StandardIfTagProcessor
[THYMELEAF]             * [* {th:unless}] [400]: org.thymeleaf.standard.processor.StandardUnlessTagProcessor
[THYMELEAF]             * [* {th:object}] [500]: org.thymeleaf.standard.processor.StandardObjectTagProcessor
[THYMELEAF]             * [* {th:with}] [600]: com.intuit.karate.template.KarateWithTagProcessor
[THYMELEAF]             * [* {th:attr}] [700]: com.intuit.karate.template.KarateAttributeTagProcessor.KarateAttrTagProcessor
[THYMELEAF]             * [* {th:attrappend}] [900]: com.intuit.karate.template.KarateAttributeTagProcessor.KarateAttrappendTagProcessor
[THYMELEAF]             * [* {th:attrprepend}] [900]: com.intuit.karate.template.KarateAttributeTagProcessor.KarateAttrprependTagProcessor
[THYMELEAF]             * [* {th:inline}] [1000]: org.thymeleaf.standard.processor.StandardInlineXMLTagProcessor
[THYMELEAF]             * [* {xmlns:th}] [1000]: org.thymeleaf.standard.processor.StandardXmlNsTagProcessor
[THYMELEAF]             * [* {th:text}] [1300]: org.thymeleaf.standard.processor.StandardTextTagProcessor
[THYMELEAF]             * [* {th:utext}] [1400]: org.thymeleaf.standard.processor.StandardUtextTagProcessor
[THYMELEAF]             * [* {th:fragment}] [1500]: org.thymeleaf.standard.processor.StandardFragmentTagProcessor
[THYMELEAF]             * [* {th:assert}] [1550]: org.thymeleaf.standard.processor.StandardAssertTagProcessor
[THYMELEAF]             * [* {th:remove}] [1600]: org.thymeleaf.standard.processor.StandardRemoveTagProcessor
[THYMELEAF]             * [* {th:ref}] [10000]: org.thymeleaf.standard.processor.StandardRefAttributeTagProcessor
[THYMELEAF]             * [{th:block} *] [100000]: org.thymeleaf.standard.processor.StandardBlockTagProcessor
[THYMELEAF]             * [* th:*] [2147483647]: org.thymeleaf.standard.processor.StandardDefaultAttributesTagProcessor
[THYMELEAF]         * Text Processors by [precedence]:
[THYMELEAF]             * [1000]: org.thymeleaf.standard.processor.StandardInliningTextProcessor
[THYMELEAF]         * CDATA Section Processors by [precedence]:
[THYMELEAF]             * [1000]: org.thymeleaf.standard.processor.StandardInliningCDATASectionProcessor
[THYMELEAF]         * Comment Processors by [precedence]:
[THYMELEAF]             * [1000]: org.thymeleaf.standard.processor.StandardInliningCommentProcessor
[THYMELEAF]     * Processors for Template Mode: TEXT
[THYMELEAF]         * Element Tag Processors by [matching element and attribute name] [precedence]:
[THYMELEAF]             * [* {th:insert}] [100]: org.thymeleaf.standard.processor.StandardInsertTagProcessor
[THYMELEAF]             * [* {th:replace}] [100]: org.thymeleaf.standard.processor.StandardReplaceTagProcessor
[THYMELEAF]             * [* {th:each}] [200]: com.intuit.karate.template.KarateEachTagProcessor
[THYMELEAF]             * [* {th:switch}] [250]: org.thymeleaf.standard.processor.StandardSwitchTagProcessor
[THYMELEAF]             * [* {th:case}] [275]: org.thymeleaf.standard.processor.StandardCaseTagProcessor
[THYMELEAF]             * [* {th:if}] [300]: org.thymeleaf.standard.processor.StandardIfTagProcessor
[THYMELEAF]             * [* {th:unless}] [400]: org.thymeleaf.standard.processor.StandardUnlessTagProcessor
[THYMELEAF]             * [* {th:object}] [500]: org.thymeleaf.standard.processor.StandardObjectTagProcessor
[THYMELEAF]             * [* {th:with}] [600]: com.intuit.karate.template.KarateWithTagProcessor
[THYMELEAF]             * [* {th:inline}] [1000]: org.thymeleaf.standard.processor.StandardInlineTextualTagProcessor
[THYMELEAF]             * [* {th:text}] [1300]: org.thymeleaf.standard.processor.StandardTextTagProcessor
[THYMELEAF]             * [* {th:utext}] [1400]: org.thymeleaf.standard.processor.StandardUtextTagProcessor
[THYMELEAF]             * [* {th:assert}] [1550]: org.thymeleaf.standard.processor.StandardAssertTagProcessor
[THYMELEAF]             * [* {th:remove}] [1600]: org.thymeleaf.standard.processor.StandardRemoveTagProcessor
[THYMELEAF]             * [* 100000] [org.thymeleaf.standard.processor.StandardBlockTagProcessor]: {}
[THYMELEAF]             * [{th:block} *] [100000]: org.thymeleaf.standard.processor.StandardBlockTagProcessor
[THYMELEAF]         * Text Processors by [precedence]:
[THYMELEAF]             * [1000]: org.thymeleaf.standard.processor.StandardInliningTextProcessor
[THYMELEAF]     * Processors for Template Mode: JAVASCRIPT
[THYMELEAF]         * Element Tag Processors by [matching element and attribute name] [precedence]:
[THYMELEAF]             * [* {th:insert}] [100]: org.thymeleaf.standard.processor.StandardInsertTagProcessor
[THYMELEAF]             * [* {th:replace}] [100]: org.thymeleaf.standard.processor.StandardReplaceTagProcessor
[THYMELEAF]             * [* {th:each}] [200]: com.intuit.karate.template.KarateEachTagProcessor
[THYMELEAF]             * [* {th:switch}] [250]: org.thymeleaf.standard.processor.StandardSwitchTagProcessor
[THYMELEAF]             * [* {th:case}] [275]: org.thymeleaf.standard.processor.StandardCaseTagProcessor
[THYMELEAF]             * [* {th:if}] [300]: org.thymeleaf.standard.processor.StandardIfTagProcessor
[THYMELEAF]             * [* {th:unless}] [400]: org.thymeleaf.standard.processor.StandardUnlessTagProcessor
[THYMELEAF]             * [* {th:object}] [500]: org.thymeleaf.standard.processor.StandardObjectTagProcessor
[THYMELEAF]             * [* {th:with}] [600]: com.intuit.karate.template.KarateWithTagProcessor
[THYMELEAF]             * [* {th:inline}] [1000]: org.thymeleaf.standard.processor.StandardInlineTextualTagProcessor
[THYMELEAF]             * [* {th:text}] [1300]: org.thymeleaf.standard.processor.StandardTextTagProcessor
[THYMELEAF]             * [* {th:utext}] [1400]: org.thymeleaf.standard.processor.StandardUtextTagProcessor
[THYMELEAF]             * [* {th:assert}] [1550]: org.thymeleaf.standard.processor.StandardAssertTagProcessor
[THYMELEAF]             * [* {th:remove}] [1600]: org.thymeleaf.standard.processor.StandardRemoveTagProcessor
[THYMELEAF]             * [{th:block} *] [100000]: org.thymeleaf.standard.processor.StandardBlockTagProcessor
[THYMELEAF]             * [* 100000] [org.thymeleaf.standard.processor.StandardBlockTagProcessor]: {}
[THYMELEAF]         * Text Processors by [precedence]:
[THYMELEAF]             * [1000]: org.thymeleaf.standard.processor.StandardInliningTextProcessor
[THYMELEAF]     * Processors for Template Mode: CSS
[THYMELEAF]         * Element Tag Processors by [matching element and attribute name] [precedence]:
[THYMELEAF]             * [* {th:insert}] [100]: org.thymeleaf.standard.processor.StandardInsertTagProcessor
[THYMELEAF]             * [* {th:replace}] [100]: org.thymeleaf.standard.processor.StandardReplaceTagProcessor
[THYMELEAF]             * [* {th:each}] [200]: com.intuit.karate.template.KarateEachTagProcessor
[THYMELEAF]             * [* {th:switch}] [250]: org.thymeleaf.standard.processor.StandardSwitchTagProcessor
[THYMELEAF]             * [* {th:case}] [275]: org.thymeleaf.standard.processor.StandardCaseTagProcessor
[THYMELEAF]             * [* {th:if}] [300]: org.thymeleaf.standard.processor.StandardIfTagProcessor
[THYMELEAF]             * [* {th:unless}] [400]: org.thymeleaf.standard.processor.StandardUnlessTagProcessor
[THYMELEAF]             * [* {th:object}] [500]: org.thymeleaf.standard.processor.StandardObjectTagProcessor
[THYMELEAF]             * [* {th:with}] [600]: com.intuit.karate.template.KarateWithTagProcessor
[THYMELEAF]             * [* {th:inline}] [1000]: org.thymeleaf.standard.processor.StandardInlineTextualTagProcessor
[THYMELEAF]             * [* {th:text}] [1300]: org.thymeleaf.standard.processor.StandardTextTagProcessor
[THYMELEAF]             * [* {th:utext}] [1400]: org.thymeleaf.standard.processor.StandardUtextTagProcessor
[THYMELEAF]             * [* {th:assert}] [1550]: org.thymeleaf.standard.processor.StandardAssertTagProcessor
[THYMELEAF]             * [* {th:remove}] [1600]: org.thymeleaf.standard.processor.StandardRemoveTagProcessor
[THYMELEAF]             * [* 100000] [org.thymeleaf.standard.processor.StandardBlockTagProcessor]: {}
[THYMELEAF]             * [{th:block} *] [100000]: org.thymeleaf.standard.processor.StandardBlockTagProcessor
[THYMELEAF]         * Text Processors by [precedence]:
[THYMELEAF]             * [1000]: org.thymeleaf.standard.processor.StandardInliningTextProcessor
[THYMELEAF]     * Expression Objects:
[THYMELEAF]         * #ctx
[THYMELEAF]         * #root
[THYMELEAF]         * #vars
[THYMELEAF]         * #object
[THYMELEAF]         * #locale
[THYMELEAF]         * #conversions
[THYMELEAF]         * #uris
[THYMELEAF]         * #temporals
[THYMELEAF]         * #calendars
[THYMELEAF]         * #dates
[THYMELEAF]         * #bools
[THYMELEAF]         * #numbers
[THYMELEAF]         * #objects
[THYMELEAF]         * #strings
[THYMELEAF]         * #arrays
[THYMELEAF]         * #lists
[THYMELEAF]         * #sets
[THYMELEAF]         * #maps
[THYMELEAF]         * #aggregates
[THYMELEAF]         * #messages
[THYMELEAF]         * #ids
[THYMELEAF]         * #execInfo
[THYMELEAF]         * #request
[THYMELEAF]         * #response
[THYMELEAF]         * #session
[THYMELEAF]         * #servletContext
[THYMELEAF]     * Execution Attributes:
[THYMELEAF]         * "StandardExpressionParser": com.intuit.karate.template.KarateStandardDialect@703cb756
[THYMELEAF]         * "StandardJavaScriptSerializer": org.thymeleaf.standard.serializer.StandardJavaScriptSerializer@7adff6cb
[THYMELEAF]         * "StandardCSSSerializer": org.thymeleaf.standard.serializer.StandardCSSSerializer@13ebccd
[THYMELEAF]         * "StandardVariableExpressionEvaluator": com.intuit.karate.template.KarateStandardDialect@703cb756
[THYMELEAF]         * "StandardConversionService": org.thymeleaf.standard.expression.StandardConversionService@4e80960a
[THYMELEAF] * Dialect [2 of 2]: karate (com.intuit.karate.template.KarateScriptDialect)
[THYMELEAF]     * Prefix: "ka"
[THYMELEAF]     * Processors for Template Mode: HTML
[THYMELEAF]         * Element Tag Processors by [matching element and attribute name] [precedence]:
[THYMELEAF]             * [* {src}] [1000]: com.intuit.karate.template.KaScriptAttrProcessor
[THYMELEAF]         * Element Model Processors by [matching element and attribute name] [precedence]:
[THYMELEAF]             * [{script} {ka:scope,data-ka-scope}] [1000]: com.intuit.karate.template.KaScriptElemProcessor
[THYMELEAF]             * [* {ka:set,data-ka-set}] [1000]: com.intuit.karate.template.KaSetElemProcessor
[THYMELEAF] TEMPLATE ENGINE CONFIGURED OK
12:08:41.751 [Test worker] DEBUG org.thymeleaf.TemplateEngine -- [THYMELEAF] TEMPLATE ENGINE INITIALIZED
12:08:41.767 [Test worker] DEBUG org.thymeleaf.TemplateEngine -- [THYMELEAF] INITIALIZING TEMPLATE ENGINE
12:08:41.769 [Test worker] DEBUG org.thymeleaf.TemplateEngine.CONFIG -- Initializing Thymeleaf Template engine configuration...
[THYMELEAF] TEMPLATE ENGINE CONFIGURATION:
[THYMELEAF] * Thymeleaf version: 3.1.2.RELEASE (built 2023-07-30T19:25:50+0000)
[THYMELEAF] * Cache Manager implementation: org.thymeleaf.cache.StandardCacheManager
[THYMELEAF] * Template resolvers:
[THYMELEAF]     * [1] com.intuit.karate.template.ResourceHtmlTemplateResolver
[THYMELEAF] * Message resolvers:
[THYMELEAF]     * org.thymeleaf.messageresolver.StandardMessageResolver
[THYMELEAF] * Link builders:
[THYMELEAF]     * org.thymeleaf.linkbuilder.StandardLinkBuilder
[THYMELEAF] * Dialect [1 of 2]: Standard (com.intuit.karate.template.KarateStandardDialect)
[THYMELEAF]     * Prefix: "th"
[THYMELEAF]     * Processors for Template Mode: HTML
[THYMELEAF]         * Element Tag Processors by [matching element and attribute name] [precedence]:
[THYMELEAF]             * [* {th:include,data-th-include}] [100]: org.thymeleaf.standard.processor.StandardIncludeTagProcessor
[THYMELEAF]             * [* {th:insert,data-th-insert}] [100]: org.thymeleaf.standard.processor.StandardInsertTagProcessor
[THYMELEAF]             * [* {th:replace,data-th-replace}] [100]: org.thymeleaf.standard.processor.StandardReplaceTagProcessor
[THYMELEAF]             * [* {th:each,data-th-each}] [200]: com.intuit.karate.template.KarateEachTagProcessor
[THYMELEAF]             * [* {th:switch,data-th-switch}] [250]: org.thymeleaf.standard.processor.StandardSwitchTagProcessor
[THYMELEAF]             * [* {th:case,data-th-case}] [275]: org.thymeleaf.standard.processor.StandardCaseTagProcessor
[THYMELEAF]             * [* {th:if,data-th-if}] [300]: org.thymeleaf.standard.processor.StandardIfTagProcessor
[THYMELEAF]             * [* {th:unless,data-th-unless}] [400]: org.thymeleaf.standard.processor.StandardUnlessTagProcessor
[THYMELEAF]             * [* {th:object,data-th-object}] [500]: org.thymeleaf.standard.processor.StandardObjectTagProcessor
[THYMELEAF]             * [* {th:with,data-th-with}] [600]: com.intuit.karate.template.KarateWithTagProcessor
[THYMELEAF]             * [* {th:attr,data-th-attr}] [700]: com.intuit.karate.template.KarateAttributeTagProcessor.KarateAttrTagProcessor
[THYMELEAF]             * [* {th:attrappend,data-th-attrappend}] [900]: com.intuit.karate.template.KarateAttributeTagProcessor.KarateAttrappendTagProcessor
[THYMELEAF]             * [* {th:attrprepend,data-th-attrprepend}] [900]: com.intuit.karate.template.KarateAttributeTagProcessor.KarateAttrprependTagProcessor
[THYMELEAF]             * [* {th:alt-title,data-th-alt-title}] [990]: org.thymeleaf.standard.processor.StandardAltTitleTagProcessor
[THYMELEAF]             * [* {th:lang-xmllang,data-th-lang-xmllang}] [990]: org.thymeleaf.standard.processor.StandardLangXmlLangTagProcessor
[THYMELEAF]             * [* {th:action,data-th-action}] [1000]: org.thymeleaf.standard.processor.StandardActionTagProcessor
[THYMELEAF]             * [* {th:pubdate,data-th-pubdate}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:open,data-th-open}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:formnovalidate,data-th-formnovalidate}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:checked,data-th-checked}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:loop,data-th-loop}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:seamless,data-th-seamless}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:declare,data-th-declare}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:defer,data-th-defer}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:scoped,data-th-scoped}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:hidden,data-th-hidden}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:multiple,data-th-multiple}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:autofocus,data-th-autofocus}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:async,data-th-async}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:ismap,data-th-ismap}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:required,data-th-required}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:nowrap,data-th-nowrap}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:novalidate,data-th-novalidate}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:reversed,data-th-reversed}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:controls,data-th-controls}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:readonly,data-th-readonly}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:disabled,data-th-disabled}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:default,data-th-default}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:selected,data-th-selected}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:autoplay,data-th-autoplay}] [1000]: org.thymeleaf.standard.processor.StandardConditionalFixedValueTagProcessor
[THYMELEAF]             * [* {th:onerror,data-th-onerror}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onafterprint,data-th-onafterprint}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onsubmit,data-th-onsubmit}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ondurationchange,data-th-ondurationchange}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onkeyup,data-th-onkeyup}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ondrop,data-th-ondrop}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:oninput,data-th-oninput}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ondragleave,data-th-ondragleave}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onshow,data-th-onshow}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ontimeupdate,data-th-ontimeupdate}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onmousewheel,data-th-onmousewheel}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ondragenter,data-th-ondragenter}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ondragover,data-th-ondragover}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ononline,data-th-ononline}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onvolumechange,data-th-onvolumechange}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:oncanplaythrough,data-th-oncanplaythrough}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onunload,data-th-onunload}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onkeydown,data-th-onkeydown}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ondblclick,data-th-ondblclick}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onpause,data-th-onpause}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onprogress,data-th-onprogress}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onstalled,data-th-onstalled}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onundo,data-th-onundo}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onselect,data-th-onselect}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onpopstate,data-th-onpopstate}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onstorage,data-th-onstorage}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onoffline,data-th-onoffline}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onreset,data-th-onreset}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onsuspend,data-th-onsuspend}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onbeforeprint,data-th-onbeforeprint}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onended,data-th-onended}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onredo,data-th-onredo}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onmessage,data-th-onmessage}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onchange,data-th-onchange}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onbeforeunload,data-th-onbeforeunload}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onseeked,data-th-onseeked}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ondrag,data-th-ondrag}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:oncontextmenu,data-th-oncontextmenu}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onratechange,data-th-onratechange}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onkeypress,data-th-onkeypress}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onresize,data-th-onresize}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onemptied,data-th-onemptied}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onwaiting,data-th-onwaiting}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onclick,data-th-onclick}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ondragstart,data-th-ondragstart}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onabort,data-th-onabort}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onloadedmetadata,data-th-onloadedmetadata}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onload,data-th-onload}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:oninvalid,data-th-oninvalid}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:ondragend,data-th-ondragend}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onmouseout,data-th-onmouseout}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onloadstart,data-th-onloadstart}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onmouseup,data-th-onmouseup}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onmousemove,data-th-onmousemove}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onplay,data-th-onplay}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onmouseover,data-th-onmouseover}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onforminput,data-th-onforminput}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onfocus,data-th-onfocus}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:oncanplay,data-th-oncanplay}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onloadeddata,data-th-onloadeddata}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onplaying,data-th-onplaying}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onscroll,data-th-onscroll}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onseeking,data-th-onseeking}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onhashchange,data-th-onhashchange}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onblur,data-th-onblur}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onreadystatechange,data-th-onreadystatechange}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onformchange,data-th-onformchange}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:onmousedown,data-th-onmousedown}] [1000]: org.thymeleaf.standard.processor.StandardDOMEventAttributeTagProcessor
[THYMELEAF]             * [* {th:href,data-th-href}] [1000]: org.thymeleaf.standard.processor.StandardHrefTagProcessor
[THYMELEAF]             * [* {th:inline,data-th-inline}] [1000]: org.thymeleaf.standard.processor.StandardInlineHTMLTagProcessor
[THYMELEAF]             * [* {th:method,data-th-method}] [1000]: org.thymeleaf.standard.processor.StandardMethodTagProcessor
[THYMELEAF]             * [* {th:type,data-th-type}] [1000]: org.thymeleaf.standard.processor.StandardNonRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:name,data-th-name}] [1000]: org.thymeleaf.standard.processor.StandardNonRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:accept-charset,data-th-accept-charset}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:media,data-th-media}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:challenge,data-th-challenge}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:frameborder,data-th-frameborder}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:http-equiv,data-th-http-equiv}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:rel,data-th-rel}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:high,data-th-high}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:preload,data-th-preload}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:spellcheck,data-th-spellcheck}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:sandbox,data-th-sandbox}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:step,data-th-step}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:style,data-th-style}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:target,data-th-target}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:formenctype,data-th-formenctype}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:contextmenu,data-th-contextmenu}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:cite,data-th-cite}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:form,data-th-form}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:list,data-th-list}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:compact,data-th-compact}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:codebase,data-th-codebase}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:rowspan,data-th-rowspan}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:icon,data-th-icon}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:class,data-th-class}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:abbr,data-th-abbr}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:headers,data-th-headers}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:valuetype,data-th-valuetype}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:height,data-th-height}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:id,data-th-id}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:start,data-th-start}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:maxlength,data-th-maxlength}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:dir,data-th-dir}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:usemap,data-th-usemap}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:marginheight,data-th-marginheight}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:data,data-th-data}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:hspace,data-th-hspace}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:optimum,data-th-optimum}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:datetime,data-th-datetime}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:size,data-th-size}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:scope,data-th-scope}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:enctype,data-th-enctype}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:lang,data-th-lang}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:accept,data-th-accept}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:formtarget,data-th-formtarget}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:rows,data-th-rows}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:manifest,data-th-manifest}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:scrolling,data-th-scrolling}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:span,data-th-span}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:pattern,data-th-pattern}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:placeholder,data-th-placeholder}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:cols,data-th-cols}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:rev,data-th-rev}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:low,data-th-low}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:align,data-th-align}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:scheme,data-th-scheme}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:formaction,data-th-formaction}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:srclang,data-th-srclang}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:audio,data-th-audio}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:keytype,data-th-keytype}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:for,data-th-for}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:vspace,data-th-vspace}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:cellpadding,data-th-cellpadding}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:min,data-th-min}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:label,data-th-label}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:formmethod,data-th-formmethod}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:accesskey,data-th-accesskey}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:max,data-th-max}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:summary,data-th-summary}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:marginwidth,data-th-marginwidth}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:content,data-th-content}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:codetype,data-th-codetype}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:autocomplete,data-th-autocomplete}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:background,data-th-background}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:hreflang,data-th-hreflang}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:width,data-th-width}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:title,data-th-title}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:alt,data-th-alt}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:archive,data-th-archive}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:poster,data-th-poster}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:colspan,data-th-colspan}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:classid,data-th-classid}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:frame,data-th-frame}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:draggable,data-th-draggable}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:radiogroup,data-th-radiogroup}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:sizes,data-th-sizes}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:bgcolor,data-th-bgcolor}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:rules,data-th-rules}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:charset,data-th-charset}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:wrap,data-th-wrap}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:dropzone,data-th-dropzone}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:longdesc,data-th-longdesc}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:border,data-th-border}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:kind,data-th-kind}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:axis,data-th-axis}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:standby,data-th-standby}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:contenteditable,data-th-contenteditable}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:cellspacing,data-th-cellspacing}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:tabindex,data-th-tabindex}] [1000]: org.thymeleaf.standard.processor.StandardRemovableAttributeTagProcessor
[THYMELEAF]             * [* {th:src,data-th-src}] [1000]: org.thymeleaf.standard.processor.StandardSrcTagProcessor
[THYMELEAF]             * [* {th:value,data-th-value}] [1000]: org.thymeleaf.standard.processor.StandardValueTagProcessor
[THYMELEAF]             * [* {th:xmlbase,data-th-xmlbase}] [1000]: org.thymeleaf.standard.processor.StandardXmlBaseTagProcessor
[THYMELEAF]             * [* {th:xmllang,data-th-xmllang}] [1000]: org.thymeleaf.standard.processor.StandardXmlLangTagProcessor
[THYMELEAF]             * [* {xmlns:th}] [1000]: org.thymeleaf.standard.processor.StandardXmlNsTagProcessor
[THYMELEAF]             * [* {th:xmlspace,data-th-xmlspace}] [1000]: org.thymeleaf.standard.processor.StandardXmlSpaceTagProcessor
[THYMELEAF]             * [* {th:classappend,data-th-classappend}] [1100]: org.thymeleaf.standard.processor.StandardClassappendTagProcessor
[THYMELEAF]             * [* {th:styleappend,data-th-styleappend}] [1100]: org.thymeleaf.standard.processor.StandardStyleappendTagProcessor
[THYMELEAF]             * [* {th:text,data-th-text}] [1300]: org.thymeleaf.standard.processor.StandardTextTagProcessor
[THYMELEAF]             * [* {th:utext,data-th-utext}] [1400]: org.thymeleaf.standard.processor.StandardUtextTagProcessor
[THYMELEAF]             * [* {th:fragment,data-th-fragment}] [1500]: org.thymeleaf.standard.processor.StandardFragmentTagProcessor
[THYMELEAF]             * [* {th:assert,data-th-assert}] [1550]: org.thymeleaf.standard.processor.StandardAssertTagProcessor
[THYMELEAF]             * [* {th:remove,data-th-remove}] [1600]: org.thymeleaf.standard.processor.StandardRemoveTagProcessor
[THYMELEAF]             * [* {th:ref,data-th-ref}] [10000]: org.thymeleaf.standard.processor.StandardRefAttributeTagProcessor
[THYMELEAF]             * [{th:block,th-block} *] [100000]: org.thymeleaf.standard.processor.StandardBlockTagProcessor
[THYMELEAF]             * [* th:*] [2147483647]: org.thymeleaf.standard.processor.StandardDefaultAttributesTagProcessor
[THYMELEAF]         * Text Processors by [precedence]:
[THYMELEAF]             * [1000]: org.thymeleaf.standard.processor.StandardInliningTextProcessor
[THYMELEAF]         * DOCTYPE Processors by [precedence]:
[THYMELEAF]             * [1000]: org.thymeleaf.standard.processor.StandardTranslationDocTypeProcessor
[THYMELEAF]         * CDATA Section Processors by [precedence]:
[THYMELEAF]             * [1000]: org.thymeleaf.standard.processor.StandardInliningCDATASectionProcessor
[THYMELEAF]         * Comment Processors by [precedence]:
[THYMELEAF]             * [1000]: org.thymeleaf.standard.processor.StandardInliningCommentProcessor
[THYMELEAF]             * [1100]: org.thymeleaf.standard.processor.StandardConditionalCommentProcessor
[THYMELEAF]     * Processors for Template Mode: XML
[THYMELEAF]         * Element Tag Processors by [matching element and attribute name] [precedence]:
[THYMELEAF]             * [* {th:include}] [100]: org.thymeleaf.standard.processor.StandardIncludeTagProcessor
[THYMELEAF]             * [* {th:insert}] [100]: org.thymeleaf.standard.processor.StandardInsertTagProcessor
[THYMELEAF]             * [* {th:replace}] [100]: org.thymeleaf.standard.processor.StandardReplaceTagProcessor
[THYMELEAF]             * [* {th:each}] [200]: com.intuit.karate.template.KarateEachTagProcessor
[THYMELEAF]             * [* {th:switch}] [250]: org.thymeleaf.standard.processor.StandardSwitchTagProcessor
[THYMELEAF]             * [* {th:case}] [275]: org.thymeleaf.standard.processor.StandardCaseTagProcessor
[THYMELEAF]             * [* {th:if}] [300]: org.thymeleaf.standard.processor.StandardIfTagProcessor
[THYMELEAF]             * [* {th:unless}] [400]: org.thymeleaf.standard.processor.StandardUnlessTagProcessor
[THYMELEAF]             * [* {th:object}] [500]: org.thymeleaf.standard.processor.StandardObjectTagProcessor
[THYMELEAF]             * [* {th:with}] [600]: com.intuit.karate.template.KarateWithTagProcessor
[THYMELEAF]             * [* {th:attr}] [700]: com.intuit.karate.template.KarateAttributeTagProcessor.KarateAttrTagProcessor
[THYMELEAF]             * [* {th:attrappend}] [900]: com.intuit.karate.template.KarateAttributeTagProcessor.KarateAttrappendTagProcessor
[THYMELEAF]             * [* {th:attrprepend}] [900]: com.intuit.karate.template.KarateAttributeTagProcessor.KarateAttrprependTagProcessor
[THYMELEAF]             * [* {th:inline}] [1000]: org.thymeleaf.standard.processor.StandardInlineXMLTagProcessor
[THYMELEAF]             * [* {xmlns:th}] [1000]: org.thymeleaf.standard.processor.StandardXmlNsTagProcessor
[THYMELEAF]             * [* {th:text}] [1300]: org.thymeleaf.standard.processor.StandardTextTagProcessor
[THYMELEAF]             * [* {th:utext}] [1400]: org.thymeleaf.standard.processor.StandardUtextTagProcessor
[THYMELEAF]             * [* {th:fragment}] [1500]: org.thymeleaf.standard.processor.StandardFragmentTagProcessor
[THYMELEAF]             * [* {th:assert}] [1550]: org.thymeleaf.standard.processor.StandardAssertTagProcessor
[THYMELEAF]             * [* {th:remove}] [1600]: org.thymeleaf.standard.processor.StandardRemoveTagProcessor
[THYMELEAF]             * [* {th:ref}] [10000]: org.thymeleaf.standard.processor.StandardRefAttributeTagProcessor
[THYMELEAF]             * [{th:block} *] [100000]: org.thymeleaf.standard.processor.StandardBlockTagProcessor
[THYMELEAF]             * [* th:*] [2147483647]: org.thymeleaf.standard.processor.StandardDefaultAttributesTagProcessor
[THYMELEAF]         * Text Processors by [precedence]:
[THYMELEAF]             * [1000]: org.thymeleaf.standard.processor.StandardInliningTextProcessor
[THYMELEAF]         * CDATA Section Processors by [precedence]:
[THYMELEAF]             * [1000]: org.thymeleaf.standard.processor.StandardInliningCDATASectionProcessor
[THYMELEAF]         * Comment Processors by [precedence]:
[THYMELEAF]             * [1000]: org.thymeleaf.standard.processor.StandardInliningCommentProcessor
[THYMELEAF]     * Processors for Template Mode: TEXT
[THYMELEAF]         * Element Tag Processors by [matching element and attribute name] [precedence]:
[THYMELEAF]             * [* {th:insert}] [100]: org.thymeleaf.standard.processor.StandardInsertTagProcessor
[THYMELEAF]             * [* {th:replace}] [100]: org.thymeleaf.standard.processor.StandardReplaceTagProcessor
[THYMELEAF]             * [* {th:each}] [200]: com.intuit.karate.template.KarateEachTagProcessor
[THYMELEAF]             * [* {th:switch}] [250]: org.thymeleaf.standard.processor.StandardSwitchTagProcessor
[THYMELEAF]             * [* {th:case}] [275]: org.thymeleaf.standard.processor.StandardCaseTagProcessor
[THYMELEAF]             * [* {th:if}] [300]: org.thymeleaf.standard.processor.StandardIfTagProcessor
[THYMELEAF]             * [* {th:unless}] [400]: org.thymeleaf.standard.processor.StandardUnlessTagProcessor
[THYMELEAF]             * [* {th:object}] [500]: org.thymeleaf.standard.processor.StandardObjectTagProcessor
[THYMELEAF]             * [* {th:with}] [600]: com.intuit.karate.template.KarateWithTagProcessor
[THYMELEAF]             * [* {th:inline}] [1000]: org.thymeleaf.standard.processor.StandardInlineTextualTagProcessor
[THYMELEAF]             * [* {th:text}] [1300]: org.thymeleaf.standard.processor.StandardTextTagProcessor
[THYMELEAF]             * [* {th:utext}] [1400]: org.thymeleaf.standard.processor.StandardUtextTagProcessor
[THYMELEAF]             * [* {th:assert}] [1550]: org.thymeleaf.standard.processor.StandardAssertTagProcessor
[THYMELEAF]             * [* {th:remove}] [1600]: org.thymeleaf.standard.processor.StandardRemoveTagProcessor
[THYMELEAF]             * [* 100000] [org.thymeleaf.standard.processor.StandardBlockTagProcessor]: {}
[THYMELEAF]             * [{th:block} *] [100000]: org.thymeleaf.standard.processor.StandardBlockTagProcessor
[THYMELEAF]         * Text Processors by [precedence]:
[THYMELEAF]             * [1000]: org.thymeleaf.standard.processor.StandardInliningTextProcessor
[THYMELEAF]     * Processors for Template Mode: JAVASCRIPT
[THYMELEAF]         * Element Tag Processors by [matching element and attribute name] [precedence]:
[THYMELEAF]             * [* {th:insert}] [100]: org.thymeleaf.standard.processor.StandardInsertTagProcessor
[THYMELEAF]             * [* {th:replace}] [100]: org.thymeleaf.standard.processor.StandardReplaceTagProcessor
[THYMELEAF]             * [* {th:each}] [200]: com.intuit.karate.template.KarateEachTagProcessor
[THYMELEAF]             * [* {th:switch}] [250]: org.thymeleaf.standard.processor.StandardSwitchTagProcessor
[THYMELEAF]             * [* {th:case}] [275]: org.thymeleaf.standard.processor.StandardCaseTagProcessor
[THYMELEAF]             * [* {th:if}] [300]: org.thymeleaf.standard.processor.StandardIfTagProcessor
[THYMELEAF]             * [* {th:unless}] [400]: org.thymeleaf.standard.processor.StandardUnlessTagProcessor
[THYMELEAF]             * [* {th:object}] [500]: org.thymeleaf.standard.processor.StandardObjectTagProcessor
[THYMELEAF]             * [* {th:with}] [600]: com.intuit.karate.template.KarateWithTagProcessor
[THYMELEAF]             * [* {th:inline}] [1000]: org.thymeleaf.standard.processor.StandardInlineTextualTagProcessor
[THYMELEAF]             * [* {th:text}] [1300]: org.thymeleaf.standard.processor.StandardTextTagProcessor
[THYMELEAF]             * [* {th:utext}] [1400]: org.thymeleaf.standard.processor.StandardUtextTagProcessor
[THYMELEAF]             * [* {th:assert}] [1550]: org.thymeleaf.standard.processor.StandardAssertTagProcessor
[THYMELEAF]             * [* {th:remove}] [1600]: org.thymeleaf.standard.processor.StandardRemoveTagProcessor
[THYMELEAF]             * [{th:block} *] [100000]: org.thymeleaf.standard.processor.StandardBlockTagProcessor
[THYMELEAF]             * [* 100000] [org.thymeleaf.standard.processor.StandardBlockTagProcessor]: {}
[THYMELEAF]         * Text Processors by [precedence]:
[THYMELEAF]             * [1000]: org.thymeleaf.standard.processor.StandardInliningTextProcessor
[THYMELEAF]     * Processors for Template Mode: CSS
[THYMELEAF]         * Element Tag Processors by [matching element and attribute name] [precedence]:
[THYMELEAF]             * [* {th:insert}] [100]: org.thymeleaf.standard.processor.StandardInsertTagProcessor
[THYMELEAF]             * [* {th:replace}] [100]: org.thymeleaf.standard.processor.StandardReplaceTagProcessor
[THYMELEAF]             * [* {th:each}] [200]: com.intuit.karate.template.KarateEachTagProcessor
[THYMELEAF]             * [* {th:switch}] [250]: org.thymeleaf.standard.processor.StandardSwitchTagProcessor
[THYMELEAF]             * [* {th:case}] [275]: org.thymeleaf.standard.processor.StandardCaseTagProcessor
[THYMELEAF]             * [* {th:if}] [300]: org.thymeleaf.standard.processor.StandardIfTagProcessor
[THYMELEAF]             * [* {th:unless}] [400]: org.thymeleaf.standard.processor.StandardUnlessTagProcessor
[THYMELEAF]             * [* {th:object}] [500]: org.thymeleaf.standard.processor.StandardObjectTagProcessor
[THYMELEAF]             * [* {th:with}] [600]: com.intuit.karate.template.KarateWithTagProcessor
[THYMELEAF]             * [* {th:inline}] [1000]: org.thymeleaf.standard.processor.StandardInlineTextualTagProcessor
[THYMELEAF]             * [* {th:text}] [1300]: org.thymeleaf.standard.processor.StandardTextTagProcessor
[THYMELEAF]             * [* {th:utext}] [1400]: org.thymeleaf.standard.processor.StandardUtextTagProcessor
[THYMELEAF]             * [* {th:assert}] [1550]: org.thymeleaf.standard.processor.StandardAssertTagProcessor
[THYMELEAF]             * [* {th:remove}] [1600]: org.thymeleaf.standard.processor.StandardRemoveTagProcessor
[THYMELEAF]             * [{th:block} *] [100000]: org.thymeleaf.standard.processor.StandardBlockTagProcessor
[THYMELEAF]             * [* 100000] [org.thymeleaf.standard.processor.StandardBlockTagProcessor]: {}
[THYMELEAF]         * Text Processors by [precedence]:
[THYMELEAF]             * [1000]: org.thymeleaf.standard.processor.StandardInliningTextProcessor
[THYMELEAF]     * Expression Objects:
[THYMELEAF]         * #ctx
[THYMELEAF]         * #root
[THYMELEAF]         * #vars
[THYMELEAF]         * #object
[THYMELEAF]         * #locale
[THYMELEAF]         * #conversions
[THYMELEAF]         * #uris
[THYMELEAF]         * #temporals
[THYMELEAF]         * #calendars
[THYMELEAF]         * #dates
[THYMELEAF]         * #bools
[THYMELEAF]         * #numbers
[THYMELEAF]         * #objects
[THYMELEAF]         * #strings
[THYMELEAF]         * #arrays
[THYMELEAF]         * #lists
[THYMELEAF]         * #sets
[THYMELEAF]         * #maps
[THYMELEAF]         * #aggregates
[THYMELEAF]         * #messages
[THYMELEAF]         * #ids
[THYMELEAF]         * #execInfo
[THYMELEAF]         * #request
[THYMELEAF]         * #response
[THYMELEAF]         * #session
[THYMELEAF]         * #servletContext
[THYMELEAF]     * Execution Attributes:
[THYMELEAF]         * "StandardExpressionParser": com.intuit.karate.template.KarateStandardDialect@7b9d1a4
[THYMELEAF]         * "StandardJavaScriptSerializer": org.thymeleaf.standard.serializer.StandardJavaScriptSerializer@22f057b4
[THYMELEAF]         * "StandardCSSSerializer": org.thymeleaf.standard.serializer.StandardCSSSerializer@581e8969
[THYMELEAF]         * "StandardVariableExpressionEvaluator": com.intuit.karate.template.KarateStandardDialect@7b9d1a4
[THYMELEAF]         * "StandardConversionService": org.thymeleaf.standard.expression.StandardConversionService@767b9d66
[THYMELEAF] * Dialect [2 of 2]: karate (com.intuit.karate.template.KarateScriptDialect)
[THYMELEAF]     * Prefix: "ka"
[THYMELEAF]     * Processors for Template Mode: HTML
[THYMELEAF]         * Element Tag Processors by [matching element and attribute name] [precedence]:
[THYMELEAF]             * [* {src}] [1000]: com.intuit.karate.template.KaScriptAttrProcessor
[THYMELEAF]         * Element Model Processors by [matching element and attribute name] [precedence]:
[THYMELEAF]             * [{script} {ka:scope,data-ka-scope}] [1000]: com.intuit.karate.template.KaScriptElemProcessor
[THYMELEAF]             * [* {ka:set,data-ka-set}] [1000]: com.intuit.karate.template.KaSetElemProcessor
[THYMELEAF] TEMPLATE ENGINE CONFIGURED OK
12:08:41.770 [Test worker] DEBUG org.thymeleaf.TemplateEngine -- [THYMELEAF] TEMPLATE ENGINE INITIALIZED

HTML report: (paste into browser to view) | Karate version: 1.4.1
file:///Users/jennyguerreroburbano/WebstormProjects/KarateAutomation/build/karate-reports/karate-summary.html
===================================================================

]]></system-out>
  <system-err><![CDATA[]]></system-err>
</testsuite>
